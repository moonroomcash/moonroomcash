# Makefile.in generated by automake 1.15.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2017 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/moonroomcash
pkgincludedir = $(includedir)/moonroomcash
pkglibdir = $(libdir)/moonroomcash
pkglibexecdir = $(libexecdir)/moonroomcash
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
am__append_1 = -I$(srcdir)/leveldb/include \
	-I$(srcdir)/leveldb/helpers/memenv
am__append_2 = $(builddir)/leveldb/libleveldb.a
am__append_3 = $(builddir)/leveldb/libmemenv.a
am__append_4 = MULTICORE=1
am__append_5 = $(BDB_CPPFLAGS)
am__append_6 = libbitcoin_wallet.a
am__append_7 = libbitcoin_zmq.a
#am__append_8 = libbitcoin_proton.a
bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2)
noinst_PROGRAMS = $(am__EXEEXT_3) moonroomcash/GenerateParams$(EXEEXT) \
	moonroomcash/CreateJoinSplit$(EXEEXT)
TESTS = $(am__EXEEXT_3)
am__append_9 = moonroomcashd
am__append_10 = moonroomcash-cli moonroomcash-tx
am__append_11 = \
  -DEQUIHASH_TROMP_ATOMIC

am__append_12 = \
  ${EQUIHASH_TROMP_SOURCES}

#am__append_13 = compat/glibc_compat.cpp
#am__append_14 = bitcoind-res.rc
am__append_15 = $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)
am__append_16 = libbitcoin_wallet.a
#am__append_17 = $(LIBBITCOIN_PROTON) $(PROTON_LIBS)
#am__append_18 = bitcoin-cli-res.rc
#am__append_19 = bitcoin-tx-res.rc
#am__append_20 = compat/glibc_compat.cpp
am__append_21 = test/test_bitcoin \
	moonroomcash-gtest
am__append_22 = test/test_bitcoin \
	moonroomcash-gtest
am__append_23 = \
	test/bctest.py \
	test/bitcoin-util-test.py \
	test/data/bitcoin-util-test.json \
	test/data/blanktx.hex \
	test/data/tt-delin1-out.hex \
	test/data/tt-delout1-out.hex \
	test/data/tt-locktime317000-out.hex \
	test/data/tx394b54bb.hex \
	test/data/txcreate1.hex \
	test/data/txcreate2.hex \
	test/data/txcreatesign.hex

am__append_24 = \
  test/accounting_tests.cpp \
  wallet/test/wallet_tests.cpp \
  test/rpc_wallet_tests.cpp

am__append_25 = $(LIBBITCOIN_WALLET)
am__append_26 = $(ZMQ_LIBS)
#am__append_27 = $(PROTON_LIBS)
am__append_28 = $(CLEAN_BITCOIN_TEST)
# These tests are order-dependent, because they
# depend on global state (see #1539)
am__append_29 = \
	wallet/gtest/test_wallet_zkeys.cpp

am__append_30 = \
	wallet/gtest/test_wallet.cpp

am__append_31 = $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)
am__append_32 = $(LIBBITCOIN_WALLET)
#am__append_33 = $(LIBBITCOIN_PROTON) $(PROTON_LIBS)
subdir = src
SUBDIRS =
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/build-aux/m4/ax_boost_base.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_chrono.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_filesystem.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_program_options.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_system.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_thread.m4 \
	$(top_srcdir)/build-aux/m4/ax_boost_unit_test_framework.m4 \
	$(top_srcdir)/build-aux/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/build-aux/m4/ax_check_link_flag.m4 \
	$(top_srcdir)/build-aux/m4/ax_check_preproc_flag.m4 \
	$(top_srcdir)/build-aux/m4/ax_cxx_compile_stdcxx.m4 \
	$(top_srcdir)/build-aux/m4/ax_gcc_func_attribute.m4 \
	$(top_srcdir)/build-aux/m4/ax_openmp.m4 \
	$(top_srcdir)/build-aux/m4/ax_pthread.m4 \
	$(top_srcdir)/build-aux/m4/bitcoin_find_bdb.m4 \
	$(top_srcdir)/build-aux/m4/bitcoin_subdir_to_include.m4 \
	$(top_srcdir)/build-aux/m4/l_atomic.m4 \
	$(top_srcdir)/build-aux/m4/libtool.m4 \
	$(top_srcdir)/build-aux/m4/ltoptions.m4 \
	$(top_srcdir)/build-aux/m4/ltsugar.m4 \
	$(top_srcdir)/build-aux/m4/ltversion.m4 \
	$(top_srcdir)/build-aux/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__include_HEADERS_DIST) \
	$(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/src/config/bitcoin-config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_AR = $(am__v_AR_$(V))
am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 = 
crypto_libbitcoin_crypto_a_AR = $(AR) $(ARFLAGS)
crypto_libbitcoin_crypto_a_LIBADD =
am__crypto_libbitcoin_crypto_a_SOURCES_DIST = crypto/common.h \
	crypto/equihash.cpp crypto/equihash.h crypto/equihash.tcc \
	crypto/hmac_sha256.cpp crypto/hmac_sha256.h \
	crypto/hmac_sha512.cpp crypto/hmac_sha512.h \
	crypto/ripemd160.cpp crypto/ripemd160.h crypto/sha1.cpp \
	crypto/sha1.h crypto/sha256.cpp crypto/sha256.h \
	crypto/sha512.cpp crypto/sha512.h pow/tromp/equi_miner.h \
	pow/tromp/equi.h pow/tromp/osx_barrier.h
am__dirstamp = $(am__leading_dot)dirstamp
am__objects_1 =
am__objects_2 = $(am__objects_1)
am_crypto_libbitcoin_crypto_a_OBJECTS =  \
	crypto/crypto_libbitcoin_crypto_a-equihash.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-hmac_sha256.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-hmac_sha512.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-ripemd160.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-sha1.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-sha256.$(OBJEXT) \
	crypto/crypto_libbitcoin_crypto_a-sha512.$(OBJEXT) \
	$(am__objects_2)
crypto_libbitcoin_crypto_a_OBJECTS =  \
	$(am_crypto_libbitcoin_crypto_a_OBJECTS)
libbitcoin_cli_a_AR = $(AR) $(ARFLAGS)
libbitcoin_cli_a_LIBADD =
am_libbitcoin_cli_a_OBJECTS = libbitcoin_cli_a-rpcclient.$(OBJEXT) \
	$(am__objects_1) $(am__objects_1)
libbitcoin_cli_a_OBJECTS = $(am_libbitcoin_cli_a_OBJECTS)
libbitcoin_common_a_AR = $(AR) $(ARFLAGS)
libbitcoin_common_a_LIBADD =
am_libbitcoin_common_a_OBJECTS = libbitcoin_common_a-amount.$(OBJEXT) \
	libbitcoin_common_a-arith_uint256.$(OBJEXT) \
	libbitcoin_common_a-base58.$(OBJEXT) \
	libbitcoin_common_a-chainparams.$(OBJEXT) \
	libbitcoin_common_a-coins.$(OBJEXT) \
	libbitcoin_common_a-compressor.$(OBJEXT) \
	libbitcoin_common_a-core_read.$(OBJEXT) \
	libbitcoin_common_a-core_write.$(OBJEXT) \
	libbitcoin_common_a-hash.$(OBJEXT) \
	libbitcoin_common_a-key.$(OBJEXT) \
	libbitcoin_common_a-keystore.$(OBJEXT) \
	libbitcoin_common_a-netbase.$(OBJEXT) \
	primitives/libbitcoin_common_a-block.$(OBJEXT) \
	primitives/libbitcoin_common_a-transaction.$(OBJEXT) \
	libbitcoin_common_a-protocol.$(OBJEXT) \
	libbitcoin_common_a-pubkey.$(OBJEXT) \
	libbitcoin_common_a-scheduler.$(OBJEXT) \
	script/libbitcoin_common_a-interpreter.$(OBJEXT) \
	script/libbitcoin_common_a-script.$(OBJEXT) \
	script/libbitcoin_common_a-script_error.$(OBJEXT) \
	script/libbitcoin_common_a-sign.$(OBJEXT) \
	script/libbitcoin_common_a-standard.$(OBJEXT) $(am__objects_1) \
	$(am__objects_1)
libbitcoin_common_a_OBJECTS = $(am_libbitcoin_common_a_OBJECTS)
libbitcoin_proton_a_AR = $(AR) $(ARFLAGS)
libbitcoin_proton_a_LIBADD =
am__libbitcoin_proton_a_SOURCES_DIST = amqp/amqpabstractnotifier.cpp \
	amqp/amqpnotificationinterface.cpp \
	amqp/amqppublishnotifier.cpp
#am_libbitcoin_proton_a_OBJECTS = amqp/libbitcoin_proton_a-amqpabstractnotifier.$(OBJEXT) \
#	amqp/libbitcoin_proton_a-amqpnotificationinterface.$(OBJEXT) \
#	amqp/libbitcoin_proton_a-amqppublishnotifier.$(OBJEXT)
libbitcoin_proton_a_OBJECTS = $(am_libbitcoin_proton_a_OBJECTS)
libbitcoin_server_a_AR = $(AR) $(ARFLAGS)
libbitcoin_server_a_LIBADD =
am_libbitcoin_server_a_OBJECTS =  \
	libbitcoin_server_a-sendalert.$(OBJEXT) \
	libbitcoin_server_a-addrman.$(OBJEXT) \
	libbitcoin_server_a-alert.$(OBJEXT) \
	libbitcoin_server_a-asyncrpcoperation.$(OBJEXT) \
	libbitcoin_server_a-asyncrpcqueue.$(OBJEXT) \
	libbitcoin_server_a-bloom.$(OBJEXT) \
	libbitcoin_server_a-chain.$(OBJEXT) \
	libbitcoin_server_a-checkpoints.$(OBJEXT) \
	libbitcoin_server_a-deprecation.$(OBJEXT) \
	libbitcoin_server_a-httprpc.$(OBJEXT) \
	libbitcoin_server_a-httpserver.$(OBJEXT) \
	libbitcoin_server_a-init.$(OBJEXT) \
	libbitcoin_server_a-leveldbwrapper.$(OBJEXT) \
	libbitcoin_server_a-main.$(OBJEXT) \
	libbitcoin_server_a-merkleblock.$(OBJEXT) \
	libbitcoin_server_a-metrics.$(OBJEXT) \
	libbitcoin_server_a-miner.$(OBJEXT) \
	libbitcoin_server_a-net.$(OBJEXT) \
	libbitcoin_server_a-noui.$(OBJEXT) \
	libbitcoin_server_a-paymentdisclosure.$(OBJEXT) \
	libbitcoin_server_a-paymentdisclosuredb.$(OBJEXT) \
	policy/libbitcoin_server_a-fees.$(OBJEXT) \
	libbitcoin_server_a-pow.$(OBJEXT) \
	libbitcoin_server_a-rest.$(OBJEXT) \
	libbitcoin_server_a-rpcblockchain.$(OBJEXT) \
	libbitcoin_server_a-rpcmining.$(OBJEXT) \
	libbitcoin_server_a-rpcmisc.$(OBJEXT) \
	libbitcoin_server_a-rpcnet.$(OBJEXT) \
	libbitcoin_server_a-rpcrawtransaction.$(OBJEXT) \
	libbitcoin_server_a-rpcserver.$(OBJEXT) \
	script/libbitcoin_server_a-sigcache.$(OBJEXT) \
	libbitcoin_server_a-timedata.$(OBJEXT) \
	libbitcoin_server_a-torcontrol.$(OBJEXT) \
	libbitcoin_server_a-txdb.$(OBJEXT) \
	libbitcoin_server_a-txmempool.$(OBJEXT) \
	libbitcoin_server_a-validationinterface.$(OBJEXT) \
	$(am__objects_1) $(am__objects_1)
libbitcoin_server_a_OBJECTS = $(am_libbitcoin_server_a_OBJECTS)
libbitcoin_util_a_AR = $(AR) $(ARFLAGS)
libbitcoin_util_a_LIBADD =
am__libbitcoin_util_a_SOURCES_DIST = support/pagelocker.cpp \
	chainparamsbase.cpp clientversion.cpp compat/glibc_sanity.cpp \
	compat/glibcxx_sanity.cpp compat/strnlen.cpp random.cpp \
	rpcprotocol.cpp support/cleanse.cpp sync.cpp uint256.cpp \
	util.cpp utilmoneystr.cpp utilstrencodings.cpp utiltime.cpp \
	addrman.h alert.h amount.h amqp/amqpabstractnotifier.h \
	amqp/amqpconfig.h amqp/amqpnotificationinterface.h \
	amqp/amqppublishnotifier.h amqp/amqpsender.h arith_uint256.h \
	asyncrpcoperation.h asyncrpcqueue.h base58.h bloom.h chain.h \
	chainparams.h chainparamsbase.h chainparamsseeds.h \
	checkpoints.h checkqueue.h clientversion.h coincontrol.h \
	coins.h compat.h compat/byteswap.h compat/endian.h \
	compat/sanity.h compressor.h consensus/consensus.h \
	consensus/params.h consensus/validation.h core_io.h \
	core_memusage.h deprecation.h hash.h httprpc.h httpserver.h \
	init.h key.h keystore.h leveldbwrapper.h limitedmap.h main.h \
	memusage.h merkleblock.h metrics.h miner.h mruset.h net.h \
	netbase.h noui.h paymentdisclosure.h paymentdisclosuredb.h \
	policy/fees.h pow.h primitives/block.h \
	primitives/transaction.h protocol.h pubkey.h random.h \
	reverselock.h rpcclient.h rpcprotocol.h rpcserver.h \
	scheduler.h script/interpreter.h script/script.h \
	script/script_error.h script/sigcache.h script/sign.h \
	script/standard.h serialize.h streams.h \
	support/allocators/secure.h support/allocators/zeroafterfree.h \
	support/cleanse.h support/events.h support/pagelocker.h sync.h \
	threadsafety.h timedata.h tinyformat.h torcontrol.h txdb.h \
	txmempool.h ui_interface.h uint256.h uint252.h undo.h util.h \
	utilmoneystr.h utilstrencodings.h utiltime.h \
	validationinterface.h version.h \
	wallet/asyncrpcoperation_sendmany.h \
	wallet/asyncrpcoperation_shieldcoinbase.h wallet/crypter.h \
	wallet/db.h wallet/wallet.h wallet/wallet_ismine.h \
	wallet/walletdb.h zmq/zmqabstractnotifier.h zmq/zmqconfig.h \
	zmq/zmqnotificationinterface.h zmq/zmqpublishnotifier.h \
	moonroomcash/IncrementalMerkleTree.hpp \
	moonroomcash/NoteEncryption.hpp moonroomcash/Address.hpp \
	moonroomcash/JoinSplit.hpp moonroomcash/Note.hpp \
	moonroomcash/prf.h moonroomcash/Proof.hpp moonroomcash/util.h \
	moonroomcash/Moonroomcash.h compat/glibc_compat.cpp
#am__objects_3 = compat/libbitcoin_util_a-glibc_compat.$(OBJEXT)
am_libbitcoin_util_a_OBJECTS =  \
	support/libbitcoin_util_a-pagelocker.$(OBJEXT) \
	libbitcoin_util_a-chainparamsbase.$(OBJEXT) \
	libbitcoin_util_a-clientversion.$(OBJEXT) \
	compat/libbitcoin_util_a-glibc_sanity.$(OBJEXT) \
	compat/libbitcoin_util_a-glibcxx_sanity.$(OBJEXT) \
	compat/libbitcoin_util_a-strnlen.$(OBJEXT) \
	libbitcoin_util_a-random.$(OBJEXT) \
	libbitcoin_util_a-rpcprotocol.$(OBJEXT) \
	support/libbitcoin_util_a-cleanse.$(OBJEXT) \
	libbitcoin_util_a-sync.$(OBJEXT) \
	libbitcoin_util_a-uint256.$(OBJEXT) \
	libbitcoin_util_a-util.$(OBJEXT) \
	libbitcoin_util_a-utilmoneystr.$(OBJEXT) \
	libbitcoin_util_a-utilstrencodings.$(OBJEXT) \
	libbitcoin_util_a-utiltime.$(OBJEXT) $(am__objects_1) \
	$(am__objects_1) $(am__objects_3)
nodist_libbitcoin_util_a_OBJECTS =
libbitcoin_util_a_OBJECTS = $(am_libbitcoin_util_a_OBJECTS) \
	$(nodist_libbitcoin_util_a_OBJECTS)
libbitcoin_wallet_a_AR = $(AR) $(ARFLAGS)
libbitcoin_wallet_a_LIBADD =
am_libbitcoin_wallet_a_OBJECTS =  \
	libbitcoin_wallet_a-utiltest.$(OBJEXT) \
	libbitcoin_wallet_a-zcbenchmarks.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-crypter.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-db.$(OBJEXT) \
	libbitcoin_wallet_a-paymentdisclosure.$(OBJEXT) \
	libbitcoin_wallet_a-paymentdisclosuredb.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-rpcdisclosure.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-rpcdump.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-rpcwallet.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-wallet.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-wallet_ismine.$(OBJEXT) \
	wallet/libbitcoin_wallet_a-walletdb.$(OBJEXT) $(am__objects_1) \
	$(am__objects_1)
libbitcoin_wallet_a_OBJECTS = $(am_libbitcoin_wallet_a_OBJECTS)
libbitcoin_zmq_a_AR = $(AR) $(ARFLAGS)
libbitcoin_zmq_a_LIBADD =
am__libbitcoin_zmq_a_SOURCES_DIST = zmq/zmqabstractnotifier.cpp \
	zmq/zmqnotificationinterface.cpp zmq/zmqpublishnotifier.cpp
am_libbitcoin_zmq_a_OBJECTS = zmq/libbitcoin_zmq_a-zmqabstractnotifier.$(OBJEXT) \
	zmq/libbitcoin_zmq_a-zmqnotificationinterface.$(OBJEXT) \
	zmq/libbitcoin_zmq_a-zmqpublishnotifier.$(OBJEXT)
libbitcoin_zmq_a_OBJECTS = $(am_libbitcoin_zmq_a_OBJECTS)
libmoonroomcash_a_AR = $(AR) $(ARFLAGS)
libmoonroomcash_a_LIBADD =
am_libmoonroomcash_a_OBJECTS = moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-NoteEncryption.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-Address.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-JoinSplit.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-Proof.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-Note.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-prf.$(OBJEXT) \
	moonroomcash/libmoonroomcash_a-util.$(OBJEXT)
libmoonroomcash_a_OBJECTS = $(am_libmoonroomcash_a_OBJECTS)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(includedir)"
LTLIBRARIES = $(lib_LTLIBRARIES)
libmoonroomcashconsensus_la_DEPENDENCIES =  \
	$(LIBSECP256K1)
am__libmoonroomcashconsensus_la_SOURCES_DIST = crypto/equihash.cpp \
	crypto/hmac_sha512.cpp crypto/ripemd160.cpp crypto/sha1.cpp \
	crypto/sha256.cpp crypto/sha512.cpp hash.cpp \
	primitives/transaction.cpp pubkey.cpp \
	script/moonroomcashconsensus.cpp script/interpreter.cpp \
	script/script.cpp uint256.cpp utilstrencodings.cpp \
	compat/glibc_compat.cpp
#am__objects_4 = compat/libmoonroomcashconsensus_la-glibc_compat.lo
am_libmoonroomcashconsensus_la_OBJECTS = crypto/libmoonroomcashconsensus_la-equihash.lo \
	crypto/libmoonroomcashconsensus_la-hmac_sha512.lo \
	crypto/libmoonroomcashconsensus_la-ripemd160.lo \
	crypto/libmoonroomcashconsensus_la-sha1.lo \
	crypto/libmoonroomcashconsensus_la-sha256.lo \
	crypto/libmoonroomcashconsensus_la-sha512.lo \
	libmoonroomcashconsensus_la-hash.lo \
	primitives/libmoonroomcashconsensus_la-transaction.lo \
	libmoonroomcashconsensus_la-pubkey.lo \
	script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo \
	script/libmoonroomcashconsensus_la-interpreter.lo \
	script/libmoonroomcashconsensus_la-script.lo \
	libmoonroomcashconsensus_la-uint256.lo \
	libmoonroomcashconsensus_la-utilstrencodings.lo \
	$(am__objects_4)
libmoonroomcashconsensus_la_OBJECTS =  \
	$(am_libmoonroomcashconsensus_la_OBJECTS)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
libmoonroomcashconsensus_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) \
	$(libmoonroomcashconsensus_la_LDFLAGS) $(LDFLAGS) -o $@
am_libmoonroomcashconsensus_la_rpath =  \
	-rpath $(libdir)
am__EXEEXT_1 = moonroomcashd$(EXEEXT)
am__EXEEXT_2 = moonroomcash-cli$(EXEEXT) \
	moonroomcash-tx$(EXEEXT)
am__EXEEXT_3 = test/test_bitcoin$(EXEEXT) \
	moonroomcash-gtest$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am__moonroomcash_cli_SOURCES_DIST = bitcoin-cli.cpp bitcoin-cli-res.rc
#am__objects_5 = bitcoin-cli-res.$(OBJEXT)
am_moonroomcash_cli_OBJECTS = moonroomcash_cli-bitcoin-cli.$(OBJEXT) \
	$(am__objects_5)
moonroomcash_cli_OBJECTS = $(am_moonroomcash_cli_OBJECTS)
am__DEPENDENCIES_1 =
moonroomcash_cli_DEPENDENCIES = $(LIBBITCOIN_CLI) $(LIBUNIVALUE) \
	$(LIBBITCOIN_UTIL) $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) $(LIBMRCCASH) \
	$(LIBSNARK) $(LIBBITCOIN_CRYPTO) $(am__DEPENDENCIES_1)
moonroomcash_cli_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcash_cli_CXXFLAGS) $(CXXFLAGS) \
	$(moonroomcash_cli_LDFLAGS) $(LDFLAGS) -o $@
am__moonroomcash_gtest_SOURCES_DIST = gtest/main.cpp gtest/utils.cpp \
	gtest/test_checktransaction.cpp gtest/json_test_vectors.cpp \
	gtest/json_test_vectors.h gtest/test_foundersreward.cpp \
	wallet/gtest/test_wallet_zkeys.cpp gtest/test_tautology.cpp \
	gtest/test_deprecation.cpp gtest/test_equihash.cpp \
	gtest/test_httprpc.cpp gtest/test_joinsplit.cpp \
	gtest/test_keystore.cpp gtest/test_noteencryption.cpp \
	gtest/test_mempool.cpp gtest/test_merkletree.cpp \
	gtest/test_metrics.cpp gtest/test_miner.cpp gtest/test_pow.cpp \
	gtest/test_random.cpp gtest/test_rpc.cpp \
	gtest/test_transaction.cpp gtest/test_validation.cpp \
	gtest/test_circuit.cpp gtest/test_txid.cpp \
	gtest/test_libmoonroomcash_utils.cpp gtest/test_proofs.cpp \
	gtest/test_paymentdisclosure.cpp gtest/test_checkblock.cpp \
	wallet/gtest/test_wallet.cpp
am__objects_6 = wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.$(OBJEXT)
am__objects_7 = wallet/gtest/moonroomcash_gtest-test_wallet.$(OBJEXT)
am_moonroomcash_gtest_OBJECTS =  \
	gtest/moonroomcash_gtest-main.$(OBJEXT) \
	gtest/moonroomcash_gtest-utils.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_checktransaction.$(OBJEXT) \
	gtest/moonroomcash_gtest-json_test_vectors.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_foundersreward.$(OBJEXT) \
	$(am__objects_6) \
	gtest/moonroomcash_gtest-test_tautology.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_deprecation.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_equihash.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_httprpc.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_joinsplit.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_keystore.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_noteencryption.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_mempool.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_merkletree.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_metrics.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_miner.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_pow.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_random.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_rpc.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_transaction.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_validation.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_circuit.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_txid.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_libmoonroomcash_utils.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_proofs.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_paymentdisclosure.$(OBJEXT) \
	gtest/moonroomcash_gtest-test_checkblock.$(OBJEXT) \
	$(am__objects_7)
moonroomcash_gtest_OBJECTS = $(am_moonroomcash_gtest_OBJECTS)
am__DEPENDENCIES_2 = $(am__append_2)
am__DEPENDENCIES_3 = $(am__append_3)
am__DEPENDENCIES_4 =  \
	$(LIBBITCOIN_ZMQ) \
	$(am__DEPENDENCIES_1)
am__DEPENDENCIES_5 =  \
	libmoonroomcashconsensus.la
#am__DEPENDENCIES_6 =  \
#	$(LIBBITCOIN_PROTON) \
#	$(am__DEPENDENCIES_1)
moonroomcash_gtest_DEPENDENCIES =  \
	$(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) \
	$(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) \
	$(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(LIBSECP256K1) $(am__DEPENDENCIES_4) \
	$(am__append_32) $(am__DEPENDENCIES_5) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(LIBMRCCASH) \
	$(LIBSNARK) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_6)
moonroomcash_gtest_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) \
	$(moonroomcash_gtest_LDFLAGS) $(LDFLAGS) -o $@
am__moonroomcash_tx_SOURCES_DIST = bitcoin-tx.cpp bitcoin-tx-res.rc
#am__objects_8 = bitcoin-tx-res.$(OBJEXT)
am_moonroomcash_tx_OBJECTS = moonroomcash_tx-bitcoin-tx.$(OBJEXT) \
	$(am__objects_8)
moonroomcash_tx_OBJECTS = $(am_moonroomcash_tx_OBJECTS)
moonroomcash_tx_DEPENDENCIES = $(LIBUNIVALUE) $(LIBBITCOIN_COMMON) \
	$(LIBBITCOIN_UTIL) $(LIBSECP256K1) $(LIBMRCCASH) $(LIBSNARK) \
	$(LIBBITCOIN_CRYPTO) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
moonroomcash_tx_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcash_tx_CXXFLAGS) $(CXXFLAGS) \
	$(moonroomcash_tx_LDFLAGS) $(LDFLAGS) -o $@
am_moonroomcash_CreateJoinSplit_OBJECTS = moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.$(OBJEXT)
moonroomcash_CreateJoinSplit_OBJECTS =  \
	$(am_moonroomcash_CreateJoinSplit_OBJECTS)
moonroomcash_CreateJoinSplit_DEPENDENCIES = $(LIBBITCOIN_COMMON) \
	$(LIBMRCCASH) $(LIBSNARK) $(LIBBITCOIN_UTIL) \
	$(LIBBITCOIN_CRYPTO) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
moonroomcash_CreateJoinSplit_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcash_CreateJoinSplit_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am_moonroomcash_GenerateParams_OBJECTS = moonroomcash/moonroomcash_GenerateParams-GenerateParams.$(OBJEXT)
moonroomcash_GenerateParams_OBJECTS =  \
	$(am_moonroomcash_GenerateParams_OBJECTS)
moonroomcash_GenerateParams_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(LIBMRCCASH) $(LIBSNARK) $(LIBBITCOIN_UTIL) \
	$(LIBBITCOIN_CRYPTO) $(am__DEPENDENCIES_1)
moonroomcash_GenerateParams_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcash_GenerateParams_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am__moonroomcashd_SOURCES_DIST = bitcoind.cpp bitcoind-res.rc
#am__objects_9 = bitcoind-res.$(OBJEXT)
am_moonroomcashd_OBJECTS = moonroomcashd-bitcoind.$(OBJEXT) \
	$(am__objects_9)
moonroomcashd_OBJECTS = $(am_moonroomcashd_OBJECTS)
am__DEPENDENCIES_7 = $(LIBBITCOIN_ZMQ) \
	$(am__DEPENDENCIES_1)
#am__DEPENDENCIES_8 = $(LIBBITCOIN_PROTON) \
#	$(am__DEPENDENCIES_1)
moonroomcashd_DEPENDENCIES = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \
	$(LIBUNIVALUE) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) \
	$(LIBMRCCASH) $(LIBSNARK) $(am__DEPENDENCIES_2) \
	$(am__DEPENDENCIES_3) $(LIBSECP256K1) $(am__DEPENDENCIES_7) \
	$(am__append_16) $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(LIBBITCOIN_CRYPTO) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_8)
moonroomcashd_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(moonroomcashd_CXXFLAGS) $(CXXFLAGS) $(moonroomcashd_LDFLAGS) \
	$(LDFLAGS) -o $@
am__test_test_bitcoin_SOURCES_DIST = test/arith_uint256_tests.cpp \
	test/bignum.h test/addrman_tests.cpp test/alert_tests.cpp \
	test/allocator_tests.cpp test/base32_tests.cpp \
	test/base58_tests.cpp test/base64_tests.cpp \
	test/bip32_tests.cpp test/bloom_tests.cpp \
	test/checkblock_tests.cpp test/Checkpoints_tests.cpp \
	test/coins_tests.cpp test/compress_tests.cpp \
	test/crypto_tests.cpp test/DoS_tests.cpp \
	test/equihash_tests.cpp test/getarg_tests.cpp \
	test/hash_tests.cpp test/key_tests.cpp test/main_tests.cpp \
	test/mempool_tests.cpp test/miner_tests.cpp \
	test/mruset_tests.cpp test/multisig_tests.cpp \
	test/netbase_tests.cpp test/pmt_tests.cpp \
	test/policyestimator_tests.cpp test/pow_tests.cpp \
	test/raii_event_tests.cpp test/reverselock_tests.cpp \
	test/rpc_tests.cpp test/sanity_tests.cpp \
	test/scheduler_tests.cpp test/script_P2SH_tests.cpp \
	test/script_tests.cpp test/scriptnum_tests.cpp \
	test/serialize_tests.cpp test/sighash_tests.cpp \
	test/sigopcount_tests.cpp test/skiplist_tests.cpp \
	test/test_bitcoin.cpp test/test_bitcoin.h \
	test/timedata_tests.cpp test/torcontrol_tests.cpp \
	test/transaction_tests.cpp test/uint256_tests.cpp \
	test/univalue_tests.cpp test/util_tests.cpp \
	test/sha256compress_tests.cpp test/accounting_tests.cpp \
	wallet/test/wallet_tests.cpp test/rpc_wallet_tests.cpp \
	test/data/script_valid.json test/data/base58_keys_valid.json \
	test/data/base58_encode_decode.json \
	test/data/base58_keys_invalid.json \
	test/data/script_invalid.json test/data/tx_invalid.json \
	test/data/tx_valid.json test/data/sighash.json \
	test/data/merkle_roots.json test/data/merkle_roots_empty.json \
	test/data/merkle_serialization.json \
	test/data/merkle_witness_serialization.json \
	test/data/merkle_path.json test/data/merkle_commitments.json \
	test/data/g1_compressed.json test/data/g2_compressed.json \
	test/data/alertTests.raw
am__objects_10 = test/test_test_bitcoin-accounting_tests.$(OBJEXT) \
	wallet/test/test_test_bitcoin-wallet_tests.$(OBJEXT) \
	test/test_test_bitcoin-rpc_wallet_tests.$(OBJEXT)
am__objects_11 = test/test_test_bitcoin-arith_uint256_tests.$(OBJEXT) \
	test/test_test_bitcoin-addrman_tests.$(OBJEXT) \
	test/test_test_bitcoin-alert_tests.$(OBJEXT) \
	test/test_test_bitcoin-allocator_tests.$(OBJEXT) \
	test/test_test_bitcoin-base32_tests.$(OBJEXT) \
	test/test_test_bitcoin-base58_tests.$(OBJEXT) \
	test/test_test_bitcoin-base64_tests.$(OBJEXT) \
	test/test_test_bitcoin-bip32_tests.$(OBJEXT) \
	test/test_test_bitcoin-bloom_tests.$(OBJEXT) \
	test/test_test_bitcoin-checkblock_tests.$(OBJEXT) \
	test/test_test_bitcoin-Checkpoints_tests.$(OBJEXT) \
	test/test_test_bitcoin-coins_tests.$(OBJEXT) \
	test/test_test_bitcoin-compress_tests.$(OBJEXT) \
	test/test_test_bitcoin-crypto_tests.$(OBJEXT) \
	test/test_test_bitcoin-DoS_tests.$(OBJEXT) \
	test/test_test_bitcoin-equihash_tests.$(OBJEXT) \
	test/test_test_bitcoin-getarg_tests.$(OBJEXT) \
	test/test_test_bitcoin-hash_tests.$(OBJEXT) \
	test/test_test_bitcoin-key_tests.$(OBJEXT) \
	test/test_test_bitcoin-main_tests.$(OBJEXT) \
	test/test_test_bitcoin-mempool_tests.$(OBJEXT) \
	test/test_test_bitcoin-miner_tests.$(OBJEXT) \
	test/test_test_bitcoin-mruset_tests.$(OBJEXT) \
	test/test_test_bitcoin-multisig_tests.$(OBJEXT) \
	test/test_test_bitcoin-netbase_tests.$(OBJEXT) \
	test/test_test_bitcoin-pmt_tests.$(OBJEXT) \
	test/test_test_bitcoin-policyestimator_tests.$(OBJEXT) \
	test/test_test_bitcoin-pow_tests.$(OBJEXT) \
	test/test_test_bitcoin-raii_event_tests.$(OBJEXT) \
	test/test_test_bitcoin-reverselock_tests.$(OBJEXT) \
	test/test_test_bitcoin-rpc_tests.$(OBJEXT) \
	test/test_test_bitcoin-sanity_tests.$(OBJEXT) \
	test/test_test_bitcoin-scheduler_tests.$(OBJEXT) \
	test/test_test_bitcoin-script_P2SH_tests.$(OBJEXT) \
	test/test_test_bitcoin-script_tests.$(OBJEXT) \
	test/test_test_bitcoin-scriptnum_tests.$(OBJEXT) \
	test/test_test_bitcoin-serialize_tests.$(OBJEXT) \
	test/test_test_bitcoin-sighash_tests.$(OBJEXT) \
	test/test_test_bitcoin-sigopcount_tests.$(OBJEXT) \
	test/test_test_bitcoin-skiplist_tests.$(OBJEXT) \
	test/test_test_bitcoin-test_bitcoin.$(OBJEXT) \
	test/test_test_bitcoin-timedata_tests.$(OBJEXT) \
	test/test_test_bitcoin-torcontrol_tests.$(OBJEXT) \
	test/test_test_bitcoin-transaction_tests.$(OBJEXT) \
	test/test_test_bitcoin-uint256_tests.$(OBJEXT) \
	test/test_test_bitcoin-univalue_tests.$(OBJEXT) \
	test/test_test_bitcoin-util_tests.$(OBJEXT) \
	test/test_test_bitcoin-sha256compress_tests.$(OBJEXT) \
	$(am__objects_10)
am_test_test_bitcoin_OBJECTS = $(am__objects_11) \
	$(am__objects_1) $(am__objects_1)
am__objects_12 = $(am__objects_1) $(am__objects_1)
nodist_test_test_bitcoin_OBJECTS =  \
	$(am__objects_12)
test_test_bitcoin_OBJECTS = $(am_test_test_bitcoin_OBJECTS) \
	$(nodist_test_test_bitcoin_OBJECTS)
am__DEPENDENCIES_9 =  \
	$(am__DEPENDENCIES_1)
#am__DEPENDENCIES_10 =  \
#	$(am__DEPENDENCIES_1)
test_test_bitcoin_DEPENDENCIES =  \
	$(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) \
	$(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) \
	$(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(LIBSECP256K1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__append_25) \
	$(am__DEPENDENCIES_5) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(LIBMRCCASH) $(LIBSNARK) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_9) \
	$(am__DEPENDENCIES_10)
test_test_bitcoin_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX \
	$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link $(CXXLD) \
	$(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) \
	$(test_test_bitcoin_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)/src/config
depcomp = $(SHELL) $(top_srcdir)/build-aux/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = $(crypto_libbitcoin_crypto_a_SOURCES) \
	$(libbitcoin_cli_a_SOURCES) $(libbitcoin_common_a_SOURCES) \
	$(libbitcoin_proton_a_SOURCES) $(libbitcoin_server_a_SOURCES) \
	$(libbitcoin_util_a_SOURCES) \
	$(nodist_libbitcoin_util_a_SOURCES) \
	$(libbitcoin_wallet_a_SOURCES) $(libbitcoin_zmq_a_SOURCES) \
	$(libmoonroomcash_a_SOURCES) \
	$(libmoonroomcashconsensus_la_SOURCES) \
	$(moonroomcash_cli_SOURCES) $(moonroomcash_gtest_SOURCES) \
	$(moonroomcash_tx_SOURCES) \
	$(moonroomcash_CreateJoinSplit_SOURCES) \
	$(moonroomcash_GenerateParams_SOURCES) \
	$(moonroomcashd_SOURCES) $(test_test_bitcoin_SOURCES) \
	$(nodist_test_test_bitcoin_SOURCES)
DIST_SOURCES = $(am__crypto_libbitcoin_crypto_a_SOURCES_DIST) \
	$(libbitcoin_cli_a_SOURCES) $(libbitcoin_common_a_SOURCES) \
	$(am__libbitcoin_proton_a_SOURCES_DIST) \
	$(libbitcoin_server_a_SOURCES) \
	$(am__libbitcoin_util_a_SOURCES_DIST) \
	$(libbitcoin_wallet_a_SOURCES) \
	$(am__libbitcoin_zmq_a_SOURCES_DIST) \
	$(libmoonroomcash_a_SOURCES) \
	$(am__libmoonroomcashconsensus_la_SOURCES_DIST) \
	$(am__moonroomcash_cli_SOURCES_DIST) \
	$(am__moonroomcash_gtest_SOURCES_DIST) \
	$(am__moonroomcash_tx_SOURCES_DIST) \
	$(moonroomcash_CreateJoinSplit_SOURCES) \
	$(moonroomcash_GenerateParams_SOURCES) \
	$(am__moonroomcashd_SOURCES_DIST) \
	$(am__test_test_bitcoin_SOURCES_DIST)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__include_HEADERS_DIST = script/moonroomcashconsensus.h
HEADERS = $(include_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	check recheck distdir
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS =  .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/build-aux/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/build-aux/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.gtest.include \
	$(srcdir)/Makefile.in $(srcdir)/Makefile.moonroomcash.include \
	$(srcdir)/Makefile.test.include \
	$(top_srcdir)/build-aux/depcomp \
	$(top_srcdir)/build-aux/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} /root/ws/moonroomcash/build-aux/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
ARFLAGS = cr
AUTOCONF = ${SHELL} /root/ws/moonroomcash/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /root/ws/moonroomcash/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /root/ws/moonroomcash/build-aux/missing automake-1.15
AWK = gawk
BDB_CPPFLAGS = 
BDB_LIBS = -ldb_cxx-6.2
BITCOIN_CLI_NAME = moonroomcash-cli
BITCOIN_DAEMON_NAME = moonroomcashd
BITCOIN_TX_NAME = moonroomcash-tx
BOOST_CHRONO_LIB = -lboost_chrono-mt
BOOST_CPPFLAGS = -pthread -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../include
BOOST_FILESYSTEM_LIB = -lboost_filesystem-mt
BOOST_LDFLAGS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../lib
BOOST_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../lib -lboost_system-mt -lboost_filesystem-mt -lboost_program_options-mt -lboost_thread-mt -lboost_chrono-mt
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options-mt
BOOST_SYSTEM_LIB = -lboost_system-mt
BOOST_THREAD_LIB = -lboost_thread-mt
BOOST_UNIT_TEST_FRAMEWORK_LIB = -lboost_unit_test_framework-mt
BREW = 
CC = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../native/bin/ccache gcc -m64
CCACHE = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../native/bin/ccache
CCDEPMODE = depmode=gcc3
CFLAGS = -pipe -O1 
CLIENT_VERSION_BUILD = 50
CLIENT_VERSION_IS_RELEASE = true
CLIENT_VERSION_MAJOR = 1
CLIENT_VERSION_MINOR = 1
CLIENT_VERSION_REVISION = 0
COPYRIGHT_YEAR = 2018
CPP = gcc -m64 -E
CPPFILT = /usr/bin/c++filt
CPPFLAGS = -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../include/  -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS
CRYPTO_CFLAGS = -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/include
CRYPTO_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/lib -lcrypto -ldl
CXX = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../native/bin/ccache g++ -m64 -std=c++11
CXXCPP = g++ -m64 -std=c++11 -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -pipe -O1 -g -fopenmp -fwrapv -fno-strict-aliasing -Wno-builtin-declaration-mismatch
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
ERROR_CXXFLAGS =  -Werror
EVENT_CFLAGS = -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/include
EVENT_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/lib -levent
EVENT_PTHREADS_CFLAGS = -pthread -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/include
EVENT_PTHREADS_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/lib -levent_pthreads -levent
EXEEXT = 
FGREP = /bin/grep -F
GCOV = /usr/bin/gcov
GENHTML = 
GENISOIMAGE = 
GIT = /usr/bin/git
GMPXX_LIBS = -lgmpxx
GMP_LIBS = -lgmp
GREP = /bin/grep
HARDENED_CPPFLAGS =  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2
HARDENED_CXXFLAGS =  -Wformat -Wformat-security -Wstack-protector -fstack-protector-all
HARDENED_LDFLAGS =  -Wl,-z,relro -Wl,-z,now -pie
HAVE_CXX11 = 1
HEXDUMP = /usr/bin/hexdump
INSTALL = /usr/bin/install -c
INSTALLNAMETOOL = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LCOV = 
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../lib 
LEVELDB_CPPFLAGS =  $(am__append_1)
LEVELDB_TARGET_FLAGS = 
LIBLEVELDB =  $(am__append_2)
LIBMEMENV =  $(am__append_3)
LIBMRCCASH_LIBS = -lgmp -lgmpxx -lboost_system-mt -lcrypto -lsodium -lrustzcash
LIBOBJS = 
LIBS = -lanl 
LIBSNARK_DEPINST = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/..
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_APP_LDFLAGS = 
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAINT = 
MAKEINFO = ${SHELL} /root/ws/moonroomcash/build-aux/missing makeinfo
MAKENSIS = 
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = nm
NMEDIT = 
OBJCXX = g++ -m64
OBJCXXDEPMODE = depmode=gcc3
OBJCXXFLAGS = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = moonroomcash
PACKAGE_BUGREPORT = https://github.com/moonroomcash/moonroomcash/issues
PACKAGE_NAME = Moonroomcash
PACKAGE_STRING = Moonroomcash 1.1.0
PACKAGE_TARNAME = moonroomcash
PACKAGE_URL = 
PACKAGE_VERSION = 1.1.0
PATH_SEPARATOR = :
PIC_FLAGS = -fPIC
PIE_FLAGS = -fPIE
PKG_CONFIG = /usr/bin/pkg-config --static
PKG_CONFIG_LIBDIR = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../lib/pkgconfig
PKG_CONFIG_PATH = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/share/../share/pkgconfig
PORT = 
PROTON_LIBS = 
PTHREAD_CC = gcc -m64
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
READELF = /usr/bin/readelf
RELDFLAGS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SSL_CFLAGS = -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/include
SSL_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/lib -lssl -ldl -lcrypto -ldl
STRIP = /usr/bin/strip
TESTDEFS = 
VERSION = 1.1.0
WINDOWS_BITS = 
WINDRES = 
XGETTEXT = 
ZMQ_CFLAGS = -I/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/include
ZMQ_LIBS = -L/root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu/lib -lzmq -lstdc++
abs_builddir = /root/ws/moonroomcash/src
abs_srcdir = /root/ws/moonroomcash/src
abs_top_builddir = /root/ws/moonroomcash
abs_top_srcdir = /root/ws/moonroomcash
ac_ct_AR = 
ac_ct_CC = 
ac_ct_CXX = 
ac_ct_DUMPBIN = 
ac_ct_OBJCXX = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = x86_64-unknown-linux-gnu
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = x86_64-unknown-linux-gnu
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /root/ws/moonroomcash/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /root/ws/moonroomcash/depends/x86_64-unknown-linux-gnu
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
subdirs =  src/secp256k1 src/snark src/univalue
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
DIST_SUBDIRS = secp256k1 univalue
AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)
AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)
AM_CPPFLAGS = $(HARDENED_CPPFLAGS)
BITCOIN_CONFIG_INCLUDES = -I$(builddir)/config
BITCOIN_INCLUDES = -I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) \
	$(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS) \
	-I$(srcdir)/secp256k1/include -I$(srcdir)/snark \
	-I$(srcdir)/snark/libsnark -I$(srcdir)/univalue/include \
	$(am__append_5)
LIBBITCOIN_SERVER = libbitcoin_server.a
LIBBITCOIN_WALLET = libbitcoin_wallet.a
LIBBITCOIN_COMMON = libbitcoin_common.a
LIBBITCOIN_CLI = libbitcoin_cli.a
LIBBITCOIN_UTIL = libbitcoin_util.a
LIBBITCOIN_CRYPTO = crypto/libbitcoin_crypto.a
LIBSECP256K1 = secp256k1/libsecp256k1.la
LIBSNARK = snark/libsnark.a
LIBUNIVALUE = univalue/libunivalue.la
LIBMRCCASH = libmoonroomcash.a
LIBSNARK_CXXFLAGS = -fPIC -DBINARY_OUTPUT -DNO_PT_COMPRESSION=1 -fstack-protector-all
LIBSNARK_CONFIG_FLAGS = CURVE=ALT_BN128 NO_PROCPS=1 NO_DOCS=1 STATIC=1 \
	NO_SUPERCOP=1 FEATUREFLAGS=-DMONTGOMERY_OUTPUT \
	NO_COPY_DEPINST=1 NO_COMPILE_LIBGTEST=1 $(am__append_4)

# Make is not made aware of per-object dependencies to avoid limiting building parallelization
# But to build the less dependent modules first, we manually select their order here:
EXTRA_LIBRARIES = crypto/libbitcoin_crypto.a libbitcoin_util.a \
	libbitcoin_common.a libbitcoin_server.a libbitcoin_cli.a \
	libmoonroomcash.a $(am__append_6) $(am__append_7) \
	$(am__append_8)
lib_LTLIBRARIES = libmoonroomcashconsensus.la
#LIBMRCCASH_CONSENSUS = 
LIBMRCCASH_CONSENSUS = libmoonroomcashconsensus.la
LIBMRCCASH_H = \
  moonroomcash/IncrementalMerkleTree.hpp \
  moonroomcash/NoteEncryption.hpp \
  moonroomcash/Address.hpp \
  moonroomcash/JoinSplit.hpp \
  moonroomcash/Note.hpp \
  moonroomcash/prf.h \
  moonroomcash/Proof.hpp \
  moonroomcash/util.h \
  moonroomcash/Moonroomcash.h

# bitcoin core #
BITCOIN_CORE_H = \
  addrman.h \
  alert.h \
  amount.h \
  amqp/amqpabstractnotifier.h \
  amqp/amqpconfig.h \
  amqp/amqpnotificationinterface.h \
  amqp/amqppublishnotifier.h \
  amqp/amqpsender.h \
  arith_uint256.h \
  asyncrpcoperation.h \
  asyncrpcqueue.h \
  base58.h \
  bloom.h \
  chain.h \
  chainparams.h \
  chainparamsbase.h \
  chainparamsseeds.h \
  checkpoints.h \
  checkqueue.h \
  clientversion.h \
  coincontrol.h \
  coins.h \
  compat.h \
  compat/byteswap.h \
  compat/endian.h \
  compat/sanity.h \
  compressor.h \
  consensus/consensus.h \
  consensus/params.h \
  consensus/validation.h \
  core_io.h \
  core_memusage.h \
  deprecation.h \
  hash.h \
  httprpc.h \
  httpserver.h \
  init.h \
  key.h \
  keystore.h \
  leveldbwrapper.h \
  limitedmap.h \
  main.h \
  memusage.h \
  merkleblock.h \
  metrics.h \
  miner.h \
  mruset.h \
  net.h \
  netbase.h \
  noui.h \
  paymentdisclosure.h \
  paymentdisclosuredb.h \
  policy/fees.h \
  pow.h \
  primitives/block.h \
  primitives/transaction.h \
  protocol.h \
  pubkey.h \
  random.h \
  reverselock.h \
  rpcclient.h \
  rpcprotocol.h \
  rpcserver.h \
  scheduler.h \
  script/interpreter.h \
  script/script.h \
  script/script_error.h \
  script/sigcache.h \
  script/sign.h \
  script/standard.h \
  serialize.h \
  streams.h \
  support/allocators/secure.h \
  support/allocators/zeroafterfree.h \
  support/cleanse.h \
  support/events.h \
  support/pagelocker.h \
  sync.h \
  threadsafety.h \
  timedata.h \
  tinyformat.h \
  torcontrol.h \
  txdb.h \
  txmempool.h \
  ui_interface.h \
  uint256.h \
  uint252.h \
  undo.h \
  util.h \
  utilmoneystr.h \
  utilstrencodings.h \
  utiltime.h \
  validationinterface.h \
  version.h \
  wallet/asyncrpcoperation_sendmany.h \
  wallet/asyncrpcoperation_shieldcoinbase.h \
  wallet/crypter.h \
  wallet/db.h \
  wallet/wallet.h \
  wallet/wallet_ismine.h \
  wallet/walletdb.h \
  zmq/zmqabstractnotifier.h \
  zmq/zmqconfig.h\
  zmq/zmqnotificationinterface.h \
  zmq/zmqpublishnotifier.h


# server: moonroomcashd
libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)
libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_server_a_SOURCES = \
  sendalert.cpp \
  addrman.cpp \
  alert.cpp \
  alertkeys.h \
  asyncrpcoperation.cpp \
  asyncrpcqueue.cpp \
  bloom.cpp \
  chain.cpp \
  checkpoints.cpp \
  deprecation.cpp \
  httprpc.cpp \
  httpserver.cpp \
  init.cpp \
  leveldbwrapper.cpp \
  main.cpp \
  merkleblock.cpp \
  metrics.cpp \
  miner.cpp \
  net.cpp \
  noui.cpp \
  paymentdisclosure.cpp \
  paymentdisclosuredb.cpp \
  policy/fees.cpp \
  pow.cpp \
  rest.cpp \
  rpcblockchain.cpp \
  rpcmining.cpp \
  rpcmisc.cpp \
  rpcnet.cpp \
  rpcrawtransaction.cpp \
  rpcserver.cpp \
  script/sigcache.cpp \
  timedata.cpp \
  torcontrol.cpp \
  txdb.cpp \
  txmempool.cpp \
  validationinterface.cpp \
  $(BITCOIN_CORE_H) \
  $(LIBMRCCASH_H)

LIBBITCOIN_ZMQ = libbitcoin_zmq.a
libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)
libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_zmq_a_SOURCES = \
  zmq/zmqabstractnotifier.cpp \
  zmq/zmqnotificationinterface.cpp \
  zmq/zmqpublishnotifier.cpp

#LIBBITCOIN_PROTON = libbitcoin_proton.a
#libbitcoin_proton_a_CPPFLAGS = $(BITCOIN_INCLUDES)
#libbitcoin_proton_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
#libbitcoin_proton_a_SOURCES = \
#  amqp/amqpabstractnotifier.cpp \
#  amqp/amqpnotificationinterface.cpp \
#  amqp/amqppublishnotifier.cpp


# wallet: moonroomcashd, but only linked when wallet enabled
libbitcoin_wallet_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_wallet_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_wallet_a_SOURCES = \
  utiltest.cpp \
  utiltest.h \
  zcbenchmarks.cpp \
  zcbenchmarks.h \
  wallet/asyncrpcoperation_sendmany.cpp \
  wallet/asyncrpcoperation_shieldcoinbase.cpp \
  wallet/crypter.cpp \
  wallet/db.cpp \
  paymentdisclosure.cpp \
  paymentdisclosuredb.cpp \
  wallet/rpcdisclosure.cpp \
  wallet/rpcdump.cpp \
  wallet/rpcwallet.cpp \
  wallet/wallet.cpp \
  wallet/wallet_ismine.cpp \
  wallet/walletdb.cpp \
  $(BITCOIN_CORE_H) \
  $(LIBMRCCASH_H)


# crypto primitives library
crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) \
	$(BITCOIN_CONFIG_INCLUDES) $(am__append_11)
crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
crypto_libbitcoin_crypto_a_SOURCES = crypto/common.h \
	crypto/equihash.cpp crypto/equihash.h crypto/equihash.tcc \
	crypto/hmac_sha256.cpp crypto/hmac_sha256.h \
	crypto/hmac_sha512.cpp crypto/hmac_sha512.h \
	crypto/ripemd160.cpp crypto/ripemd160.h crypto/sha1.cpp \
	crypto/sha1.h crypto/sha256.cpp crypto/sha256.h \
	crypto/sha512.cpp crypto/sha512.h $(am__append_12)
EQUIHASH_TROMP_SOURCES = \
  pow/tromp/equi_miner.h \
  pow/tromp/equi.h \
  pow/tromp/osx_barrier.h


# common: shared between moonroomcashd and non-server tools
libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_common_a_SOURCES = \
  amount.cpp \
  arith_uint256.cpp \
  base58.cpp \
  chainparams.cpp \
  coins.cpp \
  compressor.cpp \
  core_read.cpp \
  core_write.cpp \
  hash.cpp \
  key.cpp \
  keystore.cpp \
  netbase.cpp \
  primitives/block.cpp \
  primitives/transaction.cpp \
  protocol.cpp \
  pubkey.cpp \
  scheduler.cpp \
  script/interpreter.cpp \
  script/script.cpp \
  script/script_error.cpp \
  script/sign.cpp \
  script/standard.cpp \
  $(BITCOIN_CORE_H) \
  $(LIBMRCCASH_H)


# util: shared between all executables.
# This library *must* be included to make sure that the glibc
# backward-compatibility objects and their sanity checks are linked.
libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_util_a_SOURCES = support/pagelocker.cpp chainparamsbase.cpp \
	clientversion.cpp compat/glibc_sanity.cpp \
	compat/glibcxx_sanity.cpp compat/strnlen.cpp random.cpp \
	rpcprotocol.cpp support/cleanse.cpp sync.cpp uint256.cpp \
	util.cpp utilmoneystr.cpp utilstrencodings.cpp utiltime.cpp \
	$(BITCOIN_CORE_H) $(LIBMRCCASH_H) $(am__append_13)

# cli: moonroomcash-cli
libbitcoin_cli_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
libbitcoin_cli_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
libbitcoin_cli_a_SOURCES = \
  rpcclient.cpp \
  $(BITCOIN_CORE_H) \
  $(LIBMRCCASH_H)

nodist_libbitcoin_util_a_SOURCES = $(srcdir)/obj/build.h
#

# bitcoind binary #
moonroomcashd_SOURCES = bitcoind.cpp $(am__append_14)
moonroomcashd_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
moonroomcashd_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcashd_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)
moonroomcashd_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_COMMON) \
	$(LIBUNIVALUE) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) \
	$(LIBMRCCASH) $(LIBSNARK) $(LIBLEVELDB) $(LIBMEMENV) \
	$(LIBSECP256K1) $(am__append_15) $(am__append_16) \
	$(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) \
	$(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(LIBBITCOIN_CRYPTO) \
	$(LIBMRCCASH_LIBS) $(am__append_17)

# bitcoin-cli binary #
moonroomcash_cli_SOURCES = bitcoin-cli.cpp $(am__append_18)
moonroomcash_cli_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CFLAGS)
moonroomcash_cli_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcash_cli_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)
moonroomcash_cli_LDADD = \
  $(LIBBITCOIN_CLI) \
  $(LIBUNIVALUE) \
  $(LIBBITCOIN_UTIL) \
  $(BOOST_LIBS) \
  $(SSL_LIBS) \
  $(CRYPTO_LIBS) \
  $(EVENT_LIBS) \
  $(LIBMRCCASH) \
  $(LIBSNARK) \
  $(LIBBITCOIN_CRYPTO) \
  $(LIBMRCCASH_LIBS)

#

# moonroomcash-tx binary #
moonroomcash_tx_SOURCES = bitcoin-tx.cpp $(am__append_19)
moonroomcash_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
moonroomcash_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcash_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)

# FIXME: Is libmoonroomcash needed for moonroomcash_tx?
moonroomcash_tx_LDADD = $(LIBUNIVALUE) $(LIBBITCOIN_COMMON) \
	$(LIBBITCOIN_UTIL) $(LIBSECP256K1) $(LIBMRCCASH) $(LIBSNARK) \
	$(LIBBITCOIN_CRYPTO) $(LIBMRCCASH_LIBS) $(BOOST_LIBS) \
	$(CRYPTO_LIBS)
#

# moonroomcash protocol primitives #
libmoonroomcash_a_SOURCES = \
  moonroomcash/IncrementalMerkleTree.cpp \
  moonroomcash/NoteEncryption.cpp \
  moonroomcash/Address.cpp \
  moonroomcash/JoinSplit.cpp \
  moonroomcash/Proof.cpp \
  moonroomcash/Note.cpp \
  moonroomcash/prf.cpp \
  moonroomcash/util.cpp \
  moonroomcash/circuit/commitment.tcc \
  moonroomcash/circuit/gadget.tcc \
  moonroomcash/circuit/merkle.tcc \
  moonroomcash/circuit/note.tcc \
  moonroomcash/circuit/prfs.tcc \
  moonroomcash/circuit/utils.tcc

libmoonroomcash_a_CPPFLAGS = -DMULTICORE -fopenmp -fPIC \
	-DBINARY_OUTPUT -DCURVE_ALT_BN128 -DBOOST_SPIRIT_THREADSAFE \
	-DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS $(HARDENED_CPPFLAGS) \
	-pipe -O1 -g -Wstack-protector -fstack-protector-all -fPIE \
	-fvisibility=hidden -DSTATIC $(BITCOIN_INCLUDES) \
	-DMONTGOMERY_OUTPUT
libmoonroomcash_a_CXXFLAGS = $(HARDENED_CXXFLAGS) -fwrapv -fno-strict-aliasing
libmoonroomcash_a_LDFLAGS = $(HARDENED_LDFLAGS)

# moonroomcashconsensus library #
include_HEADERS = script/moonroomcashconsensus.h
libmoonroomcashconsensus_la_SOURCES =  \
	crypto/equihash.cpp \
	crypto/hmac_sha512.cpp \
	crypto/ripemd160.cpp crypto/sha1.cpp \
	crypto/sha256.cpp crypto/sha512.cpp \
	hash.cpp primitives/transaction.cpp \
	pubkey.cpp \
	script/moonroomcashconsensus.cpp \
	script/interpreter.cpp \
	script/script.cpp uint256.cpp \
	utilstrencodings.cpp $(am__append_20)
libmoonroomcashconsensus_la_LDFLAGS = $(AM_LDFLAGS) -no-undefined $(RELDFLAGS)
libmoonroomcashconsensus_la_LIBADD = $(LIBSECP256K1)
libmoonroomcashconsensus_la_CPPFLAGS = $(AM_CPPFLAGS) -I$(builddir)/obj -I$(srcdir)/secp256k1/include -DBUILD_BITCOIN_INTERNAL
libmoonroomcashconsensus_la_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

#
CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno \
	*/*.gcno wallet/*/*.gcno $(am__append_28)
DISTCLEANFILES = obj/build.h
EXTRA_DIST = leveldb snark $(am__append_23)
TEST_SRCDIR = test
TEST_BINARY = test/test_bitcoin$(EXEEXT)
JSON_TEST_FILES = \
  test/data/script_valid.json \
  test/data/base58_keys_valid.json \
  test/data/base58_encode_decode.json \
  test/data/base58_keys_invalid.json \
  test/data/script_invalid.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json \
  test/data/sighash.json \
  test/data/merkle_roots.json \
  test/data/merkle_roots_empty.json \
  test/data/merkle_serialization.json \
  test/data/merkle_witness_serialization.json \
  test/data/merkle_path.json \
  test/data/merkle_commitments.json \
  test/data/g1_compressed.json \
  test/data/g2_compressed.json

RAW_TEST_FILES = test/data/alertTests.raw
GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)
BITCOIN_TESTS = test/arith_uint256_tests.cpp \
	test/bignum.h test/addrman_tests.cpp \
	test/alert_tests.cpp \
	test/allocator_tests.cpp \
	test/base32_tests.cpp test/base58_tests.cpp \
	test/base64_tests.cpp test/bip32_tests.cpp \
	test/bloom_tests.cpp \
	test/checkblock_tests.cpp \
	test/Checkpoints_tests.cpp \
	test/coins_tests.cpp \
	test/compress_tests.cpp \
	test/crypto_tests.cpp test/DoS_tests.cpp \
	test/equihash_tests.cpp \
	test/getarg_tests.cpp test/hash_tests.cpp \
	test/key_tests.cpp test/main_tests.cpp \
	test/mempool_tests.cpp test/miner_tests.cpp \
	test/mruset_tests.cpp \
	test/multisig_tests.cpp \
	test/netbase_tests.cpp test/pmt_tests.cpp \
	test/policyestimator_tests.cpp \
	test/pow_tests.cpp \
	test/raii_event_tests.cpp \
	test/reverselock_tests.cpp \
	test/rpc_tests.cpp test/sanity_tests.cpp \
	test/scheduler_tests.cpp \
	test/script_P2SH_tests.cpp \
	test/script_tests.cpp \
	test/scriptnum_tests.cpp \
	test/serialize_tests.cpp \
	test/sighash_tests.cpp \
	test/sigopcount_tests.cpp \
	test/skiplist_tests.cpp \
	test/test_bitcoin.cpp test/test_bitcoin.h \
	test/timedata_tests.cpp \
	test/torcontrol_tests.cpp \
	test/transaction_tests.cpp \
	test/uint256_tests.cpp \
	test/univalue_tests.cpp test/util_tests.cpp \
	test/sha256compress_tests.cpp \
	$(am__append_24)
test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) -fopenmp $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS) $(EVENT_CFLAGS)
test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) \
	$(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) \
	$(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) \
	$(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \
	$(BOOST_LIBS) \
	$(BOOST_UNIT_TEST_FRAMEWORK_LIB) \
	$(LIBSECP256K1) $(EVENT_PTHREADS_LIBS) \
	$(EVENT_LIBS) $(am__append_25) \
	$(LIBMRCCASH_CONSENSUS) $(BDB_LIBS) \
	$(SSL_LIBS) $(CRYPTO_LIBS) $(LIBMRCCASH) \
	$(LIBSNARK) $(LIBMRCCASH_LIBS) \
	$(am__append_26) $(am__append_27)
test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static
nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)
CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

# tool for generating our public parameters.
# test_checktransaction.cpp MUST be before
# any test that calls SelectParams().
moonroomcash_gtest_SOURCES = gtest/main.cpp \
	gtest/utils.cpp \
	gtest/test_checktransaction.cpp \
	gtest/json_test_vectors.cpp \
	gtest/json_test_vectors.h \
	gtest/test_foundersreward.cpp \
	$(am__append_29) gtest/test_tautology.cpp \
	gtest/test_deprecation.cpp \
	gtest/test_equihash.cpp \
	gtest/test_httprpc.cpp \
	gtest/test_joinsplit.cpp \
	gtest/test_keystore.cpp \
	gtest/test_noteencryption.cpp \
	gtest/test_mempool.cpp \
	gtest/test_merkletree.cpp \
	gtest/test_metrics.cpp gtest/test_miner.cpp \
	gtest/test_pow.cpp gtest/test_random.cpp \
	gtest/test_rpc.cpp \
	gtest/test_transaction.cpp \
	gtest/test_validation.cpp \
	gtest/test_circuit.cpp gtest/test_txid.cpp \
	gtest/test_libmoonroomcash_utils.cpp \
	gtest/test_proofs.cpp \
	gtest/test_paymentdisclosure.cpp \
	gtest/test_checkblock.cpp $(am__append_30)
moonroomcash_gtest_CPPFLAGS = $(AM_CPPFLAGS) -DMULTICORE -fopenmp -DBINARY_OUTPUT -DCURVE_ALT_BN128 -DSTATIC $(BITCOIN_INCLUDES)
moonroomcash_gtest_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcash_gtest_LDADD = -lgtest -lgmock \
	$(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) \
	$(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) \
	$(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) \
	$(LIBLEVELDB) $(LIBMEMENV) $(BOOST_LIBS) \
	$(BOOST_UNIT_TEST_FRAMEWORK_LIB) \
	$(LIBSECP256K1) $(am__append_31) \
	$(am__append_32) $(LIBMRCCASH_CONSENSUS) \
	$(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) \
	$(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) \
	$(LIBMRCCASH) $(LIBSNARK) \
	$(LIBMRCCASH_LIBS) $(am__append_33)
moonroomcash_gtest_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static

# tool for generating our public parameters
moonroomcash_GenerateParams_SOURCES = moonroomcash/GenerateParams.cpp
moonroomcash_GenerateParams_CPPFLAGS = $(AM_CPPFLAGS)
moonroomcash_GenerateParams_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcash_GenerateParams_LDADD = \
  $(BOOST_LIBS) \
  $(LIBMRCCASH) \
  $(LIBSNARK) \
  $(LIBBITCOIN_UTIL) \
  $(LIBBITCOIN_CRYPTO) \
  $(LIBMRCCASH_LIBS)


# tool for profiling the creation of joinsplits
moonroomcash_CreateJoinSplit_SOURCES = moonroomcash/CreateJoinSplit.cpp
moonroomcash_CreateJoinSplit_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
moonroomcash_CreateJoinSplit_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
moonroomcash_CreateJoinSplit_LDADD = \
  $(LIBBITCOIN_COMMON) \
  $(LIBMRCCASH) \
  $(LIBSNARK) \
  $(LIBBITCOIN_UTIL) \
  $(LIBBITCOIN_CRYPTO) \
  $(BOOST_LIBS) \
  $(LIBMRCCASH_LIBS)

all: all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .log .mm .o .obj .rc .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/Makefile.test.include $(srcdir)/Makefile.gtest.include $(srcdir)/Makefile.moonroomcash.include $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(srcdir)/Makefile.test.include $(srcdir)/Makefile.gtest.include $(srcdir)/Makefile.moonroomcash.include $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
crypto/$(am__dirstamp):
	@$(MKDIR_P) crypto
	@: > crypto/$(am__dirstamp)
crypto/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) crypto/$(DEPDIR)
	@: > crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-equihash.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-hmac_sha256.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-hmac_sha512.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-ripemd160.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-sha1.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-sha256.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/crypto_libbitcoin_crypto_a-sha512.$(OBJEXT):  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)

crypto/libbitcoin_crypto.a: $(crypto_libbitcoin_crypto_a_OBJECTS) $(crypto_libbitcoin_crypto_a_DEPENDENCIES) $(EXTRA_crypto_libbitcoin_crypto_a_DEPENDENCIES) crypto/$(am__dirstamp)
	$(AM_V_at)-rm -f crypto/libbitcoin_crypto.a
	$(AM_V_AR)$(crypto_libbitcoin_crypto_a_AR) crypto/libbitcoin_crypto.a $(crypto_libbitcoin_crypto_a_OBJECTS) $(crypto_libbitcoin_crypto_a_LIBADD)
	$(AM_V_at)$(RANLIB) crypto/libbitcoin_crypto.a

libbitcoin_cli.a: $(libbitcoin_cli_a_OBJECTS) $(libbitcoin_cli_a_DEPENDENCIES) $(EXTRA_libbitcoin_cli_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_cli.a
	$(AM_V_AR)$(libbitcoin_cli_a_AR) libbitcoin_cli.a $(libbitcoin_cli_a_OBJECTS) $(libbitcoin_cli_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_cli.a
primitives/$(am__dirstamp):
	@$(MKDIR_P) primitives
	@: > primitives/$(am__dirstamp)
primitives/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) primitives/$(DEPDIR)
	@: > primitives/$(DEPDIR)/$(am__dirstamp)
primitives/libbitcoin_common_a-block.$(OBJEXT):  \
	primitives/$(am__dirstamp) \
	primitives/$(DEPDIR)/$(am__dirstamp)
primitives/libbitcoin_common_a-transaction.$(OBJEXT):  \
	primitives/$(am__dirstamp) \
	primitives/$(DEPDIR)/$(am__dirstamp)
script/$(am__dirstamp):
	@$(MKDIR_P) script
	@: > script/$(am__dirstamp)
script/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) script/$(DEPDIR)
	@: > script/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_common_a-interpreter.$(OBJEXT):  \
	script/$(am__dirstamp) script/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_common_a-script.$(OBJEXT): script/$(am__dirstamp) \
	script/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_common_a-script_error.$(OBJEXT):  \
	script/$(am__dirstamp) script/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_common_a-sign.$(OBJEXT): script/$(am__dirstamp) \
	script/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_common_a-standard.$(OBJEXT): script/$(am__dirstamp) \
	script/$(DEPDIR)/$(am__dirstamp)

libbitcoin_common.a: $(libbitcoin_common_a_OBJECTS) $(libbitcoin_common_a_DEPENDENCIES) $(EXTRA_libbitcoin_common_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_common.a
	$(AM_V_AR)$(libbitcoin_common_a_AR) libbitcoin_common.a $(libbitcoin_common_a_OBJECTS) $(libbitcoin_common_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_common.a
amqp/$(am__dirstamp):
	@$(MKDIR_P) amqp
	@: > amqp/$(am__dirstamp)
amqp/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) amqp/$(DEPDIR)
	@: > amqp/$(DEPDIR)/$(am__dirstamp)
amqp/libbitcoin_proton_a-amqpabstractnotifier.$(OBJEXT):  \
	amqp/$(am__dirstamp) amqp/$(DEPDIR)/$(am__dirstamp)
amqp/libbitcoin_proton_a-amqpnotificationinterface.$(OBJEXT):  \
	amqp/$(am__dirstamp) amqp/$(DEPDIR)/$(am__dirstamp)
amqp/libbitcoin_proton_a-amqppublishnotifier.$(OBJEXT):  \
	amqp/$(am__dirstamp) amqp/$(DEPDIR)/$(am__dirstamp)

libbitcoin_proton.a: $(libbitcoin_proton_a_OBJECTS) $(libbitcoin_proton_a_DEPENDENCIES) $(EXTRA_libbitcoin_proton_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_proton.a
	$(AM_V_AR)$(libbitcoin_proton_a_AR) libbitcoin_proton.a $(libbitcoin_proton_a_OBJECTS) $(libbitcoin_proton_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_proton.a
policy/$(am__dirstamp):
	@$(MKDIR_P) policy
	@: > policy/$(am__dirstamp)
policy/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) policy/$(DEPDIR)
	@: > policy/$(DEPDIR)/$(am__dirstamp)
policy/libbitcoin_server_a-fees.$(OBJEXT): policy/$(am__dirstamp) \
	policy/$(DEPDIR)/$(am__dirstamp)
script/libbitcoin_server_a-sigcache.$(OBJEXT): script/$(am__dirstamp) \
	script/$(DEPDIR)/$(am__dirstamp)

libbitcoin_server.a: $(libbitcoin_server_a_OBJECTS) $(libbitcoin_server_a_DEPENDENCIES) $(EXTRA_libbitcoin_server_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_server.a
	$(AM_V_AR)$(libbitcoin_server_a_AR) libbitcoin_server.a $(libbitcoin_server_a_OBJECTS) $(libbitcoin_server_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_server.a
support/$(am__dirstamp):
	@$(MKDIR_P) support
	@: > support/$(am__dirstamp)
support/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) support/$(DEPDIR)
	@: > support/$(DEPDIR)/$(am__dirstamp)
support/libbitcoin_util_a-pagelocker.$(OBJEXT):  \
	support/$(am__dirstamp) support/$(DEPDIR)/$(am__dirstamp)
compat/$(am__dirstamp):
	@$(MKDIR_P) compat
	@: > compat/$(am__dirstamp)
compat/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) compat/$(DEPDIR)
	@: > compat/$(DEPDIR)/$(am__dirstamp)
compat/libbitcoin_util_a-glibc_sanity.$(OBJEXT):  \
	compat/$(am__dirstamp) compat/$(DEPDIR)/$(am__dirstamp)
compat/libbitcoin_util_a-glibcxx_sanity.$(OBJEXT):  \
	compat/$(am__dirstamp) compat/$(DEPDIR)/$(am__dirstamp)
compat/libbitcoin_util_a-strnlen.$(OBJEXT): compat/$(am__dirstamp) \
	compat/$(DEPDIR)/$(am__dirstamp)
support/libbitcoin_util_a-cleanse.$(OBJEXT): support/$(am__dirstamp) \
	support/$(DEPDIR)/$(am__dirstamp)
compat/libbitcoin_util_a-glibc_compat.$(OBJEXT):  \
	compat/$(am__dirstamp) compat/$(DEPDIR)/$(am__dirstamp)

libbitcoin_util.a: $(libbitcoin_util_a_OBJECTS) $(libbitcoin_util_a_DEPENDENCIES) $(EXTRA_libbitcoin_util_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_util.a
	$(AM_V_AR)$(libbitcoin_util_a_AR) libbitcoin_util.a $(libbitcoin_util_a_OBJECTS) $(libbitcoin_util_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_util.a
wallet/$(am__dirstamp):
	@$(MKDIR_P) wallet
	@: > wallet/$(am__dirstamp)
wallet/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) wallet/$(DEPDIR)
	@: > wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.$(OBJEXT):  \
	wallet/$(am__dirstamp) wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.$(OBJEXT):  \
	wallet/$(am__dirstamp) wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-crypter.$(OBJEXT): wallet/$(am__dirstamp) \
	wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-db.$(OBJEXT): wallet/$(am__dirstamp) \
	wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-rpcdisclosure.$(OBJEXT):  \
	wallet/$(am__dirstamp) wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-rpcdump.$(OBJEXT): wallet/$(am__dirstamp) \
	wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-rpcwallet.$(OBJEXT):  \
	wallet/$(am__dirstamp) wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-wallet.$(OBJEXT): wallet/$(am__dirstamp) \
	wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-wallet_ismine.$(OBJEXT):  \
	wallet/$(am__dirstamp) wallet/$(DEPDIR)/$(am__dirstamp)
wallet/libbitcoin_wallet_a-walletdb.$(OBJEXT): wallet/$(am__dirstamp) \
	wallet/$(DEPDIR)/$(am__dirstamp)

libbitcoin_wallet.a: $(libbitcoin_wallet_a_OBJECTS) $(libbitcoin_wallet_a_DEPENDENCIES) $(EXTRA_libbitcoin_wallet_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_wallet.a
	$(AM_V_AR)$(libbitcoin_wallet_a_AR) libbitcoin_wallet.a $(libbitcoin_wallet_a_OBJECTS) $(libbitcoin_wallet_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_wallet.a
zmq/$(am__dirstamp):
	@$(MKDIR_P) zmq
	@: > zmq/$(am__dirstamp)
zmq/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) zmq/$(DEPDIR)
	@: > zmq/$(DEPDIR)/$(am__dirstamp)
zmq/libbitcoin_zmq_a-zmqabstractnotifier.$(OBJEXT):  \
	zmq/$(am__dirstamp) zmq/$(DEPDIR)/$(am__dirstamp)
zmq/libbitcoin_zmq_a-zmqnotificationinterface.$(OBJEXT):  \
	zmq/$(am__dirstamp) zmq/$(DEPDIR)/$(am__dirstamp)
zmq/libbitcoin_zmq_a-zmqpublishnotifier.$(OBJEXT):  \
	zmq/$(am__dirstamp) zmq/$(DEPDIR)/$(am__dirstamp)

libbitcoin_zmq.a: $(libbitcoin_zmq_a_OBJECTS) $(libbitcoin_zmq_a_DEPENDENCIES) $(EXTRA_libbitcoin_zmq_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libbitcoin_zmq.a
	$(AM_V_AR)$(libbitcoin_zmq_a_AR) libbitcoin_zmq.a $(libbitcoin_zmq_a_OBJECTS) $(libbitcoin_zmq_a_LIBADD)
	$(AM_V_at)$(RANLIB) libbitcoin_zmq.a
moonroomcash/$(am__dirstamp):
	@$(MKDIR_P) moonroomcash
	@: > moonroomcash/$(am__dirstamp)
moonroomcash/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) moonroomcash/$(DEPDIR)
	@: > moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-NoteEncryption.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-Address.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-JoinSplit.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-Proof.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-Note.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-prf.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)
moonroomcash/libmoonroomcash_a-util.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)

libmoonroomcash.a: $(libmoonroomcash_a_OBJECTS) $(libmoonroomcash_a_DEPENDENCIES) $(EXTRA_libmoonroomcash_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f libmoonroomcash.a
	$(AM_V_AR)$(libmoonroomcash_a_AR) libmoonroomcash.a $(libmoonroomcash_a_OBJECTS) $(libmoonroomcash_a_LIBADD)
	$(AM_V_at)$(RANLIB) libmoonroomcash.a

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(MKDIR_P) '$(DESTDIR)$(libdir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(libdir)" || exit 1; \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; \
	locs=`for p in $$list; do echo $$p; done | \
	      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \
	      sort -u`; \
	test -z "$$locs" || { \
	  echo rm -f $${locs}; \
	  rm -f $${locs}; \
	}
crypto/libmoonroomcashconsensus_la-equihash.lo:  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/libmoonroomcashconsensus_la-hmac_sha512.lo:  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/libmoonroomcashconsensus_la-ripemd160.lo:  \
	crypto/$(am__dirstamp) crypto/$(DEPDIR)/$(am__dirstamp)
crypto/libmoonroomcashconsensus_la-sha1.lo: crypto/$(am__dirstamp) \
	crypto/$(DEPDIR)/$(am__dirstamp)
crypto/libmoonroomcashconsensus_la-sha256.lo: crypto/$(am__dirstamp) \
	crypto/$(DEPDIR)/$(am__dirstamp)
crypto/libmoonroomcashconsensus_la-sha512.lo: crypto/$(am__dirstamp) \
	crypto/$(DEPDIR)/$(am__dirstamp)
primitives/libmoonroomcashconsensus_la-transaction.lo:  \
	primitives/$(am__dirstamp) \
	primitives/$(DEPDIR)/$(am__dirstamp)
script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo:  \
	script/$(am__dirstamp) script/$(DEPDIR)/$(am__dirstamp)
script/libmoonroomcashconsensus_la-interpreter.lo:  \
	script/$(am__dirstamp) script/$(DEPDIR)/$(am__dirstamp)
script/libmoonroomcashconsensus_la-script.lo: script/$(am__dirstamp) \
	script/$(DEPDIR)/$(am__dirstamp)
compat/libmoonroomcashconsensus_la-glibc_compat.lo:  \
	compat/$(am__dirstamp) compat/$(DEPDIR)/$(am__dirstamp)

libmoonroomcashconsensus.la: $(libmoonroomcashconsensus_la_OBJECTS) $(libmoonroomcashconsensus_la_DEPENDENCIES) $(EXTRA_libmoonroomcashconsensus_la_DEPENDENCIES) 
	$(AM_V_CXXLD)$(libmoonroomcashconsensus_la_LINK) $(am_libmoonroomcashconsensus_la_rpath) $(libmoonroomcashconsensus_la_OBJECTS) $(libmoonroomcashconsensus_la_LIBADD) $(LIBS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

moonroomcash-cli$(EXEEXT): $(moonroomcash_cli_OBJECTS) $(moonroomcash_cli_DEPENDENCIES) $(EXTRA_moonroomcash_cli_DEPENDENCIES) 
	@rm -f moonroomcash-cli$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcash_cli_LINK) $(moonroomcash_cli_OBJECTS) $(moonroomcash_cli_LDADD) $(LIBS)
gtest/$(am__dirstamp):
	@$(MKDIR_P) gtest
	@: > gtest/$(am__dirstamp)
gtest/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) gtest/$(DEPDIR)
	@: > gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-main.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-utils.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_checktransaction.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-json_test_vectors.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_foundersreward.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
wallet/gtest/$(am__dirstamp):
	@$(MKDIR_P) wallet/gtest
	@: > wallet/gtest/$(am__dirstamp)
wallet/gtest/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) wallet/gtest/$(DEPDIR)
	@: > wallet/gtest/$(DEPDIR)/$(am__dirstamp)
wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.$(OBJEXT):  \
	wallet/gtest/$(am__dirstamp) \
	wallet/gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_tautology.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_deprecation.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_equihash.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_httprpc.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_joinsplit.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_keystore.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_noteencryption.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_mempool.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_merkletree.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_metrics.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_miner.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_pow.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_random.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_rpc.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_transaction.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_validation.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_circuit.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_txid.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_libmoonroomcash_utils.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_proofs.$(OBJEXT): gtest/$(am__dirstamp) \
	gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_paymentdisclosure.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
gtest/moonroomcash_gtest-test_checkblock.$(OBJEXT):  \
	gtest/$(am__dirstamp) gtest/$(DEPDIR)/$(am__dirstamp)
wallet/gtest/moonroomcash_gtest-test_wallet.$(OBJEXT):  \
	wallet/gtest/$(am__dirstamp) \
	wallet/gtest/$(DEPDIR)/$(am__dirstamp)

moonroomcash-gtest$(EXEEXT): $(moonroomcash_gtest_OBJECTS) $(moonroomcash_gtest_DEPENDENCIES) $(EXTRA_moonroomcash_gtest_DEPENDENCIES) 
	@rm -f moonroomcash-gtest$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcash_gtest_LINK) $(moonroomcash_gtest_OBJECTS) $(moonroomcash_gtest_LDADD) $(LIBS)

moonroomcash-tx$(EXEEXT): $(moonroomcash_tx_OBJECTS) $(moonroomcash_tx_DEPENDENCIES) $(EXTRA_moonroomcash_tx_DEPENDENCIES) 
	@rm -f moonroomcash-tx$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcash_tx_LINK) $(moonroomcash_tx_OBJECTS) $(moonroomcash_tx_LDADD) $(LIBS)
moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)

moonroomcash/CreateJoinSplit$(EXEEXT): $(moonroomcash_CreateJoinSplit_OBJECTS) $(moonroomcash_CreateJoinSplit_DEPENDENCIES) $(EXTRA_moonroomcash_CreateJoinSplit_DEPENDENCIES) moonroomcash/$(am__dirstamp)
	@rm -f moonroomcash/CreateJoinSplit$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcash_CreateJoinSplit_LINK) $(moonroomcash_CreateJoinSplit_OBJECTS) $(moonroomcash_CreateJoinSplit_LDADD) $(LIBS)
moonroomcash/moonroomcash_GenerateParams-GenerateParams.$(OBJEXT):  \
	moonroomcash/$(am__dirstamp) \
	moonroomcash/$(DEPDIR)/$(am__dirstamp)

moonroomcash/GenerateParams$(EXEEXT): $(moonroomcash_GenerateParams_OBJECTS) $(moonroomcash_GenerateParams_DEPENDENCIES) $(EXTRA_moonroomcash_GenerateParams_DEPENDENCIES) moonroomcash/$(am__dirstamp)
	@rm -f moonroomcash/GenerateParams$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcash_GenerateParams_LINK) $(moonroomcash_GenerateParams_OBJECTS) $(moonroomcash_GenerateParams_LDADD) $(LIBS)

moonroomcashd$(EXEEXT): $(moonroomcashd_OBJECTS) $(moonroomcashd_DEPENDENCIES) $(EXTRA_moonroomcashd_DEPENDENCIES) 
	@rm -f moonroomcashd$(EXEEXT)
	$(AM_V_CXXLD)$(moonroomcashd_LINK) $(moonroomcashd_OBJECTS) $(moonroomcashd_LDADD) $(LIBS)
test/$(am__dirstamp):
	@$(MKDIR_P) test
	@: > test/$(am__dirstamp)
test/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) test/$(DEPDIR)
	@: > test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-arith_uint256_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-addrman_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-alert_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-allocator_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-base32_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-base58_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-base64_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-bip32_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-bloom_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-checkblock_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-Checkpoints_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-coins_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-compress_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-crypto_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-DoS_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-equihash_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-getarg_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-hash_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-key_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-main_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-mempool_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-miner_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-mruset_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-multisig_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-netbase_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-pmt_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-policyestimator_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-pow_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-raii_event_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-reverselock_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-rpc_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-sanity_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-scheduler_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-script_P2SH_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-script_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-scriptnum_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-serialize_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-sighash_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-sigopcount_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-skiplist_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-test_bitcoin.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-timedata_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-torcontrol_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-transaction_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-uint256_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-univalue_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-util_tests.$(OBJEXT): test/$(am__dirstamp) \
	test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-sha256compress_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-accounting_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)
wallet/test/$(am__dirstamp):
	@$(MKDIR_P) wallet/test
	@: > wallet/test/$(am__dirstamp)
wallet/test/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) wallet/test/$(DEPDIR)
	@: > wallet/test/$(DEPDIR)/$(am__dirstamp)
wallet/test/test_test_bitcoin-wallet_tests.$(OBJEXT):  \
	wallet/test/$(am__dirstamp) \
	wallet/test/$(DEPDIR)/$(am__dirstamp)
test/test_test_bitcoin-rpc_wallet_tests.$(OBJEXT):  \
	test/$(am__dirstamp) test/$(DEPDIR)/$(am__dirstamp)

test/test_bitcoin$(EXEEXT): $(test_test_bitcoin_OBJECTS) $(test_test_bitcoin_DEPENDENCIES) $(EXTRA_test_test_bitcoin_DEPENDENCIES) test/$(am__dirstamp)
	@rm -f test/test_bitcoin$(EXEEXT)
	$(AM_V_CXXLD)$(test_test_bitcoin_LINK) $(test_test_bitcoin_OBJECTS) $(test_test_bitcoin_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f amqp/*.$(OBJEXT)
	-rm -f compat/*.$(OBJEXT)
	-rm -f compat/*.lo
	-rm -f crypto/*.$(OBJEXT)
	-rm -f crypto/*.lo
	-rm -f gtest/*.$(OBJEXT)
	-rm -f moonroomcash/*.$(OBJEXT)
	-rm -f policy/*.$(OBJEXT)
	-rm -f primitives/*.$(OBJEXT)
	-rm -f primitives/*.lo
	-rm -f script/*.$(OBJEXT)
	-rm -f script/*.lo
	-rm -f support/*.$(OBJEXT)
	-rm -f test/*.$(OBJEXT)
	-rm -f wallet/*.$(OBJEXT)
	-rm -f wallet/gtest/*.$(OBJEXT)
	-rm -f wallet/test/*.$(OBJEXT)
	-rm -f zmq/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libbitcoin_cli_a-rpcclient.Po
include ./$(DEPDIR)/libbitcoin_common_a-amount.Po
include ./$(DEPDIR)/libbitcoin_common_a-arith_uint256.Po
include ./$(DEPDIR)/libbitcoin_common_a-base58.Po
include ./$(DEPDIR)/libbitcoin_common_a-chainparams.Po
include ./$(DEPDIR)/libbitcoin_common_a-coins.Po
include ./$(DEPDIR)/libbitcoin_common_a-compressor.Po
include ./$(DEPDIR)/libbitcoin_common_a-core_read.Po
include ./$(DEPDIR)/libbitcoin_common_a-core_write.Po
include ./$(DEPDIR)/libbitcoin_common_a-hash.Po
include ./$(DEPDIR)/libbitcoin_common_a-key.Po
include ./$(DEPDIR)/libbitcoin_common_a-keystore.Po
include ./$(DEPDIR)/libbitcoin_common_a-netbase.Po
include ./$(DEPDIR)/libbitcoin_common_a-protocol.Po
include ./$(DEPDIR)/libbitcoin_common_a-pubkey.Po
include ./$(DEPDIR)/libbitcoin_common_a-scheduler.Po
include ./$(DEPDIR)/libbitcoin_server_a-addrman.Po
include ./$(DEPDIR)/libbitcoin_server_a-alert.Po
include ./$(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Po
include ./$(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Po
include ./$(DEPDIR)/libbitcoin_server_a-bloom.Po
include ./$(DEPDIR)/libbitcoin_server_a-chain.Po
include ./$(DEPDIR)/libbitcoin_server_a-checkpoints.Po
include ./$(DEPDIR)/libbitcoin_server_a-deprecation.Po
include ./$(DEPDIR)/libbitcoin_server_a-httprpc.Po
include ./$(DEPDIR)/libbitcoin_server_a-httpserver.Po
include ./$(DEPDIR)/libbitcoin_server_a-init.Po
include ./$(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Po
include ./$(DEPDIR)/libbitcoin_server_a-main.Po
include ./$(DEPDIR)/libbitcoin_server_a-merkleblock.Po
include ./$(DEPDIR)/libbitcoin_server_a-metrics.Po
include ./$(DEPDIR)/libbitcoin_server_a-miner.Po
include ./$(DEPDIR)/libbitcoin_server_a-net.Po
include ./$(DEPDIR)/libbitcoin_server_a-noui.Po
include ./$(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Po
include ./$(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Po
include ./$(DEPDIR)/libbitcoin_server_a-pow.Po
include ./$(DEPDIR)/libbitcoin_server_a-rest.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcblockchain.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcmining.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcmisc.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcnet.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Po
include ./$(DEPDIR)/libbitcoin_server_a-rpcserver.Po
include ./$(DEPDIR)/libbitcoin_server_a-sendalert.Po
include ./$(DEPDIR)/libbitcoin_server_a-timedata.Po
include ./$(DEPDIR)/libbitcoin_server_a-torcontrol.Po
include ./$(DEPDIR)/libbitcoin_server_a-txdb.Po
include ./$(DEPDIR)/libbitcoin_server_a-txmempool.Po
include ./$(DEPDIR)/libbitcoin_server_a-validationinterface.Po
include ./$(DEPDIR)/libbitcoin_util_a-chainparamsbase.Po
include ./$(DEPDIR)/libbitcoin_util_a-clientversion.Po
include ./$(DEPDIR)/libbitcoin_util_a-random.Po
include ./$(DEPDIR)/libbitcoin_util_a-rpcprotocol.Po
include ./$(DEPDIR)/libbitcoin_util_a-sync.Po
include ./$(DEPDIR)/libbitcoin_util_a-uint256.Po
include ./$(DEPDIR)/libbitcoin_util_a-util.Po
include ./$(DEPDIR)/libbitcoin_util_a-utilmoneystr.Po
include ./$(DEPDIR)/libbitcoin_util_a-utilstrencodings.Po
include ./$(DEPDIR)/libbitcoin_util_a-utiltime.Po
include ./$(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Po
include ./$(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Po
include ./$(DEPDIR)/libbitcoin_wallet_a-utiltest.Po
include ./$(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Po
include ./$(DEPDIR)/libmoonroomcashconsensus_la-hash.Plo
include ./$(DEPDIR)/libmoonroomcashconsensus_la-pubkey.Plo
include ./$(DEPDIR)/libmoonroomcashconsensus_la-uint256.Plo
include ./$(DEPDIR)/libmoonroomcashconsensus_la-utilstrencodings.Plo
include ./$(DEPDIR)/moonroomcash_cli-bitcoin-cli.Po
include ./$(DEPDIR)/moonroomcash_tx-bitcoin-tx.Po
include ./$(DEPDIR)/moonroomcashd-bitcoind.Po
include amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Po
include amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Po
include amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Po
include compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Po
include compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Po
include compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Po
include compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Po
include compat/$(DEPDIR)/libmoonroomcashconsensus_la-glibc_compat.Plo
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Po
include crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Po
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-equihash.Plo
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-hmac_sha512.Plo
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-ripemd160.Plo
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha1.Plo
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha256.Plo
include crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha512.Plo
include gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-main.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Po
include gtest/$(DEPDIR)/moonroomcash_gtest-utils.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Po
include moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Po
include moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Po
include moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Po
include policy/$(DEPDIR)/libbitcoin_server_a-fees.Po
include primitives/$(DEPDIR)/libbitcoin_common_a-block.Po
include primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Po
include primitives/$(DEPDIR)/libmoonroomcashconsensus_la-transaction.Plo
include script/$(DEPDIR)/libbitcoin_common_a-interpreter.Po
include script/$(DEPDIR)/libbitcoin_common_a-script.Po
include script/$(DEPDIR)/libbitcoin_common_a-script_error.Po
include script/$(DEPDIR)/libbitcoin_common_a-sign.Po
include script/$(DEPDIR)/libbitcoin_common_a-standard.Po
include script/$(DEPDIR)/libbitcoin_server_a-sigcache.Po
include script/$(DEPDIR)/libmoonroomcashconsensus_la-interpreter.Plo
include script/$(DEPDIR)/libmoonroomcashconsensus_la-moonroomcashconsensus.Plo
include script/$(DEPDIR)/libmoonroomcashconsensus_la-script.Plo
include support/$(DEPDIR)/libbitcoin_util_a-cleanse.Po
include support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Po
include test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-alert_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-base32_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-base58_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-base64_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-coins_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-compress_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-hash_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-key_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-main_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-miner_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-pow_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-script_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Po
include test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Po
include test/$(DEPDIR)/test_test_bitcoin-util_tests.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Po
include wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Po
include wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Po
include wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Po
include wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Po
include zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Po
include zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Po
include zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Po

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

crypto/crypto_libbitcoin_crypto_a-equihash.o: crypto/equihash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-equihash.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-equihash.o `test -f 'crypto/equihash.cpp' || echo '$(srcdir)/'`crypto/equihash.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Po
#	$(AM_V_CXX)source='crypto/equihash.cpp' object='crypto/crypto_libbitcoin_crypto_a-equihash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-equihash.o `test -f 'crypto/equihash.cpp' || echo '$(srcdir)/'`crypto/equihash.cpp

crypto/crypto_libbitcoin_crypto_a-equihash.obj: crypto/equihash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-equihash.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-equihash.obj `if test -f 'crypto/equihash.cpp'; then $(CYGPATH_W) 'crypto/equihash.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/equihash.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-equihash.Po
#	$(AM_V_CXX)source='crypto/equihash.cpp' object='crypto/crypto_libbitcoin_crypto_a-equihash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-equihash.obj `if test -f 'crypto/equihash.cpp'; then $(CYGPATH_W) 'crypto/equihash.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/equihash.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-hmac_sha256.o: crypto/hmac_sha256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-hmac_sha256.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha256.o `test -f 'crypto/hmac_sha256.cpp' || echo '$(srcdir)/'`crypto/hmac_sha256.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Po
#	$(AM_V_CXX)source='crypto/hmac_sha256.cpp' object='crypto/crypto_libbitcoin_crypto_a-hmac_sha256.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha256.o `test -f 'crypto/hmac_sha256.cpp' || echo '$(srcdir)/'`crypto/hmac_sha256.cpp

crypto/crypto_libbitcoin_crypto_a-hmac_sha256.obj: crypto/hmac_sha256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-hmac_sha256.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha256.obj `if test -f 'crypto/hmac_sha256.cpp'; then $(CYGPATH_W) 'crypto/hmac_sha256.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/hmac_sha256.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha256.Po
#	$(AM_V_CXX)source='crypto/hmac_sha256.cpp' object='crypto/crypto_libbitcoin_crypto_a-hmac_sha256.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha256.obj `if test -f 'crypto/hmac_sha256.cpp'; then $(CYGPATH_W) 'crypto/hmac_sha256.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/hmac_sha256.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-hmac_sha512.o: crypto/hmac_sha512.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-hmac_sha512.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha512.o `test -f 'crypto/hmac_sha512.cpp' || echo '$(srcdir)/'`crypto/hmac_sha512.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Po
#	$(AM_V_CXX)source='crypto/hmac_sha512.cpp' object='crypto/crypto_libbitcoin_crypto_a-hmac_sha512.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha512.o `test -f 'crypto/hmac_sha512.cpp' || echo '$(srcdir)/'`crypto/hmac_sha512.cpp

crypto/crypto_libbitcoin_crypto_a-hmac_sha512.obj: crypto/hmac_sha512.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-hmac_sha512.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha512.obj `if test -f 'crypto/hmac_sha512.cpp'; then $(CYGPATH_W) 'crypto/hmac_sha512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/hmac_sha512.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-hmac_sha512.Po
#	$(AM_V_CXX)source='crypto/hmac_sha512.cpp' object='crypto/crypto_libbitcoin_crypto_a-hmac_sha512.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-hmac_sha512.obj `if test -f 'crypto/hmac_sha512.cpp'; then $(CYGPATH_W) 'crypto/hmac_sha512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/hmac_sha512.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-ripemd160.o: crypto/ripemd160.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-ripemd160.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-ripemd160.o `test -f 'crypto/ripemd160.cpp' || echo '$(srcdir)/'`crypto/ripemd160.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Po
#	$(AM_V_CXX)source='crypto/ripemd160.cpp' object='crypto/crypto_libbitcoin_crypto_a-ripemd160.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-ripemd160.o `test -f 'crypto/ripemd160.cpp' || echo '$(srcdir)/'`crypto/ripemd160.cpp

crypto/crypto_libbitcoin_crypto_a-ripemd160.obj: crypto/ripemd160.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-ripemd160.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-ripemd160.obj `if test -f 'crypto/ripemd160.cpp'; then $(CYGPATH_W) 'crypto/ripemd160.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/ripemd160.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-ripemd160.Po
#	$(AM_V_CXX)source='crypto/ripemd160.cpp' object='crypto/crypto_libbitcoin_crypto_a-ripemd160.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-ripemd160.obj `if test -f 'crypto/ripemd160.cpp'; then $(CYGPATH_W) 'crypto/ripemd160.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/ripemd160.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-sha1.o: crypto/sha1.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha1.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha1.o `test -f 'crypto/sha1.cpp' || echo '$(srcdir)/'`crypto/sha1.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Po
#	$(AM_V_CXX)source='crypto/sha1.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha1.o `test -f 'crypto/sha1.cpp' || echo '$(srcdir)/'`crypto/sha1.cpp

crypto/crypto_libbitcoin_crypto_a-sha1.obj: crypto/sha1.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha1.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha1.obj `if test -f 'crypto/sha1.cpp'; then $(CYGPATH_W) 'crypto/sha1.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha1.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha1.Po
#	$(AM_V_CXX)source='crypto/sha1.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha1.obj `if test -f 'crypto/sha1.cpp'; then $(CYGPATH_W) 'crypto/sha1.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha1.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-sha256.o: crypto/sha256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha256.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha256.o `test -f 'crypto/sha256.cpp' || echo '$(srcdir)/'`crypto/sha256.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Po
#	$(AM_V_CXX)source='crypto/sha256.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha256.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha256.o `test -f 'crypto/sha256.cpp' || echo '$(srcdir)/'`crypto/sha256.cpp

crypto/crypto_libbitcoin_crypto_a-sha256.obj: crypto/sha256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha256.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha256.obj `if test -f 'crypto/sha256.cpp'; then $(CYGPATH_W) 'crypto/sha256.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha256.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha256.Po
#	$(AM_V_CXX)source='crypto/sha256.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha256.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha256.obj `if test -f 'crypto/sha256.cpp'; then $(CYGPATH_W) 'crypto/sha256.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha256.cpp'; fi`

crypto/crypto_libbitcoin_crypto_a-sha512.o: crypto/sha512.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha512.o -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha512.o `test -f 'crypto/sha512.cpp' || echo '$(srcdir)/'`crypto/sha512.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Po
#	$(AM_V_CXX)source='crypto/sha512.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha512.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha512.o `test -f 'crypto/sha512.cpp' || echo '$(srcdir)/'`crypto/sha512.cpp

crypto/crypto_libbitcoin_crypto_a-sha512.obj: crypto/sha512.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -MT crypto/crypto_libbitcoin_crypto_a-sha512.obj -MD -MP -MF crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Tpo -c -o crypto/crypto_libbitcoin_crypto_a-sha512.obj `if test -f 'crypto/sha512.cpp'; then $(CYGPATH_W) 'crypto/sha512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha512.cpp'; fi`
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Tpo crypto/$(DEPDIR)/crypto_libbitcoin_crypto_a-sha512.Po
#	$(AM_V_CXX)source='crypto/sha512.cpp' object='crypto/crypto_libbitcoin_crypto_a-sha512.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(crypto_libbitcoin_crypto_a_CPPFLAGS) $(CPPFLAGS) $(crypto_libbitcoin_crypto_a_CXXFLAGS) $(CXXFLAGS) -c -o crypto/crypto_libbitcoin_crypto_a-sha512.obj `if test -f 'crypto/sha512.cpp'; then $(CYGPATH_W) 'crypto/sha512.cpp'; else $(CYGPATH_W) '$(srcdir)/crypto/sha512.cpp'; fi`

libbitcoin_cli_a-rpcclient.o: rpcclient.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_cli_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_cli_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_cli_a-rpcclient.o -MD -MP -MF $(DEPDIR)/libbitcoin_cli_a-rpcclient.Tpo -c -o libbitcoin_cli_a-rpcclient.o `test -f 'rpcclient.cpp' || echo '$(srcdir)/'`rpcclient.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_cli_a-rpcclient.Tpo $(DEPDIR)/libbitcoin_cli_a-rpcclient.Po
#	$(AM_V_CXX)source='rpcclient.cpp' object='libbitcoin_cli_a-rpcclient.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_cli_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_cli_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_cli_a-rpcclient.o `test -f 'rpcclient.cpp' || echo '$(srcdir)/'`rpcclient.cpp

libbitcoin_cli_a-rpcclient.obj: rpcclient.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_cli_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_cli_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_cli_a-rpcclient.obj -MD -MP -MF $(DEPDIR)/libbitcoin_cli_a-rpcclient.Tpo -c -o libbitcoin_cli_a-rpcclient.obj `if test -f 'rpcclient.cpp'; then $(CYGPATH_W) 'rpcclient.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcclient.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_cli_a-rpcclient.Tpo $(DEPDIR)/libbitcoin_cli_a-rpcclient.Po
#	$(AM_V_CXX)source='rpcclient.cpp' object='libbitcoin_cli_a-rpcclient.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_cli_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_cli_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_cli_a-rpcclient.obj `if test -f 'rpcclient.cpp'; then $(CYGPATH_W) 'rpcclient.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcclient.cpp'; fi`

libbitcoin_common_a-amount.o: amount.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-amount.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-amount.Tpo -c -o libbitcoin_common_a-amount.o `test -f 'amount.cpp' || echo '$(srcdir)/'`amount.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-amount.Tpo $(DEPDIR)/libbitcoin_common_a-amount.Po
#	$(AM_V_CXX)source='amount.cpp' object='libbitcoin_common_a-amount.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-amount.o `test -f 'amount.cpp' || echo '$(srcdir)/'`amount.cpp

libbitcoin_common_a-amount.obj: amount.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-amount.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-amount.Tpo -c -o libbitcoin_common_a-amount.obj `if test -f 'amount.cpp'; then $(CYGPATH_W) 'amount.cpp'; else $(CYGPATH_W) '$(srcdir)/amount.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-amount.Tpo $(DEPDIR)/libbitcoin_common_a-amount.Po
#	$(AM_V_CXX)source='amount.cpp' object='libbitcoin_common_a-amount.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-amount.obj `if test -f 'amount.cpp'; then $(CYGPATH_W) 'amount.cpp'; else $(CYGPATH_W) '$(srcdir)/amount.cpp'; fi`

libbitcoin_common_a-arith_uint256.o: arith_uint256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-arith_uint256.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-arith_uint256.Tpo -c -o libbitcoin_common_a-arith_uint256.o `test -f 'arith_uint256.cpp' || echo '$(srcdir)/'`arith_uint256.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-arith_uint256.Tpo $(DEPDIR)/libbitcoin_common_a-arith_uint256.Po
#	$(AM_V_CXX)source='arith_uint256.cpp' object='libbitcoin_common_a-arith_uint256.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-arith_uint256.o `test -f 'arith_uint256.cpp' || echo '$(srcdir)/'`arith_uint256.cpp

libbitcoin_common_a-arith_uint256.obj: arith_uint256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-arith_uint256.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-arith_uint256.Tpo -c -o libbitcoin_common_a-arith_uint256.obj `if test -f 'arith_uint256.cpp'; then $(CYGPATH_W) 'arith_uint256.cpp'; else $(CYGPATH_W) '$(srcdir)/arith_uint256.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-arith_uint256.Tpo $(DEPDIR)/libbitcoin_common_a-arith_uint256.Po
#	$(AM_V_CXX)source='arith_uint256.cpp' object='libbitcoin_common_a-arith_uint256.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-arith_uint256.obj `if test -f 'arith_uint256.cpp'; then $(CYGPATH_W) 'arith_uint256.cpp'; else $(CYGPATH_W) '$(srcdir)/arith_uint256.cpp'; fi`

libbitcoin_common_a-base58.o: base58.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-base58.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-base58.Tpo -c -o libbitcoin_common_a-base58.o `test -f 'base58.cpp' || echo '$(srcdir)/'`base58.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-base58.Tpo $(DEPDIR)/libbitcoin_common_a-base58.Po
#	$(AM_V_CXX)source='base58.cpp' object='libbitcoin_common_a-base58.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-base58.o `test -f 'base58.cpp' || echo '$(srcdir)/'`base58.cpp

libbitcoin_common_a-base58.obj: base58.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-base58.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-base58.Tpo -c -o libbitcoin_common_a-base58.obj `if test -f 'base58.cpp'; then $(CYGPATH_W) 'base58.cpp'; else $(CYGPATH_W) '$(srcdir)/base58.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-base58.Tpo $(DEPDIR)/libbitcoin_common_a-base58.Po
#	$(AM_V_CXX)source='base58.cpp' object='libbitcoin_common_a-base58.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-base58.obj `if test -f 'base58.cpp'; then $(CYGPATH_W) 'base58.cpp'; else $(CYGPATH_W) '$(srcdir)/base58.cpp'; fi`

libbitcoin_common_a-chainparams.o: chainparams.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-chainparams.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-chainparams.Tpo -c -o libbitcoin_common_a-chainparams.o `test -f 'chainparams.cpp' || echo '$(srcdir)/'`chainparams.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-chainparams.Tpo $(DEPDIR)/libbitcoin_common_a-chainparams.Po
#	$(AM_V_CXX)source='chainparams.cpp' object='libbitcoin_common_a-chainparams.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-chainparams.o `test -f 'chainparams.cpp' || echo '$(srcdir)/'`chainparams.cpp

libbitcoin_common_a-chainparams.obj: chainparams.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-chainparams.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-chainparams.Tpo -c -o libbitcoin_common_a-chainparams.obj `if test -f 'chainparams.cpp'; then $(CYGPATH_W) 'chainparams.cpp'; else $(CYGPATH_W) '$(srcdir)/chainparams.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-chainparams.Tpo $(DEPDIR)/libbitcoin_common_a-chainparams.Po
#	$(AM_V_CXX)source='chainparams.cpp' object='libbitcoin_common_a-chainparams.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-chainparams.obj `if test -f 'chainparams.cpp'; then $(CYGPATH_W) 'chainparams.cpp'; else $(CYGPATH_W) '$(srcdir)/chainparams.cpp'; fi`

libbitcoin_common_a-coins.o: coins.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-coins.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-coins.Tpo -c -o libbitcoin_common_a-coins.o `test -f 'coins.cpp' || echo '$(srcdir)/'`coins.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-coins.Tpo $(DEPDIR)/libbitcoin_common_a-coins.Po
#	$(AM_V_CXX)source='coins.cpp' object='libbitcoin_common_a-coins.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-coins.o `test -f 'coins.cpp' || echo '$(srcdir)/'`coins.cpp

libbitcoin_common_a-coins.obj: coins.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-coins.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-coins.Tpo -c -o libbitcoin_common_a-coins.obj `if test -f 'coins.cpp'; then $(CYGPATH_W) 'coins.cpp'; else $(CYGPATH_W) '$(srcdir)/coins.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-coins.Tpo $(DEPDIR)/libbitcoin_common_a-coins.Po
#	$(AM_V_CXX)source='coins.cpp' object='libbitcoin_common_a-coins.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-coins.obj `if test -f 'coins.cpp'; then $(CYGPATH_W) 'coins.cpp'; else $(CYGPATH_W) '$(srcdir)/coins.cpp'; fi`

libbitcoin_common_a-compressor.o: compressor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-compressor.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-compressor.Tpo -c -o libbitcoin_common_a-compressor.o `test -f 'compressor.cpp' || echo '$(srcdir)/'`compressor.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-compressor.Tpo $(DEPDIR)/libbitcoin_common_a-compressor.Po
#	$(AM_V_CXX)source='compressor.cpp' object='libbitcoin_common_a-compressor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-compressor.o `test -f 'compressor.cpp' || echo '$(srcdir)/'`compressor.cpp

libbitcoin_common_a-compressor.obj: compressor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-compressor.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-compressor.Tpo -c -o libbitcoin_common_a-compressor.obj `if test -f 'compressor.cpp'; then $(CYGPATH_W) 'compressor.cpp'; else $(CYGPATH_W) '$(srcdir)/compressor.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-compressor.Tpo $(DEPDIR)/libbitcoin_common_a-compressor.Po
#	$(AM_V_CXX)source='compressor.cpp' object='libbitcoin_common_a-compressor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-compressor.obj `if test -f 'compressor.cpp'; then $(CYGPATH_W) 'compressor.cpp'; else $(CYGPATH_W) '$(srcdir)/compressor.cpp'; fi`

libbitcoin_common_a-core_read.o: core_read.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-core_read.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-core_read.Tpo -c -o libbitcoin_common_a-core_read.o `test -f 'core_read.cpp' || echo '$(srcdir)/'`core_read.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-core_read.Tpo $(DEPDIR)/libbitcoin_common_a-core_read.Po
#	$(AM_V_CXX)source='core_read.cpp' object='libbitcoin_common_a-core_read.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-core_read.o `test -f 'core_read.cpp' || echo '$(srcdir)/'`core_read.cpp

libbitcoin_common_a-core_read.obj: core_read.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-core_read.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-core_read.Tpo -c -o libbitcoin_common_a-core_read.obj `if test -f 'core_read.cpp'; then $(CYGPATH_W) 'core_read.cpp'; else $(CYGPATH_W) '$(srcdir)/core_read.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-core_read.Tpo $(DEPDIR)/libbitcoin_common_a-core_read.Po
#	$(AM_V_CXX)source='core_read.cpp' object='libbitcoin_common_a-core_read.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-core_read.obj `if test -f 'core_read.cpp'; then $(CYGPATH_W) 'core_read.cpp'; else $(CYGPATH_W) '$(srcdir)/core_read.cpp'; fi`

libbitcoin_common_a-core_write.o: core_write.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-core_write.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-core_write.Tpo -c -o libbitcoin_common_a-core_write.o `test -f 'core_write.cpp' || echo '$(srcdir)/'`core_write.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-core_write.Tpo $(DEPDIR)/libbitcoin_common_a-core_write.Po
#	$(AM_V_CXX)source='core_write.cpp' object='libbitcoin_common_a-core_write.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-core_write.o `test -f 'core_write.cpp' || echo '$(srcdir)/'`core_write.cpp

libbitcoin_common_a-core_write.obj: core_write.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-core_write.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-core_write.Tpo -c -o libbitcoin_common_a-core_write.obj `if test -f 'core_write.cpp'; then $(CYGPATH_W) 'core_write.cpp'; else $(CYGPATH_W) '$(srcdir)/core_write.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-core_write.Tpo $(DEPDIR)/libbitcoin_common_a-core_write.Po
#	$(AM_V_CXX)source='core_write.cpp' object='libbitcoin_common_a-core_write.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-core_write.obj `if test -f 'core_write.cpp'; then $(CYGPATH_W) 'core_write.cpp'; else $(CYGPATH_W) '$(srcdir)/core_write.cpp'; fi`

libbitcoin_common_a-hash.o: hash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-hash.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-hash.Tpo -c -o libbitcoin_common_a-hash.o `test -f 'hash.cpp' || echo '$(srcdir)/'`hash.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-hash.Tpo $(DEPDIR)/libbitcoin_common_a-hash.Po
#	$(AM_V_CXX)source='hash.cpp' object='libbitcoin_common_a-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-hash.o `test -f 'hash.cpp' || echo '$(srcdir)/'`hash.cpp

libbitcoin_common_a-hash.obj: hash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-hash.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-hash.Tpo -c -o libbitcoin_common_a-hash.obj `if test -f 'hash.cpp'; then $(CYGPATH_W) 'hash.cpp'; else $(CYGPATH_W) '$(srcdir)/hash.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-hash.Tpo $(DEPDIR)/libbitcoin_common_a-hash.Po
#	$(AM_V_CXX)source='hash.cpp' object='libbitcoin_common_a-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-hash.obj `if test -f 'hash.cpp'; then $(CYGPATH_W) 'hash.cpp'; else $(CYGPATH_W) '$(srcdir)/hash.cpp'; fi`

libbitcoin_common_a-key.o: key.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-key.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-key.Tpo -c -o libbitcoin_common_a-key.o `test -f 'key.cpp' || echo '$(srcdir)/'`key.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-key.Tpo $(DEPDIR)/libbitcoin_common_a-key.Po
#	$(AM_V_CXX)source='key.cpp' object='libbitcoin_common_a-key.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-key.o `test -f 'key.cpp' || echo '$(srcdir)/'`key.cpp

libbitcoin_common_a-key.obj: key.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-key.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-key.Tpo -c -o libbitcoin_common_a-key.obj `if test -f 'key.cpp'; then $(CYGPATH_W) 'key.cpp'; else $(CYGPATH_W) '$(srcdir)/key.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-key.Tpo $(DEPDIR)/libbitcoin_common_a-key.Po
#	$(AM_V_CXX)source='key.cpp' object='libbitcoin_common_a-key.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-key.obj `if test -f 'key.cpp'; then $(CYGPATH_W) 'key.cpp'; else $(CYGPATH_W) '$(srcdir)/key.cpp'; fi`

libbitcoin_common_a-keystore.o: keystore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-keystore.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-keystore.Tpo -c -o libbitcoin_common_a-keystore.o `test -f 'keystore.cpp' || echo '$(srcdir)/'`keystore.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-keystore.Tpo $(DEPDIR)/libbitcoin_common_a-keystore.Po
#	$(AM_V_CXX)source='keystore.cpp' object='libbitcoin_common_a-keystore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-keystore.o `test -f 'keystore.cpp' || echo '$(srcdir)/'`keystore.cpp

libbitcoin_common_a-keystore.obj: keystore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-keystore.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-keystore.Tpo -c -o libbitcoin_common_a-keystore.obj `if test -f 'keystore.cpp'; then $(CYGPATH_W) 'keystore.cpp'; else $(CYGPATH_W) '$(srcdir)/keystore.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-keystore.Tpo $(DEPDIR)/libbitcoin_common_a-keystore.Po
#	$(AM_V_CXX)source='keystore.cpp' object='libbitcoin_common_a-keystore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-keystore.obj `if test -f 'keystore.cpp'; then $(CYGPATH_W) 'keystore.cpp'; else $(CYGPATH_W) '$(srcdir)/keystore.cpp'; fi`

libbitcoin_common_a-netbase.o: netbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-netbase.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-netbase.Tpo -c -o libbitcoin_common_a-netbase.o `test -f 'netbase.cpp' || echo '$(srcdir)/'`netbase.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-netbase.Tpo $(DEPDIR)/libbitcoin_common_a-netbase.Po
#	$(AM_V_CXX)source='netbase.cpp' object='libbitcoin_common_a-netbase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-netbase.o `test -f 'netbase.cpp' || echo '$(srcdir)/'`netbase.cpp

libbitcoin_common_a-netbase.obj: netbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-netbase.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-netbase.Tpo -c -o libbitcoin_common_a-netbase.obj `if test -f 'netbase.cpp'; then $(CYGPATH_W) 'netbase.cpp'; else $(CYGPATH_W) '$(srcdir)/netbase.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-netbase.Tpo $(DEPDIR)/libbitcoin_common_a-netbase.Po
#	$(AM_V_CXX)source='netbase.cpp' object='libbitcoin_common_a-netbase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-netbase.obj `if test -f 'netbase.cpp'; then $(CYGPATH_W) 'netbase.cpp'; else $(CYGPATH_W) '$(srcdir)/netbase.cpp'; fi`

primitives/libbitcoin_common_a-block.o: primitives/block.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT primitives/libbitcoin_common_a-block.o -MD -MP -MF primitives/$(DEPDIR)/libbitcoin_common_a-block.Tpo -c -o primitives/libbitcoin_common_a-block.o `test -f 'primitives/block.cpp' || echo '$(srcdir)/'`primitives/block.cpp
	$(AM_V_at)$(am__mv) primitives/$(DEPDIR)/libbitcoin_common_a-block.Tpo primitives/$(DEPDIR)/libbitcoin_common_a-block.Po
#	$(AM_V_CXX)source='primitives/block.cpp' object='primitives/libbitcoin_common_a-block.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o primitives/libbitcoin_common_a-block.o `test -f 'primitives/block.cpp' || echo '$(srcdir)/'`primitives/block.cpp

primitives/libbitcoin_common_a-block.obj: primitives/block.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT primitives/libbitcoin_common_a-block.obj -MD -MP -MF primitives/$(DEPDIR)/libbitcoin_common_a-block.Tpo -c -o primitives/libbitcoin_common_a-block.obj `if test -f 'primitives/block.cpp'; then $(CYGPATH_W) 'primitives/block.cpp'; else $(CYGPATH_W) '$(srcdir)/primitives/block.cpp'; fi`
	$(AM_V_at)$(am__mv) primitives/$(DEPDIR)/libbitcoin_common_a-block.Tpo primitives/$(DEPDIR)/libbitcoin_common_a-block.Po
#	$(AM_V_CXX)source='primitives/block.cpp' object='primitives/libbitcoin_common_a-block.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o primitives/libbitcoin_common_a-block.obj `if test -f 'primitives/block.cpp'; then $(CYGPATH_W) 'primitives/block.cpp'; else $(CYGPATH_W) '$(srcdir)/primitives/block.cpp'; fi`

primitives/libbitcoin_common_a-transaction.o: primitives/transaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT primitives/libbitcoin_common_a-transaction.o -MD -MP -MF primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Tpo -c -o primitives/libbitcoin_common_a-transaction.o `test -f 'primitives/transaction.cpp' || echo '$(srcdir)/'`primitives/transaction.cpp
	$(AM_V_at)$(am__mv) primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Tpo primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Po
#	$(AM_V_CXX)source='primitives/transaction.cpp' object='primitives/libbitcoin_common_a-transaction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o primitives/libbitcoin_common_a-transaction.o `test -f 'primitives/transaction.cpp' || echo '$(srcdir)/'`primitives/transaction.cpp

primitives/libbitcoin_common_a-transaction.obj: primitives/transaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT primitives/libbitcoin_common_a-transaction.obj -MD -MP -MF primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Tpo -c -o primitives/libbitcoin_common_a-transaction.obj `if test -f 'primitives/transaction.cpp'; then $(CYGPATH_W) 'primitives/transaction.cpp'; else $(CYGPATH_W) '$(srcdir)/primitives/transaction.cpp'; fi`
	$(AM_V_at)$(am__mv) primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Tpo primitives/$(DEPDIR)/libbitcoin_common_a-transaction.Po
#	$(AM_V_CXX)source='primitives/transaction.cpp' object='primitives/libbitcoin_common_a-transaction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o primitives/libbitcoin_common_a-transaction.obj `if test -f 'primitives/transaction.cpp'; then $(CYGPATH_W) 'primitives/transaction.cpp'; else $(CYGPATH_W) '$(srcdir)/primitives/transaction.cpp'; fi`

libbitcoin_common_a-protocol.o: protocol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-protocol.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-protocol.Tpo -c -o libbitcoin_common_a-protocol.o `test -f 'protocol.cpp' || echo '$(srcdir)/'`protocol.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-protocol.Tpo $(DEPDIR)/libbitcoin_common_a-protocol.Po
#	$(AM_V_CXX)source='protocol.cpp' object='libbitcoin_common_a-protocol.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-protocol.o `test -f 'protocol.cpp' || echo '$(srcdir)/'`protocol.cpp

libbitcoin_common_a-protocol.obj: protocol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-protocol.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-protocol.Tpo -c -o libbitcoin_common_a-protocol.obj `if test -f 'protocol.cpp'; then $(CYGPATH_W) 'protocol.cpp'; else $(CYGPATH_W) '$(srcdir)/protocol.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-protocol.Tpo $(DEPDIR)/libbitcoin_common_a-protocol.Po
#	$(AM_V_CXX)source='protocol.cpp' object='libbitcoin_common_a-protocol.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-protocol.obj `if test -f 'protocol.cpp'; then $(CYGPATH_W) 'protocol.cpp'; else $(CYGPATH_W) '$(srcdir)/protocol.cpp'; fi`

libbitcoin_common_a-pubkey.o: pubkey.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-pubkey.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-pubkey.Tpo -c -o libbitcoin_common_a-pubkey.o `test -f 'pubkey.cpp' || echo '$(srcdir)/'`pubkey.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-pubkey.Tpo $(DEPDIR)/libbitcoin_common_a-pubkey.Po
#	$(AM_V_CXX)source='pubkey.cpp' object='libbitcoin_common_a-pubkey.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-pubkey.o `test -f 'pubkey.cpp' || echo '$(srcdir)/'`pubkey.cpp

libbitcoin_common_a-pubkey.obj: pubkey.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-pubkey.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-pubkey.Tpo -c -o libbitcoin_common_a-pubkey.obj `if test -f 'pubkey.cpp'; then $(CYGPATH_W) 'pubkey.cpp'; else $(CYGPATH_W) '$(srcdir)/pubkey.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-pubkey.Tpo $(DEPDIR)/libbitcoin_common_a-pubkey.Po
#	$(AM_V_CXX)source='pubkey.cpp' object='libbitcoin_common_a-pubkey.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-pubkey.obj `if test -f 'pubkey.cpp'; then $(CYGPATH_W) 'pubkey.cpp'; else $(CYGPATH_W) '$(srcdir)/pubkey.cpp'; fi`

libbitcoin_common_a-scheduler.o: scheduler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-scheduler.o -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-scheduler.Tpo -c -o libbitcoin_common_a-scheduler.o `test -f 'scheduler.cpp' || echo '$(srcdir)/'`scheduler.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-scheduler.Tpo $(DEPDIR)/libbitcoin_common_a-scheduler.Po
#	$(AM_V_CXX)source='scheduler.cpp' object='libbitcoin_common_a-scheduler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-scheduler.o `test -f 'scheduler.cpp' || echo '$(srcdir)/'`scheduler.cpp

libbitcoin_common_a-scheduler.obj: scheduler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_common_a-scheduler.obj -MD -MP -MF $(DEPDIR)/libbitcoin_common_a-scheduler.Tpo -c -o libbitcoin_common_a-scheduler.obj `if test -f 'scheduler.cpp'; then $(CYGPATH_W) 'scheduler.cpp'; else $(CYGPATH_W) '$(srcdir)/scheduler.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_common_a-scheduler.Tpo $(DEPDIR)/libbitcoin_common_a-scheduler.Po
#	$(AM_V_CXX)source='scheduler.cpp' object='libbitcoin_common_a-scheduler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_common_a-scheduler.obj `if test -f 'scheduler.cpp'; then $(CYGPATH_W) 'scheduler.cpp'; else $(CYGPATH_W) '$(srcdir)/scheduler.cpp'; fi`

script/libbitcoin_common_a-interpreter.o: script/interpreter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-interpreter.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-interpreter.Tpo -c -o script/libbitcoin_common_a-interpreter.o `test -f 'script/interpreter.cpp' || echo '$(srcdir)/'`script/interpreter.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-interpreter.Tpo script/$(DEPDIR)/libbitcoin_common_a-interpreter.Po
#	$(AM_V_CXX)source='script/interpreter.cpp' object='script/libbitcoin_common_a-interpreter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-interpreter.o `test -f 'script/interpreter.cpp' || echo '$(srcdir)/'`script/interpreter.cpp

script/libbitcoin_common_a-interpreter.obj: script/interpreter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-interpreter.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-interpreter.Tpo -c -o script/libbitcoin_common_a-interpreter.obj `if test -f 'script/interpreter.cpp'; then $(CYGPATH_W) 'script/interpreter.cpp'; else $(CYGPATH_W) '$(srcdir)/script/interpreter.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-interpreter.Tpo script/$(DEPDIR)/libbitcoin_common_a-interpreter.Po
#	$(AM_V_CXX)source='script/interpreter.cpp' object='script/libbitcoin_common_a-interpreter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-interpreter.obj `if test -f 'script/interpreter.cpp'; then $(CYGPATH_W) 'script/interpreter.cpp'; else $(CYGPATH_W) '$(srcdir)/script/interpreter.cpp'; fi`

script/libbitcoin_common_a-script.o: script/script.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-script.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-script.Tpo -c -o script/libbitcoin_common_a-script.o `test -f 'script/script.cpp' || echo '$(srcdir)/'`script/script.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-script.Tpo script/$(DEPDIR)/libbitcoin_common_a-script.Po
#	$(AM_V_CXX)source='script/script.cpp' object='script/libbitcoin_common_a-script.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-script.o `test -f 'script/script.cpp' || echo '$(srcdir)/'`script/script.cpp

script/libbitcoin_common_a-script.obj: script/script.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-script.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-script.Tpo -c -o script/libbitcoin_common_a-script.obj `if test -f 'script/script.cpp'; then $(CYGPATH_W) 'script/script.cpp'; else $(CYGPATH_W) '$(srcdir)/script/script.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-script.Tpo script/$(DEPDIR)/libbitcoin_common_a-script.Po
#	$(AM_V_CXX)source='script/script.cpp' object='script/libbitcoin_common_a-script.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-script.obj `if test -f 'script/script.cpp'; then $(CYGPATH_W) 'script/script.cpp'; else $(CYGPATH_W) '$(srcdir)/script/script.cpp'; fi`

script/libbitcoin_common_a-script_error.o: script/script_error.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-script_error.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-script_error.Tpo -c -o script/libbitcoin_common_a-script_error.o `test -f 'script/script_error.cpp' || echo '$(srcdir)/'`script/script_error.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-script_error.Tpo script/$(DEPDIR)/libbitcoin_common_a-script_error.Po
#	$(AM_V_CXX)source='script/script_error.cpp' object='script/libbitcoin_common_a-script_error.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-script_error.o `test -f 'script/script_error.cpp' || echo '$(srcdir)/'`script/script_error.cpp

script/libbitcoin_common_a-script_error.obj: script/script_error.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-script_error.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-script_error.Tpo -c -o script/libbitcoin_common_a-script_error.obj `if test -f 'script/script_error.cpp'; then $(CYGPATH_W) 'script/script_error.cpp'; else $(CYGPATH_W) '$(srcdir)/script/script_error.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-script_error.Tpo script/$(DEPDIR)/libbitcoin_common_a-script_error.Po
#	$(AM_V_CXX)source='script/script_error.cpp' object='script/libbitcoin_common_a-script_error.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-script_error.obj `if test -f 'script/script_error.cpp'; then $(CYGPATH_W) 'script/script_error.cpp'; else $(CYGPATH_W) '$(srcdir)/script/script_error.cpp'; fi`

script/libbitcoin_common_a-sign.o: script/sign.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-sign.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-sign.Tpo -c -o script/libbitcoin_common_a-sign.o `test -f 'script/sign.cpp' || echo '$(srcdir)/'`script/sign.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-sign.Tpo script/$(DEPDIR)/libbitcoin_common_a-sign.Po
#	$(AM_V_CXX)source='script/sign.cpp' object='script/libbitcoin_common_a-sign.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-sign.o `test -f 'script/sign.cpp' || echo '$(srcdir)/'`script/sign.cpp

script/libbitcoin_common_a-sign.obj: script/sign.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-sign.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-sign.Tpo -c -o script/libbitcoin_common_a-sign.obj `if test -f 'script/sign.cpp'; then $(CYGPATH_W) 'script/sign.cpp'; else $(CYGPATH_W) '$(srcdir)/script/sign.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-sign.Tpo script/$(DEPDIR)/libbitcoin_common_a-sign.Po
#	$(AM_V_CXX)source='script/sign.cpp' object='script/libbitcoin_common_a-sign.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-sign.obj `if test -f 'script/sign.cpp'; then $(CYGPATH_W) 'script/sign.cpp'; else $(CYGPATH_W) '$(srcdir)/script/sign.cpp'; fi`

script/libbitcoin_common_a-standard.o: script/standard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-standard.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-standard.Tpo -c -o script/libbitcoin_common_a-standard.o `test -f 'script/standard.cpp' || echo '$(srcdir)/'`script/standard.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-standard.Tpo script/$(DEPDIR)/libbitcoin_common_a-standard.Po
#	$(AM_V_CXX)source='script/standard.cpp' object='script/libbitcoin_common_a-standard.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-standard.o `test -f 'script/standard.cpp' || echo '$(srcdir)/'`script/standard.cpp

script/libbitcoin_common_a-standard.obj: script/standard.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_common_a-standard.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_common_a-standard.Tpo -c -o script/libbitcoin_common_a-standard.obj `if test -f 'script/standard.cpp'; then $(CYGPATH_W) 'script/standard.cpp'; else $(CYGPATH_W) '$(srcdir)/script/standard.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_common_a-standard.Tpo script/$(DEPDIR)/libbitcoin_common_a-standard.Po
#	$(AM_V_CXX)source='script/standard.cpp' object='script/libbitcoin_common_a-standard.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_common_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_common_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_common_a-standard.obj `if test -f 'script/standard.cpp'; then $(CYGPATH_W) 'script/standard.cpp'; else $(CYGPATH_W) '$(srcdir)/script/standard.cpp'; fi`

amqp/libbitcoin_proton_a-amqpabstractnotifier.o: amqp/amqpabstractnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqpabstractnotifier.o -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Tpo -c -o amqp/libbitcoin_proton_a-amqpabstractnotifier.o `test -f 'amqp/amqpabstractnotifier.cpp' || echo '$(srcdir)/'`amqp/amqpabstractnotifier.cpp
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Po
#	$(AM_V_CXX)source='amqp/amqpabstractnotifier.cpp' object='amqp/libbitcoin_proton_a-amqpabstractnotifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqpabstractnotifier.o `test -f 'amqp/amqpabstractnotifier.cpp' || echo '$(srcdir)/'`amqp/amqpabstractnotifier.cpp

amqp/libbitcoin_proton_a-amqpabstractnotifier.obj: amqp/amqpabstractnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqpabstractnotifier.obj -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Tpo -c -o amqp/libbitcoin_proton_a-amqpabstractnotifier.obj `if test -f 'amqp/amqpabstractnotifier.cpp'; then $(CYGPATH_W) 'amqp/amqpabstractnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqpabstractnotifier.cpp'; fi`
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqpabstractnotifier.Po
#	$(AM_V_CXX)source='amqp/amqpabstractnotifier.cpp' object='amqp/libbitcoin_proton_a-amqpabstractnotifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqpabstractnotifier.obj `if test -f 'amqp/amqpabstractnotifier.cpp'; then $(CYGPATH_W) 'amqp/amqpabstractnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqpabstractnotifier.cpp'; fi`

amqp/libbitcoin_proton_a-amqpnotificationinterface.o: amqp/amqpnotificationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqpnotificationinterface.o -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Tpo -c -o amqp/libbitcoin_proton_a-amqpnotificationinterface.o `test -f 'amqp/amqpnotificationinterface.cpp' || echo '$(srcdir)/'`amqp/amqpnotificationinterface.cpp
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Po
#	$(AM_V_CXX)source='amqp/amqpnotificationinterface.cpp' object='amqp/libbitcoin_proton_a-amqpnotificationinterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqpnotificationinterface.o `test -f 'amqp/amqpnotificationinterface.cpp' || echo '$(srcdir)/'`amqp/amqpnotificationinterface.cpp

amqp/libbitcoin_proton_a-amqpnotificationinterface.obj: amqp/amqpnotificationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqpnotificationinterface.obj -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Tpo -c -o amqp/libbitcoin_proton_a-amqpnotificationinterface.obj `if test -f 'amqp/amqpnotificationinterface.cpp'; then $(CYGPATH_W) 'amqp/amqpnotificationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqpnotificationinterface.cpp'; fi`
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqpnotificationinterface.Po
#	$(AM_V_CXX)source='amqp/amqpnotificationinterface.cpp' object='amqp/libbitcoin_proton_a-amqpnotificationinterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqpnotificationinterface.obj `if test -f 'amqp/amqpnotificationinterface.cpp'; then $(CYGPATH_W) 'amqp/amqpnotificationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqpnotificationinterface.cpp'; fi`

amqp/libbitcoin_proton_a-amqppublishnotifier.o: amqp/amqppublishnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqppublishnotifier.o -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Tpo -c -o amqp/libbitcoin_proton_a-amqppublishnotifier.o `test -f 'amqp/amqppublishnotifier.cpp' || echo '$(srcdir)/'`amqp/amqppublishnotifier.cpp
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Po
#	$(AM_V_CXX)source='amqp/amqppublishnotifier.cpp' object='amqp/libbitcoin_proton_a-amqppublishnotifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqppublishnotifier.o `test -f 'amqp/amqppublishnotifier.cpp' || echo '$(srcdir)/'`amqp/amqppublishnotifier.cpp

amqp/libbitcoin_proton_a-amqppublishnotifier.obj: amqp/amqppublishnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -MT amqp/libbitcoin_proton_a-amqppublishnotifier.obj -MD -MP -MF amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Tpo -c -o amqp/libbitcoin_proton_a-amqppublishnotifier.obj `if test -f 'amqp/amqppublishnotifier.cpp'; then $(CYGPATH_W) 'amqp/amqppublishnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqppublishnotifier.cpp'; fi`
	$(AM_V_at)$(am__mv) amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Tpo amqp/$(DEPDIR)/libbitcoin_proton_a-amqppublishnotifier.Po
#	$(AM_V_CXX)source='amqp/amqppublishnotifier.cpp' object='amqp/libbitcoin_proton_a-amqppublishnotifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_proton_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_proton_a_CXXFLAGS) $(CXXFLAGS) -c -o amqp/libbitcoin_proton_a-amqppublishnotifier.obj `if test -f 'amqp/amqppublishnotifier.cpp'; then $(CYGPATH_W) 'amqp/amqppublishnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/amqp/amqppublishnotifier.cpp'; fi`

libbitcoin_server_a-sendalert.o: sendalert.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-sendalert.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-sendalert.Tpo -c -o libbitcoin_server_a-sendalert.o `test -f 'sendalert.cpp' || echo '$(srcdir)/'`sendalert.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-sendalert.Tpo $(DEPDIR)/libbitcoin_server_a-sendalert.Po
#	$(AM_V_CXX)source='sendalert.cpp' object='libbitcoin_server_a-sendalert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-sendalert.o `test -f 'sendalert.cpp' || echo '$(srcdir)/'`sendalert.cpp

libbitcoin_server_a-sendalert.obj: sendalert.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-sendalert.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-sendalert.Tpo -c -o libbitcoin_server_a-sendalert.obj `if test -f 'sendalert.cpp'; then $(CYGPATH_W) 'sendalert.cpp'; else $(CYGPATH_W) '$(srcdir)/sendalert.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-sendalert.Tpo $(DEPDIR)/libbitcoin_server_a-sendalert.Po
#	$(AM_V_CXX)source='sendalert.cpp' object='libbitcoin_server_a-sendalert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-sendalert.obj `if test -f 'sendalert.cpp'; then $(CYGPATH_W) 'sendalert.cpp'; else $(CYGPATH_W) '$(srcdir)/sendalert.cpp'; fi`

libbitcoin_server_a-addrman.o: addrman.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-addrman.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-addrman.Tpo -c -o libbitcoin_server_a-addrman.o `test -f 'addrman.cpp' || echo '$(srcdir)/'`addrman.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-addrman.Tpo $(DEPDIR)/libbitcoin_server_a-addrman.Po
#	$(AM_V_CXX)source='addrman.cpp' object='libbitcoin_server_a-addrman.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-addrman.o `test -f 'addrman.cpp' || echo '$(srcdir)/'`addrman.cpp

libbitcoin_server_a-addrman.obj: addrman.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-addrman.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-addrman.Tpo -c -o libbitcoin_server_a-addrman.obj `if test -f 'addrman.cpp'; then $(CYGPATH_W) 'addrman.cpp'; else $(CYGPATH_W) '$(srcdir)/addrman.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-addrman.Tpo $(DEPDIR)/libbitcoin_server_a-addrman.Po
#	$(AM_V_CXX)source='addrman.cpp' object='libbitcoin_server_a-addrman.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-addrman.obj `if test -f 'addrman.cpp'; then $(CYGPATH_W) 'addrman.cpp'; else $(CYGPATH_W) '$(srcdir)/addrman.cpp'; fi`

libbitcoin_server_a-alert.o: alert.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-alert.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-alert.Tpo -c -o libbitcoin_server_a-alert.o `test -f 'alert.cpp' || echo '$(srcdir)/'`alert.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-alert.Tpo $(DEPDIR)/libbitcoin_server_a-alert.Po
#	$(AM_V_CXX)source='alert.cpp' object='libbitcoin_server_a-alert.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-alert.o `test -f 'alert.cpp' || echo '$(srcdir)/'`alert.cpp

libbitcoin_server_a-alert.obj: alert.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-alert.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-alert.Tpo -c -o libbitcoin_server_a-alert.obj `if test -f 'alert.cpp'; then $(CYGPATH_W) 'alert.cpp'; else $(CYGPATH_W) '$(srcdir)/alert.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-alert.Tpo $(DEPDIR)/libbitcoin_server_a-alert.Po
#	$(AM_V_CXX)source='alert.cpp' object='libbitcoin_server_a-alert.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-alert.obj `if test -f 'alert.cpp'; then $(CYGPATH_W) 'alert.cpp'; else $(CYGPATH_W) '$(srcdir)/alert.cpp'; fi`

libbitcoin_server_a-asyncrpcoperation.o: asyncrpcoperation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-asyncrpcoperation.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Tpo -c -o libbitcoin_server_a-asyncrpcoperation.o `test -f 'asyncrpcoperation.cpp' || echo '$(srcdir)/'`asyncrpcoperation.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Tpo $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Po
#	$(AM_V_CXX)source='asyncrpcoperation.cpp' object='libbitcoin_server_a-asyncrpcoperation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-asyncrpcoperation.o `test -f 'asyncrpcoperation.cpp' || echo '$(srcdir)/'`asyncrpcoperation.cpp

libbitcoin_server_a-asyncrpcoperation.obj: asyncrpcoperation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-asyncrpcoperation.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Tpo -c -o libbitcoin_server_a-asyncrpcoperation.obj `if test -f 'asyncrpcoperation.cpp'; then $(CYGPATH_W) 'asyncrpcoperation.cpp'; else $(CYGPATH_W) '$(srcdir)/asyncrpcoperation.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Tpo $(DEPDIR)/libbitcoin_server_a-asyncrpcoperation.Po
#	$(AM_V_CXX)source='asyncrpcoperation.cpp' object='libbitcoin_server_a-asyncrpcoperation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-asyncrpcoperation.obj `if test -f 'asyncrpcoperation.cpp'; then $(CYGPATH_W) 'asyncrpcoperation.cpp'; else $(CYGPATH_W) '$(srcdir)/asyncrpcoperation.cpp'; fi`

libbitcoin_server_a-asyncrpcqueue.o: asyncrpcqueue.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-asyncrpcqueue.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Tpo -c -o libbitcoin_server_a-asyncrpcqueue.o `test -f 'asyncrpcqueue.cpp' || echo '$(srcdir)/'`asyncrpcqueue.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Tpo $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Po
#	$(AM_V_CXX)source='asyncrpcqueue.cpp' object='libbitcoin_server_a-asyncrpcqueue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-asyncrpcqueue.o `test -f 'asyncrpcqueue.cpp' || echo '$(srcdir)/'`asyncrpcqueue.cpp

libbitcoin_server_a-asyncrpcqueue.obj: asyncrpcqueue.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-asyncrpcqueue.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Tpo -c -o libbitcoin_server_a-asyncrpcqueue.obj `if test -f 'asyncrpcqueue.cpp'; then $(CYGPATH_W) 'asyncrpcqueue.cpp'; else $(CYGPATH_W) '$(srcdir)/asyncrpcqueue.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Tpo $(DEPDIR)/libbitcoin_server_a-asyncrpcqueue.Po
#	$(AM_V_CXX)source='asyncrpcqueue.cpp' object='libbitcoin_server_a-asyncrpcqueue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-asyncrpcqueue.obj `if test -f 'asyncrpcqueue.cpp'; then $(CYGPATH_W) 'asyncrpcqueue.cpp'; else $(CYGPATH_W) '$(srcdir)/asyncrpcqueue.cpp'; fi`

libbitcoin_server_a-bloom.o: bloom.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-bloom.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-bloom.Tpo -c -o libbitcoin_server_a-bloom.o `test -f 'bloom.cpp' || echo '$(srcdir)/'`bloom.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-bloom.Tpo $(DEPDIR)/libbitcoin_server_a-bloom.Po
#	$(AM_V_CXX)source='bloom.cpp' object='libbitcoin_server_a-bloom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-bloom.o `test -f 'bloom.cpp' || echo '$(srcdir)/'`bloom.cpp

libbitcoin_server_a-bloom.obj: bloom.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-bloom.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-bloom.Tpo -c -o libbitcoin_server_a-bloom.obj `if test -f 'bloom.cpp'; then $(CYGPATH_W) 'bloom.cpp'; else $(CYGPATH_W) '$(srcdir)/bloom.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-bloom.Tpo $(DEPDIR)/libbitcoin_server_a-bloom.Po
#	$(AM_V_CXX)source='bloom.cpp' object='libbitcoin_server_a-bloom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-bloom.obj `if test -f 'bloom.cpp'; then $(CYGPATH_W) 'bloom.cpp'; else $(CYGPATH_W) '$(srcdir)/bloom.cpp'; fi`

libbitcoin_server_a-chain.o: chain.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-chain.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-chain.Tpo -c -o libbitcoin_server_a-chain.o `test -f 'chain.cpp' || echo '$(srcdir)/'`chain.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-chain.Tpo $(DEPDIR)/libbitcoin_server_a-chain.Po
#	$(AM_V_CXX)source='chain.cpp' object='libbitcoin_server_a-chain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-chain.o `test -f 'chain.cpp' || echo '$(srcdir)/'`chain.cpp

libbitcoin_server_a-chain.obj: chain.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-chain.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-chain.Tpo -c -o libbitcoin_server_a-chain.obj `if test -f 'chain.cpp'; then $(CYGPATH_W) 'chain.cpp'; else $(CYGPATH_W) '$(srcdir)/chain.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-chain.Tpo $(DEPDIR)/libbitcoin_server_a-chain.Po
#	$(AM_V_CXX)source='chain.cpp' object='libbitcoin_server_a-chain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-chain.obj `if test -f 'chain.cpp'; then $(CYGPATH_W) 'chain.cpp'; else $(CYGPATH_W) '$(srcdir)/chain.cpp'; fi`

libbitcoin_server_a-checkpoints.o: checkpoints.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-checkpoints.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-checkpoints.Tpo -c -o libbitcoin_server_a-checkpoints.o `test -f 'checkpoints.cpp' || echo '$(srcdir)/'`checkpoints.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-checkpoints.Tpo $(DEPDIR)/libbitcoin_server_a-checkpoints.Po
#	$(AM_V_CXX)source='checkpoints.cpp' object='libbitcoin_server_a-checkpoints.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-checkpoints.o `test -f 'checkpoints.cpp' || echo '$(srcdir)/'`checkpoints.cpp

libbitcoin_server_a-checkpoints.obj: checkpoints.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-checkpoints.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-checkpoints.Tpo -c -o libbitcoin_server_a-checkpoints.obj `if test -f 'checkpoints.cpp'; then $(CYGPATH_W) 'checkpoints.cpp'; else $(CYGPATH_W) '$(srcdir)/checkpoints.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-checkpoints.Tpo $(DEPDIR)/libbitcoin_server_a-checkpoints.Po
#	$(AM_V_CXX)source='checkpoints.cpp' object='libbitcoin_server_a-checkpoints.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-checkpoints.obj `if test -f 'checkpoints.cpp'; then $(CYGPATH_W) 'checkpoints.cpp'; else $(CYGPATH_W) '$(srcdir)/checkpoints.cpp'; fi`

libbitcoin_server_a-deprecation.o: deprecation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-deprecation.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-deprecation.Tpo -c -o libbitcoin_server_a-deprecation.o `test -f 'deprecation.cpp' || echo '$(srcdir)/'`deprecation.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-deprecation.Tpo $(DEPDIR)/libbitcoin_server_a-deprecation.Po
#	$(AM_V_CXX)source='deprecation.cpp' object='libbitcoin_server_a-deprecation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-deprecation.o `test -f 'deprecation.cpp' || echo '$(srcdir)/'`deprecation.cpp

libbitcoin_server_a-deprecation.obj: deprecation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-deprecation.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-deprecation.Tpo -c -o libbitcoin_server_a-deprecation.obj `if test -f 'deprecation.cpp'; then $(CYGPATH_W) 'deprecation.cpp'; else $(CYGPATH_W) '$(srcdir)/deprecation.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-deprecation.Tpo $(DEPDIR)/libbitcoin_server_a-deprecation.Po
#	$(AM_V_CXX)source='deprecation.cpp' object='libbitcoin_server_a-deprecation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-deprecation.obj `if test -f 'deprecation.cpp'; then $(CYGPATH_W) 'deprecation.cpp'; else $(CYGPATH_W) '$(srcdir)/deprecation.cpp'; fi`

libbitcoin_server_a-httprpc.o: httprpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-httprpc.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-httprpc.Tpo -c -o libbitcoin_server_a-httprpc.o `test -f 'httprpc.cpp' || echo '$(srcdir)/'`httprpc.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-httprpc.Tpo $(DEPDIR)/libbitcoin_server_a-httprpc.Po
#	$(AM_V_CXX)source='httprpc.cpp' object='libbitcoin_server_a-httprpc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-httprpc.o `test -f 'httprpc.cpp' || echo '$(srcdir)/'`httprpc.cpp

libbitcoin_server_a-httprpc.obj: httprpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-httprpc.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-httprpc.Tpo -c -o libbitcoin_server_a-httprpc.obj `if test -f 'httprpc.cpp'; then $(CYGPATH_W) 'httprpc.cpp'; else $(CYGPATH_W) '$(srcdir)/httprpc.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-httprpc.Tpo $(DEPDIR)/libbitcoin_server_a-httprpc.Po
#	$(AM_V_CXX)source='httprpc.cpp' object='libbitcoin_server_a-httprpc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-httprpc.obj `if test -f 'httprpc.cpp'; then $(CYGPATH_W) 'httprpc.cpp'; else $(CYGPATH_W) '$(srcdir)/httprpc.cpp'; fi`

libbitcoin_server_a-httpserver.o: httpserver.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-httpserver.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-httpserver.Tpo -c -o libbitcoin_server_a-httpserver.o `test -f 'httpserver.cpp' || echo '$(srcdir)/'`httpserver.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-httpserver.Tpo $(DEPDIR)/libbitcoin_server_a-httpserver.Po
#	$(AM_V_CXX)source='httpserver.cpp' object='libbitcoin_server_a-httpserver.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-httpserver.o `test -f 'httpserver.cpp' || echo '$(srcdir)/'`httpserver.cpp

libbitcoin_server_a-httpserver.obj: httpserver.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-httpserver.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-httpserver.Tpo -c -o libbitcoin_server_a-httpserver.obj `if test -f 'httpserver.cpp'; then $(CYGPATH_W) 'httpserver.cpp'; else $(CYGPATH_W) '$(srcdir)/httpserver.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-httpserver.Tpo $(DEPDIR)/libbitcoin_server_a-httpserver.Po
#	$(AM_V_CXX)source='httpserver.cpp' object='libbitcoin_server_a-httpserver.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-httpserver.obj `if test -f 'httpserver.cpp'; then $(CYGPATH_W) 'httpserver.cpp'; else $(CYGPATH_W) '$(srcdir)/httpserver.cpp'; fi`

libbitcoin_server_a-init.o: init.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-init.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-init.Tpo -c -o libbitcoin_server_a-init.o `test -f 'init.cpp' || echo '$(srcdir)/'`init.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-init.Tpo $(DEPDIR)/libbitcoin_server_a-init.Po
#	$(AM_V_CXX)source='init.cpp' object='libbitcoin_server_a-init.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-init.o `test -f 'init.cpp' || echo '$(srcdir)/'`init.cpp

libbitcoin_server_a-init.obj: init.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-init.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-init.Tpo -c -o libbitcoin_server_a-init.obj `if test -f 'init.cpp'; then $(CYGPATH_W) 'init.cpp'; else $(CYGPATH_W) '$(srcdir)/init.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-init.Tpo $(DEPDIR)/libbitcoin_server_a-init.Po
#	$(AM_V_CXX)source='init.cpp' object='libbitcoin_server_a-init.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-init.obj `if test -f 'init.cpp'; then $(CYGPATH_W) 'init.cpp'; else $(CYGPATH_W) '$(srcdir)/init.cpp'; fi`

libbitcoin_server_a-leveldbwrapper.o: leveldbwrapper.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-leveldbwrapper.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Tpo -c -o libbitcoin_server_a-leveldbwrapper.o `test -f 'leveldbwrapper.cpp' || echo '$(srcdir)/'`leveldbwrapper.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Tpo $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Po
#	$(AM_V_CXX)source='leveldbwrapper.cpp' object='libbitcoin_server_a-leveldbwrapper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-leveldbwrapper.o `test -f 'leveldbwrapper.cpp' || echo '$(srcdir)/'`leveldbwrapper.cpp

libbitcoin_server_a-leveldbwrapper.obj: leveldbwrapper.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-leveldbwrapper.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Tpo -c -o libbitcoin_server_a-leveldbwrapper.obj `if test -f 'leveldbwrapper.cpp'; then $(CYGPATH_W) 'leveldbwrapper.cpp'; else $(CYGPATH_W) '$(srcdir)/leveldbwrapper.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Tpo $(DEPDIR)/libbitcoin_server_a-leveldbwrapper.Po
#	$(AM_V_CXX)source='leveldbwrapper.cpp' object='libbitcoin_server_a-leveldbwrapper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-leveldbwrapper.obj `if test -f 'leveldbwrapper.cpp'; then $(CYGPATH_W) 'leveldbwrapper.cpp'; else $(CYGPATH_W) '$(srcdir)/leveldbwrapper.cpp'; fi`

libbitcoin_server_a-main.o: main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-main.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-main.Tpo -c -o libbitcoin_server_a-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-main.Tpo $(DEPDIR)/libbitcoin_server_a-main.Po
#	$(AM_V_CXX)source='main.cpp' object='libbitcoin_server_a-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-main.o `test -f 'main.cpp' || echo '$(srcdir)/'`main.cpp

libbitcoin_server_a-main.obj: main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-main.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-main.Tpo -c -o libbitcoin_server_a-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-main.Tpo $(DEPDIR)/libbitcoin_server_a-main.Po
#	$(AM_V_CXX)source='main.cpp' object='libbitcoin_server_a-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-main.obj `if test -f 'main.cpp'; then $(CYGPATH_W) 'main.cpp'; else $(CYGPATH_W) '$(srcdir)/main.cpp'; fi`

libbitcoin_server_a-merkleblock.o: merkleblock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-merkleblock.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-merkleblock.Tpo -c -o libbitcoin_server_a-merkleblock.o `test -f 'merkleblock.cpp' || echo '$(srcdir)/'`merkleblock.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-merkleblock.Tpo $(DEPDIR)/libbitcoin_server_a-merkleblock.Po
#	$(AM_V_CXX)source='merkleblock.cpp' object='libbitcoin_server_a-merkleblock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-merkleblock.o `test -f 'merkleblock.cpp' || echo '$(srcdir)/'`merkleblock.cpp

libbitcoin_server_a-merkleblock.obj: merkleblock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-merkleblock.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-merkleblock.Tpo -c -o libbitcoin_server_a-merkleblock.obj `if test -f 'merkleblock.cpp'; then $(CYGPATH_W) 'merkleblock.cpp'; else $(CYGPATH_W) '$(srcdir)/merkleblock.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-merkleblock.Tpo $(DEPDIR)/libbitcoin_server_a-merkleblock.Po
#	$(AM_V_CXX)source='merkleblock.cpp' object='libbitcoin_server_a-merkleblock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-merkleblock.obj `if test -f 'merkleblock.cpp'; then $(CYGPATH_W) 'merkleblock.cpp'; else $(CYGPATH_W) '$(srcdir)/merkleblock.cpp'; fi`

libbitcoin_server_a-metrics.o: metrics.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-metrics.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-metrics.Tpo -c -o libbitcoin_server_a-metrics.o `test -f 'metrics.cpp' || echo '$(srcdir)/'`metrics.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-metrics.Tpo $(DEPDIR)/libbitcoin_server_a-metrics.Po
#	$(AM_V_CXX)source='metrics.cpp' object='libbitcoin_server_a-metrics.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-metrics.o `test -f 'metrics.cpp' || echo '$(srcdir)/'`metrics.cpp

libbitcoin_server_a-metrics.obj: metrics.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-metrics.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-metrics.Tpo -c -o libbitcoin_server_a-metrics.obj `if test -f 'metrics.cpp'; then $(CYGPATH_W) 'metrics.cpp'; else $(CYGPATH_W) '$(srcdir)/metrics.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-metrics.Tpo $(DEPDIR)/libbitcoin_server_a-metrics.Po
#	$(AM_V_CXX)source='metrics.cpp' object='libbitcoin_server_a-metrics.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-metrics.obj `if test -f 'metrics.cpp'; then $(CYGPATH_W) 'metrics.cpp'; else $(CYGPATH_W) '$(srcdir)/metrics.cpp'; fi`

libbitcoin_server_a-miner.o: miner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-miner.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-miner.Tpo -c -o libbitcoin_server_a-miner.o `test -f 'miner.cpp' || echo '$(srcdir)/'`miner.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-miner.Tpo $(DEPDIR)/libbitcoin_server_a-miner.Po
#	$(AM_V_CXX)source='miner.cpp' object='libbitcoin_server_a-miner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-miner.o `test -f 'miner.cpp' || echo '$(srcdir)/'`miner.cpp

libbitcoin_server_a-miner.obj: miner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-miner.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-miner.Tpo -c -o libbitcoin_server_a-miner.obj `if test -f 'miner.cpp'; then $(CYGPATH_W) 'miner.cpp'; else $(CYGPATH_W) '$(srcdir)/miner.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-miner.Tpo $(DEPDIR)/libbitcoin_server_a-miner.Po
#	$(AM_V_CXX)source='miner.cpp' object='libbitcoin_server_a-miner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-miner.obj `if test -f 'miner.cpp'; then $(CYGPATH_W) 'miner.cpp'; else $(CYGPATH_W) '$(srcdir)/miner.cpp'; fi`

libbitcoin_server_a-net.o: net.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-net.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-net.Tpo -c -o libbitcoin_server_a-net.o `test -f 'net.cpp' || echo '$(srcdir)/'`net.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-net.Tpo $(DEPDIR)/libbitcoin_server_a-net.Po
#	$(AM_V_CXX)source='net.cpp' object='libbitcoin_server_a-net.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-net.o `test -f 'net.cpp' || echo '$(srcdir)/'`net.cpp

libbitcoin_server_a-net.obj: net.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-net.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-net.Tpo -c -o libbitcoin_server_a-net.obj `if test -f 'net.cpp'; then $(CYGPATH_W) 'net.cpp'; else $(CYGPATH_W) '$(srcdir)/net.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-net.Tpo $(DEPDIR)/libbitcoin_server_a-net.Po
#	$(AM_V_CXX)source='net.cpp' object='libbitcoin_server_a-net.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-net.obj `if test -f 'net.cpp'; then $(CYGPATH_W) 'net.cpp'; else $(CYGPATH_W) '$(srcdir)/net.cpp'; fi`

libbitcoin_server_a-noui.o: noui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-noui.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-noui.Tpo -c -o libbitcoin_server_a-noui.o `test -f 'noui.cpp' || echo '$(srcdir)/'`noui.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-noui.Tpo $(DEPDIR)/libbitcoin_server_a-noui.Po
#	$(AM_V_CXX)source='noui.cpp' object='libbitcoin_server_a-noui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-noui.o `test -f 'noui.cpp' || echo '$(srcdir)/'`noui.cpp

libbitcoin_server_a-noui.obj: noui.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-noui.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-noui.Tpo -c -o libbitcoin_server_a-noui.obj `if test -f 'noui.cpp'; then $(CYGPATH_W) 'noui.cpp'; else $(CYGPATH_W) '$(srcdir)/noui.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-noui.Tpo $(DEPDIR)/libbitcoin_server_a-noui.Po
#	$(AM_V_CXX)source='noui.cpp' object='libbitcoin_server_a-noui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-noui.obj `if test -f 'noui.cpp'; then $(CYGPATH_W) 'noui.cpp'; else $(CYGPATH_W) '$(srcdir)/noui.cpp'; fi`

libbitcoin_server_a-paymentdisclosure.o: paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-paymentdisclosure.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Tpo -c -o libbitcoin_server_a-paymentdisclosure.o `test -f 'paymentdisclosure.cpp' || echo '$(srcdir)/'`paymentdisclosure.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Tpo $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Po
#	$(AM_V_CXX)source='paymentdisclosure.cpp' object='libbitcoin_server_a-paymentdisclosure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-paymentdisclosure.o `test -f 'paymentdisclosure.cpp' || echo '$(srcdir)/'`paymentdisclosure.cpp

libbitcoin_server_a-paymentdisclosure.obj: paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-paymentdisclosure.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Tpo -c -o libbitcoin_server_a-paymentdisclosure.obj `if test -f 'paymentdisclosure.cpp'; then $(CYGPATH_W) 'paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosure.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Tpo $(DEPDIR)/libbitcoin_server_a-paymentdisclosure.Po
#	$(AM_V_CXX)source='paymentdisclosure.cpp' object='libbitcoin_server_a-paymentdisclosure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-paymentdisclosure.obj `if test -f 'paymentdisclosure.cpp'; then $(CYGPATH_W) 'paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosure.cpp'; fi`

libbitcoin_server_a-paymentdisclosuredb.o: paymentdisclosuredb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-paymentdisclosuredb.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Tpo -c -o libbitcoin_server_a-paymentdisclosuredb.o `test -f 'paymentdisclosuredb.cpp' || echo '$(srcdir)/'`paymentdisclosuredb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Tpo $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Po
#	$(AM_V_CXX)source='paymentdisclosuredb.cpp' object='libbitcoin_server_a-paymentdisclosuredb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-paymentdisclosuredb.o `test -f 'paymentdisclosuredb.cpp' || echo '$(srcdir)/'`paymentdisclosuredb.cpp

libbitcoin_server_a-paymentdisclosuredb.obj: paymentdisclosuredb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-paymentdisclosuredb.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Tpo -c -o libbitcoin_server_a-paymentdisclosuredb.obj `if test -f 'paymentdisclosuredb.cpp'; then $(CYGPATH_W) 'paymentdisclosuredb.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosuredb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Tpo $(DEPDIR)/libbitcoin_server_a-paymentdisclosuredb.Po
#	$(AM_V_CXX)source='paymentdisclosuredb.cpp' object='libbitcoin_server_a-paymentdisclosuredb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-paymentdisclosuredb.obj `if test -f 'paymentdisclosuredb.cpp'; then $(CYGPATH_W) 'paymentdisclosuredb.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosuredb.cpp'; fi`

policy/libbitcoin_server_a-fees.o: policy/fees.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT policy/libbitcoin_server_a-fees.o -MD -MP -MF policy/$(DEPDIR)/libbitcoin_server_a-fees.Tpo -c -o policy/libbitcoin_server_a-fees.o `test -f 'policy/fees.cpp' || echo '$(srcdir)/'`policy/fees.cpp
	$(AM_V_at)$(am__mv) policy/$(DEPDIR)/libbitcoin_server_a-fees.Tpo policy/$(DEPDIR)/libbitcoin_server_a-fees.Po
#	$(AM_V_CXX)source='policy/fees.cpp' object='policy/libbitcoin_server_a-fees.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o policy/libbitcoin_server_a-fees.o `test -f 'policy/fees.cpp' || echo '$(srcdir)/'`policy/fees.cpp

policy/libbitcoin_server_a-fees.obj: policy/fees.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT policy/libbitcoin_server_a-fees.obj -MD -MP -MF policy/$(DEPDIR)/libbitcoin_server_a-fees.Tpo -c -o policy/libbitcoin_server_a-fees.obj `if test -f 'policy/fees.cpp'; then $(CYGPATH_W) 'policy/fees.cpp'; else $(CYGPATH_W) '$(srcdir)/policy/fees.cpp'; fi`
	$(AM_V_at)$(am__mv) policy/$(DEPDIR)/libbitcoin_server_a-fees.Tpo policy/$(DEPDIR)/libbitcoin_server_a-fees.Po
#	$(AM_V_CXX)source='policy/fees.cpp' object='policy/libbitcoin_server_a-fees.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o policy/libbitcoin_server_a-fees.obj `if test -f 'policy/fees.cpp'; then $(CYGPATH_W) 'policy/fees.cpp'; else $(CYGPATH_W) '$(srcdir)/policy/fees.cpp'; fi`

libbitcoin_server_a-pow.o: pow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-pow.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-pow.Tpo -c -o libbitcoin_server_a-pow.o `test -f 'pow.cpp' || echo '$(srcdir)/'`pow.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-pow.Tpo $(DEPDIR)/libbitcoin_server_a-pow.Po
#	$(AM_V_CXX)source='pow.cpp' object='libbitcoin_server_a-pow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-pow.o `test -f 'pow.cpp' || echo '$(srcdir)/'`pow.cpp

libbitcoin_server_a-pow.obj: pow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-pow.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-pow.Tpo -c -o libbitcoin_server_a-pow.obj `if test -f 'pow.cpp'; then $(CYGPATH_W) 'pow.cpp'; else $(CYGPATH_W) '$(srcdir)/pow.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-pow.Tpo $(DEPDIR)/libbitcoin_server_a-pow.Po
#	$(AM_V_CXX)source='pow.cpp' object='libbitcoin_server_a-pow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-pow.obj `if test -f 'pow.cpp'; then $(CYGPATH_W) 'pow.cpp'; else $(CYGPATH_W) '$(srcdir)/pow.cpp'; fi`

libbitcoin_server_a-rest.o: rest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rest.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rest.Tpo -c -o libbitcoin_server_a-rest.o `test -f 'rest.cpp' || echo '$(srcdir)/'`rest.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rest.Tpo $(DEPDIR)/libbitcoin_server_a-rest.Po
#	$(AM_V_CXX)source='rest.cpp' object='libbitcoin_server_a-rest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rest.o `test -f 'rest.cpp' || echo '$(srcdir)/'`rest.cpp

libbitcoin_server_a-rest.obj: rest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rest.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rest.Tpo -c -o libbitcoin_server_a-rest.obj `if test -f 'rest.cpp'; then $(CYGPATH_W) 'rest.cpp'; else $(CYGPATH_W) '$(srcdir)/rest.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rest.Tpo $(DEPDIR)/libbitcoin_server_a-rest.Po
#	$(AM_V_CXX)source='rest.cpp' object='libbitcoin_server_a-rest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rest.obj `if test -f 'rest.cpp'; then $(CYGPATH_W) 'rest.cpp'; else $(CYGPATH_W) '$(srcdir)/rest.cpp'; fi`

libbitcoin_server_a-rpcblockchain.o: rpcblockchain.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcblockchain.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Tpo -c -o libbitcoin_server_a-rpcblockchain.o `test -f 'rpcblockchain.cpp' || echo '$(srcdir)/'`rpcblockchain.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Tpo $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Po
#	$(AM_V_CXX)source='rpcblockchain.cpp' object='libbitcoin_server_a-rpcblockchain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcblockchain.o `test -f 'rpcblockchain.cpp' || echo '$(srcdir)/'`rpcblockchain.cpp

libbitcoin_server_a-rpcblockchain.obj: rpcblockchain.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcblockchain.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Tpo -c -o libbitcoin_server_a-rpcblockchain.obj `if test -f 'rpcblockchain.cpp'; then $(CYGPATH_W) 'rpcblockchain.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcblockchain.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Tpo $(DEPDIR)/libbitcoin_server_a-rpcblockchain.Po
#	$(AM_V_CXX)source='rpcblockchain.cpp' object='libbitcoin_server_a-rpcblockchain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcblockchain.obj `if test -f 'rpcblockchain.cpp'; then $(CYGPATH_W) 'rpcblockchain.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcblockchain.cpp'; fi`

libbitcoin_server_a-rpcmining.o: rpcmining.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcmining.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcmining.Tpo -c -o libbitcoin_server_a-rpcmining.o `test -f 'rpcmining.cpp' || echo '$(srcdir)/'`rpcmining.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcmining.Tpo $(DEPDIR)/libbitcoin_server_a-rpcmining.Po
#	$(AM_V_CXX)source='rpcmining.cpp' object='libbitcoin_server_a-rpcmining.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcmining.o `test -f 'rpcmining.cpp' || echo '$(srcdir)/'`rpcmining.cpp

libbitcoin_server_a-rpcmining.obj: rpcmining.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcmining.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcmining.Tpo -c -o libbitcoin_server_a-rpcmining.obj `if test -f 'rpcmining.cpp'; then $(CYGPATH_W) 'rpcmining.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcmining.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcmining.Tpo $(DEPDIR)/libbitcoin_server_a-rpcmining.Po
#	$(AM_V_CXX)source='rpcmining.cpp' object='libbitcoin_server_a-rpcmining.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcmining.obj `if test -f 'rpcmining.cpp'; then $(CYGPATH_W) 'rpcmining.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcmining.cpp'; fi`

libbitcoin_server_a-rpcmisc.o: rpcmisc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcmisc.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcmisc.Tpo -c -o libbitcoin_server_a-rpcmisc.o `test -f 'rpcmisc.cpp' || echo '$(srcdir)/'`rpcmisc.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcmisc.Tpo $(DEPDIR)/libbitcoin_server_a-rpcmisc.Po
#	$(AM_V_CXX)source='rpcmisc.cpp' object='libbitcoin_server_a-rpcmisc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcmisc.o `test -f 'rpcmisc.cpp' || echo '$(srcdir)/'`rpcmisc.cpp

libbitcoin_server_a-rpcmisc.obj: rpcmisc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcmisc.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcmisc.Tpo -c -o libbitcoin_server_a-rpcmisc.obj `if test -f 'rpcmisc.cpp'; then $(CYGPATH_W) 'rpcmisc.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcmisc.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcmisc.Tpo $(DEPDIR)/libbitcoin_server_a-rpcmisc.Po
#	$(AM_V_CXX)source='rpcmisc.cpp' object='libbitcoin_server_a-rpcmisc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcmisc.obj `if test -f 'rpcmisc.cpp'; then $(CYGPATH_W) 'rpcmisc.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcmisc.cpp'; fi`

libbitcoin_server_a-rpcnet.o: rpcnet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcnet.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcnet.Tpo -c -o libbitcoin_server_a-rpcnet.o `test -f 'rpcnet.cpp' || echo '$(srcdir)/'`rpcnet.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcnet.Tpo $(DEPDIR)/libbitcoin_server_a-rpcnet.Po
#	$(AM_V_CXX)source='rpcnet.cpp' object='libbitcoin_server_a-rpcnet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcnet.o `test -f 'rpcnet.cpp' || echo '$(srcdir)/'`rpcnet.cpp

libbitcoin_server_a-rpcnet.obj: rpcnet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcnet.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcnet.Tpo -c -o libbitcoin_server_a-rpcnet.obj `if test -f 'rpcnet.cpp'; then $(CYGPATH_W) 'rpcnet.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcnet.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcnet.Tpo $(DEPDIR)/libbitcoin_server_a-rpcnet.Po
#	$(AM_V_CXX)source='rpcnet.cpp' object='libbitcoin_server_a-rpcnet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcnet.obj `if test -f 'rpcnet.cpp'; then $(CYGPATH_W) 'rpcnet.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcnet.cpp'; fi`

libbitcoin_server_a-rpcrawtransaction.o: rpcrawtransaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcrawtransaction.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Tpo -c -o libbitcoin_server_a-rpcrawtransaction.o `test -f 'rpcrawtransaction.cpp' || echo '$(srcdir)/'`rpcrawtransaction.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Tpo $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Po
#	$(AM_V_CXX)source='rpcrawtransaction.cpp' object='libbitcoin_server_a-rpcrawtransaction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcrawtransaction.o `test -f 'rpcrawtransaction.cpp' || echo '$(srcdir)/'`rpcrawtransaction.cpp

libbitcoin_server_a-rpcrawtransaction.obj: rpcrawtransaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcrawtransaction.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Tpo -c -o libbitcoin_server_a-rpcrawtransaction.obj `if test -f 'rpcrawtransaction.cpp'; then $(CYGPATH_W) 'rpcrawtransaction.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcrawtransaction.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Tpo $(DEPDIR)/libbitcoin_server_a-rpcrawtransaction.Po
#	$(AM_V_CXX)source='rpcrawtransaction.cpp' object='libbitcoin_server_a-rpcrawtransaction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcrawtransaction.obj `if test -f 'rpcrawtransaction.cpp'; then $(CYGPATH_W) 'rpcrawtransaction.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcrawtransaction.cpp'; fi`

libbitcoin_server_a-rpcserver.o: rpcserver.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcserver.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcserver.Tpo -c -o libbitcoin_server_a-rpcserver.o `test -f 'rpcserver.cpp' || echo '$(srcdir)/'`rpcserver.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcserver.Tpo $(DEPDIR)/libbitcoin_server_a-rpcserver.Po
#	$(AM_V_CXX)source='rpcserver.cpp' object='libbitcoin_server_a-rpcserver.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcserver.o `test -f 'rpcserver.cpp' || echo '$(srcdir)/'`rpcserver.cpp

libbitcoin_server_a-rpcserver.obj: rpcserver.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-rpcserver.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-rpcserver.Tpo -c -o libbitcoin_server_a-rpcserver.obj `if test -f 'rpcserver.cpp'; then $(CYGPATH_W) 'rpcserver.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcserver.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-rpcserver.Tpo $(DEPDIR)/libbitcoin_server_a-rpcserver.Po
#	$(AM_V_CXX)source='rpcserver.cpp' object='libbitcoin_server_a-rpcserver.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-rpcserver.obj `if test -f 'rpcserver.cpp'; then $(CYGPATH_W) 'rpcserver.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcserver.cpp'; fi`

script/libbitcoin_server_a-sigcache.o: script/sigcache.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_server_a-sigcache.o -MD -MP -MF script/$(DEPDIR)/libbitcoin_server_a-sigcache.Tpo -c -o script/libbitcoin_server_a-sigcache.o `test -f 'script/sigcache.cpp' || echo '$(srcdir)/'`script/sigcache.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_server_a-sigcache.Tpo script/$(DEPDIR)/libbitcoin_server_a-sigcache.Po
#	$(AM_V_CXX)source='script/sigcache.cpp' object='script/libbitcoin_server_a-sigcache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_server_a-sigcache.o `test -f 'script/sigcache.cpp' || echo '$(srcdir)/'`script/sigcache.cpp

script/libbitcoin_server_a-sigcache.obj: script/sigcache.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT script/libbitcoin_server_a-sigcache.obj -MD -MP -MF script/$(DEPDIR)/libbitcoin_server_a-sigcache.Tpo -c -o script/libbitcoin_server_a-sigcache.obj `if test -f 'script/sigcache.cpp'; then $(CYGPATH_W) 'script/sigcache.cpp'; else $(CYGPATH_W) '$(srcdir)/script/sigcache.cpp'; fi`
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libbitcoin_server_a-sigcache.Tpo script/$(DEPDIR)/libbitcoin_server_a-sigcache.Po
#	$(AM_V_CXX)source='script/sigcache.cpp' object='script/libbitcoin_server_a-sigcache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o script/libbitcoin_server_a-sigcache.obj `if test -f 'script/sigcache.cpp'; then $(CYGPATH_W) 'script/sigcache.cpp'; else $(CYGPATH_W) '$(srcdir)/script/sigcache.cpp'; fi`

libbitcoin_server_a-timedata.o: timedata.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-timedata.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-timedata.Tpo -c -o libbitcoin_server_a-timedata.o `test -f 'timedata.cpp' || echo '$(srcdir)/'`timedata.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-timedata.Tpo $(DEPDIR)/libbitcoin_server_a-timedata.Po
#	$(AM_V_CXX)source='timedata.cpp' object='libbitcoin_server_a-timedata.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-timedata.o `test -f 'timedata.cpp' || echo '$(srcdir)/'`timedata.cpp

libbitcoin_server_a-timedata.obj: timedata.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-timedata.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-timedata.Tpo -c -o libbitcoin_server_a-timedata.obj `if test -f 'timedata.cpp'; then $(CYGPATH_W) 'timedata.cpp'; else $(CYGPATH_W) '$(srcdir)/timedata.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-timedata.Tpo $(DEPDIR)/libbitcoin_server_a-timedata.Po
#	$(AM_V_CXX)source='timedata.cpp' object='libbitcoin_server_a-timedata.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-timedata.obj `if test -f 'timedata.cpp'; then $(CYGPATH_W) 'timedata.cpp'; else $(CYGPATH_W) '$(srcdir)/timedata.cpp'; fi`

libbitcoin_server_a-torcontrol.o: torcontrol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-torcontrol.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-torcontrol.Tpo -c -o libbitcoin_server_a-torcontrol.o `test -f 'torcontrol.cpp' || echo '$(srcdir)/'`torcontrol.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-torcontrol.Tpo $(DEPDIR)/libbitcoin_server_a-torcontrol.Po
#	$(AM_V_CXX)source='torcontrol.cpp' object='libbitcoin_server_a-torcontrol.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-torcontrol.o `test -f 'torcontrol.cpp' || echo '$(srcdir)/'`torcontrol.cpp

libbitcoin_server_a-torcontrol.obj: torcontrol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-torcontrol.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-torcontrol.Tpo -c -o libbitcoin_server_a-torcontrol.obj `if test -f 'torcontrol.cpp'; then $(CYGPATH_W) 'torcontrol.cpp'; else $(CYGPATH_W) '$(srcdir)/torcontrol.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-torcontrol.Tpo $(DEPDIR)/libbitcoin_server_a-torcontrol.Po
#	$(AM_V_CXX)source='torcontrol.cpp' object='libbitcoin_server_a-torcontrol.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-torcontrol.obj `if test -f 'torcontrol.cpp'; then $(CYGPATH_W) 'torcontrol.cpp'; else $(CYGPATH_W) '$(srcdir)/torcontrol.cpp'; fi`

libbitcoin_server_a-txdb.o: txdb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-txdb.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-txdb.Tpo -c -o libbitcoin_server_a-txdb.o `test -f 'txdb.cpp' || echo '$(srcdir)/'`txdb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-txdb.Tpo $(DEPDIR)/libbitcoin_server_a-txdb.Po
#	$(AM_V_CXX)source='txdb.cpp' object='libbitcoin_server_a-txdb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-txdb.o `test -f 'txdb.cpp' || echo '$(srcdir)/'`txdb.cpp

libbitcoin_server_a-txdb.obj: txdb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-txdb.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-txdb.Tpo -c -o libbitcoin_server_a-txdb.obj `if test -f 'txdb.cpp'; then $(CYGPATH_W) 'txdb.cpp'; else $(CYGPATH_W) '$(srcdir)/txdb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-txdb.Tpo $(DEPDIR)/libbitcoin_server_a-txdb.Po
#	$(AM_V_CXX)source='txdb.cpp' object='libbitcoin_server_a-txdb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-txdb.obj `if test -f 'txdb.cpp'; then $(CYGPATH_W) 'txdb.cpp'; else $(CYGPATH_W) '$(srcdir)/txdb.cpp'; fi`

libbitcoin_server_a-txmempool.o: txmempool.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-txmempool.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-txmempool.Tpo -c -o libbitcoin_server_a-txmempool.o `test -f 'txmempool.cpp' || echo '$(srcdir)/'`txmempool.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-txmempool.Tpo $(DEPDIR)/libbitcoin_server_a-txmempool.Po
#	$(AM_V_CXX)source='txmempool.cpp' object='libbitcoin_server_a-txmempool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-txmempool.o `test -f 'txmempool.cpp' || echo '$(srcdir)/'`txmempool.cpp

libbitcoin_server_a-txmempool.obj: txmempool.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-txmempool.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-txmempool.Tpo -c -o libbitcoin_server_a-txmempool.obj `if test -f 'txmempool.cpp'; then $(CYGPATH_W) 'txmempool.cpp'; else $(CYGPATH_W) '$(srcdir)/txmempool.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-txmempool.Tpo $(DEPDIR)/libbitcoin_server_a-txmempool.Po
#	$(AM_V_CXX)source='txmempool.cpp' object='libbitcoin_server_a-txmempool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-txmempool.obj `if test -f 'txmempool.cpp'; then $(CYGPATH_W) 'txmempool.cpp'; else $(CYGPATH_W) '$(srcdir)/txmempool.cpp'; fi`

libbitcoin_server_a-validationinterface.o: validationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-validationinterface.o -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-validationinterface.Tpo -c -o libbitcoin_server_a-validationinterface.o `test -f 'validationinterface.cpp' || echo '$(srcdir)/'`validationinterface.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-validationinterface.Tpo $(DEPDIR)/libbitcoin_server_a-validationinterface.Po
#	$(AM_V_CXX)source='validationinterface.cpp' object='libbitcoin_server_a-validationinterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-validationinterface.o `test -f 'validationinterface.cpp' || echo '$(srcdir)/'`validationinterface.cpp

libbitcoin_server_a-validationinterface.obj: validationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_server_a-validationinterface.obj -MD -MP -MF $(DEPDIR)/libbitcoin_server_a-validationinterface.Tpo -c -o libbitcoin_server_a-validationinterface.obj `if test -f 'validationinterface.cpp'; then $(CYGPATH_W) 'validationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/validationinterface.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_server_a-validationinterface.Tpo $(DEPDIR)/libbitcoin_server_a-validationinterface.Po
#	$(AM_V_CXX)source='validationinterface.cpp' object='libbitcoin_server_a-validationinterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_server_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_server_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_server_a-validationinterface.obj `if test -f 'validationinterface.cpp'; then $(CYGPATH_W) 'validationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/validationinterface.cpp'; fi`

support/libbitcoin_util_a-pagelocker.o: support/pagelocker.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT support/libbitcoin_util_a-pagelocker.o -MD -MP -MF support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Tpo -c -o support/libbitcoin_util_a-pagelocker.o `test -f 'support/pagelocker.cpp' || echo '$(srcdir)/'`support/pagelocker.cpp
	$(AM_V_at)$(am__mv) support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Tpo support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Po
#	$(AM_V_CXX)source='support/pagelocker.cpp' object='support/libbitcoin_util_a-pagelocker.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o support/libbitcoin_util_a-pagelocker.o `test -f 'support/pagelocker.cpp' || echo '$(srcdir)/'`support/pagelocker.cpp

support/libbitcoin_util_a-pagelocker.obj: support/pagelocker.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT support/libbitcoin_util_a-pagelocker.obj -MD -MP -MF support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Tpo -c -o support/libbitcoin_util_a-pagelocker.obj `if test -f 'support/pagelocker.cpp'; then $(CYGPATH_W) 'support/pagelocker.cpp'; else $(CYGPATH_W) '$(srcdir)/support/pagelocker.cpp'; fi`
	$(AM_V_at)$(am__mv) support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Tpo support/$(DEPDIR)/libbitcoin_util_a-pagelocker.Po
#	$(AM_V_CXX)source='support/pagelocker.cpp' object='support/libbitcoin_util_a-pagelocker.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o support/libbitcoin_util_a-pagelocker.obj `if test -f 'support/pagelocker.cpp'; then $(CYGPATH_W) 'support/pagelocker.cpp'; else $(CYGPATH_W) '$(srcdir)/support/pagelocker.cpp'; fi`

libbitcoin_util_a-chainparamsbase.o: chainparamsbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-chainparamsbase.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Tpo -c -o libbitcoin_util_a-chainparamsbase.o `test -f 'chainparamsbase.cpp' || echo '$(srcdir)/'`chainparamsbase.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Tpo $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Po
#	$(AM_V_CXX)source='chainparamsbase.cpp' object='libbitcoin_util_a-chainparamsbase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-chainparamsbase.o `test -f 'chainparamsbase.cpp' || echo '$(srcdir)/'`chainparamsbase.cpp

libbitcoin_util_a-chainparamsbase.obj: chainparamsbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-chainparamsbase.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Tpo -c -o libbitcoin_util_a-chainparamsbase.obj `if test -f 'chainparamsbase.cpp'; then $(CYGPATH_W) 'chainparamsbase.cpp'; else $(CYGPATH_W) '$(srcdir)/chainparamsbase.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Tpo $(DEPDIR)/libbitcoin_util_a-chainparamsbase.Po
#	$(AM_V_CXX)source='chainparamsbase.cpp' object='libbitcoin_util_a-chainparamsbase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-chainparamsbase.obj `if test -f 'chainparamsbase.cpp'; then $(CYGPATH_W) 'chainparamsbase.cpp'; else $(CYGPATH_W) '$(srcdir)/chainparamsbase.cpp'; fi`

libbitcoin_util_a-clientversion.o: clientversion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-clientversion.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-clientversion.Tpo -c -o libbitcoin_util_a-clientversion.o `test -f 'clientversion.cpp' || echo '$(srcdir)/'`clientversion.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-clientversion.Tpo $(DEPDIR)/libbitcoin_util_a-clientversion.Po
#	$(AM_V_CXX)source='clientversion.cpp' object='libbitcoin_util_a-clientversion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-clientversion.o `test -f 'clientversion.cpp' || echo '$(srcdir)/'`clientversion.cpp

libbitcoin_util_a-clientversion.obj: clientversion.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-clientversion.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-clientversion.Tpo -c -o libbitcoin_util_a-clientversion.obj `if test -f 'clientversion.cpp'; then $(CYGPATH_W) 'clientversion.cpp'; else $(CYGPATH_W) '$(srcdir)/clientversion.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-clientversion.Tpo $(DEPDIR)/libbitcoin_util_a-clientversion.Po
#	$(AM_V_CXX)source='clientversion.cpp' object='libbitcoin_util_a-clientversion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-clientversion.obj `if test -f 'clientversion.cpp'; then $(CYGPATH_W) 'clientversion.cpp'; else $(CYGPATH_W) '$(srcdir)/clientversion.cpp'; fi`

compat/libbitcoin_util_a-glibc_sanity.o: compat/glibc_sanity.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibc_sanity.o -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Tpo -c -o compat/libbitcoin_util_a-glibc_sanity.o `test -f 'compat/glibc_sanity.cpp' || echo '$(srcdir)/'`compat/glibc_sanity.cpp
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Po
#	$(AM_V_CXX)source='compat/glibc_sanity.cpp' object='compat/libbitcoin_util_a-glibc_sanity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibc_sanity.o `test -f 'compat/glibc_sanity.cpp' || echo '$(srcdir)/'`compat/glibc_sanity.cpp

compat/libbitcoin_util_a-glibc_sanity.obj: compat/glibc_sanity.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibc_sanity.obj -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Tpo -c -o compat/libbitcoin_util_a-glibc_sanity.obj `if test -f 'compat/glibc_sanity.cpp'; then $(CYGPATH_W) 'compat/glibc_sanity.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibc_sanity.cpp'; fi`
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibc_sanity.Po
#	$(AM_V_CXX)source='compat/glibc_sanity.cpp' object='compat/libbitcoin_util_a-glibc_sanity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibc_sanity.obj `if test -f 'compat/glibc_sanity.cpp'; then $(CYGPATH_W) 'compat/glibc_sanity.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibc_sanity.cpp'; fi`

compat/libbitcoin_util_a-glibcxx_sanity.o: compat/glibcxx_sanity.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibcxx_sanity.o -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Tpo -c -o compat/libbitcoin_util_a-glibcxx_sanity.o `test -f 'compat/glibcxx_sanity.cpp' || echo '$(srcdir)/'`compat/glibcxx_sanity.cpp
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Po
#	$(AM_V_CXX)source='compat/glibcxx_sanity.cpp' object='compat/libbitcoin_util_a-glibcxx_sanity.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibcxx_sanity.o `test -f 'compat/glibcxx_sanity.cpp' || echo '$(srcdir)/'`compat/glibcxx_sanity.cpp

compat/libbitcoin_util_a-glibcxx_sanity.obj: compat/glibcxx_sanity.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibcxx_sanity.obj -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Tpo -c -o compat/libbitcoin_util_a-glibcxx_sanity.obj `if test -f 'compat/glibcxx_sanity.cpp'; then $(CYGPATH_W) 'compat/glibcxx_sanity.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibcxx_sanity.cpp'; fi`
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibcxx_sanity.Po
#	$(AM_V_CXX)source='compat/glibcxx_sanity.cpp' object='compat/libbitcoin_util_a-glibcxx_sanity.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibcxx_sanity.obj `if test -f 'compat/glibcxx_sanity.cpp'; then $(CYGPATH_W) 'compat/glibcxx_sanity.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibcxx_sanity.cpp'; fi`

compat/libbitcoin_util_a-strnlen.o: compat/strnlen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-strnlen.o -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Tpo -c -o compat/libbitcoin_util_a-strnlen.o `test -f 'compat/strnlen.cpp' || echo '$(srcdir)/'`compat/strnlen.cpp
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Tpo compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Po
#	$(AM_V_CXX)source='compat/strnlen.cpp' object='compat/libbitcoin_util_a-strnlen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-strnlen.o `test -f 'compat/strnlen.cpp' || echo '$(srcdir)/'`compat/strnlen.cpp

compat/libbitcoin_util_a-strnlen.obj: compat/strnlen.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-strnlen.obj -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Tpo -c -o compat/libbitcoin_util_a-strnlen.obj `if test -f 'compat/strnlen.cpp'; then $(CYGPATH_W) 'compat/strnlen.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/strnlen.cpp'; fi`
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Tpo compat/$(DEPDIR)/libbitcoin_util_a-strnlen.Po
#	$(AM_V_CXX)source='compat/strnlen.cpp' object='compat/libbitcoin_util_a-strnlen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-strnlen.obj `if test -f 'compat/strnlen.cpp'; then $(CYGPATH_W) 'compat/strnlen.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/strnlen.cpp'; fi`

libbitcoin_util_a-random.o: random.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-random.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-random.Tpo -c -o libbitcoin_util_a-random.o `test -f 'random.cpp' || echo '$(srcdir)/'`random.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-random.Tpo $(DEPDIR)/libbitcoin_util_a-random.Po
#	$(AM_V_CXX)source='random.cpp' object='libbitcoin_util_a-random.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-random.o `test -f 'random.cpp' || echo '$(srcdir)/'`random.cpp

libbitcoin_util_a-random.obj: random.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-random.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-random.Tpo -c -o libbitcoin_util_a-random.obj `if test -f 'random.cpp'; then $(CYGPATH_W) 'random.cpp'; else $(CYGPATH_W) '$(srcdir)/random.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-random.Tpo $(DEPDIR)/libbitcoin_util_a-random.Po
#	$(AM_V_CXX)source='random.cpp' object='libbitcoin_util_a-random.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-random.obj `if test -f 'random.cpp'; then $(CYGPATH_W) 'random.cpp'; else $(CYGPATH_W) '$(srcdir)/random.cpp'; fi`

libbitcoin_util_a-rpcprotocol.o: rpcprotocol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-rpcprotocol.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Tpo -c -o libbitcoin_util_a-rpcprotocol.o `test -f 'rpcprotocol.cpp' || echo '$(srcdir)/'`rpcprotocol.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Tpo $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Po
#	$(AM_V_CXX)source='rpcprotocol.cpp' object='libbitcoin_util_a-rpcprotocol.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-rpcprotocol.o `test -f 'rpcprotocol.cpp' || echo '$(srcdir)/'`rpcprotocol.cpp

libbitcoin_util_a-rpcprotocol.obj: rpcprotocol.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-rpcprotocol.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Tpo -c -o libbitcoin_util_a-rpcprotocol.obj `if test -f 'rpcprotocol.cpp'; then $(CYGPATH_W) 'rpcprotocol.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcprotocol.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Tpo $(DEPDIR)/libbitcoin_util_a-rpcprotocol.Po
#	$(AM_V_CXX)source='rpcprotocol.cpp' object='libbitcoin_util_a-rpcprotocol.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-rpcprotocol.obj `if test -f 'rpcprotocol.cpp'; then $(CYGPATH_W) 'rpcprotocol.cpp'; else $(CYGPATH_W) '$(srcdir)/rpcprotocol.cpp'; fi`

support/libbitcoin_util_a-cleanse.o: support/cleanse.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT support/libbitcoin_util_a-cleanse.o -MD -MP -MF support/$(DEPDIR)/libbitcoin_util_a-cleanse.Tpo -c -o support/libbitcoin_util_a-cleanse.o `test -f 'support/cleanse.cpp' || echo '$(srcdir)/'`support/cleanse.cpp
	$(AM_V_at)$(am__mv) support/$(DEPDIR)/libbitcoin_util_a-cleanse.Tpo support/$(DEPDIR)/libbitcoin_util_a-cleanse.Po
#	$(AM_V_CXX)source='support/cleanse.cpp' object='support/libbitcoin_util_a-cleanse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o support/libbitcoin_util_a-cleanse.o `test -f 'support/cleanse.cpp' || echo '$(srcdir)/'`support/cleanse.cpp

support/libbitcoin_util_a-cleanse.obj: support/cleanse.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT support/libbitcoin_util_a-cleanse.obj -MD -MP -MF support/$(DEPDIR)/libbitcoin_util_a-cleanse.Tpo -c -o support/libbitcoin_util_a-cleanse.obj `if test -f 'support/cleanse.cpp'; then $(CYGPATH_W) 'support/cleanse.cpp'; else $(CYGPATH_W) '$(srcdir)/support/cleanse.cpp'; fi`
	$(AM_V_at)$(am__mv) support/$(DEPDIR)/libbitcoin_util_a-cleanse.Tpo support/$(DEPDIR)/libbitcoin_util_a-cleanse.Po
#	$(AM_V_CXX)source='support/cleanse.cpp' object='support/libbitcoin_util_a-cleanse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o support/libbitcoin_util_a-cleanse.obj `if test -f 'support/cleanse.cpp'; then $(CYGPATH_W) 'support/cleanse.cpp'; else $(CYGPATH_W) '$(srcdir)/support/cleanse.cpp'; fi`

libbitcoin_util_a-sync.o: sync.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-sync.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-sync.Tpo -c -o libbitcoin_util_a-sync.o `test -f 'sync.cpp' || echo '$(srcdir)/'`sync.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-sync.Tpo $(DEPDIR)/libbitcoin_util_a-sync.Po
#	$(AM_V_CXX)source='sync.cpp' object='libbitcoin_util_a-sync.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-sync.o `test -f 'sync.cpp' || echo '$(srcdir)/'`sync.cpp

libbitcoin_util_a-sync.obj: sync.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-sync.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-sync.Tpo -c -o libbitcoin_util_a-sync.obj `if test -f 'sync.cpp'; then $(CYGPATH_W) 'sync.cpp'; else $(CYGPATH_W) '$(srcdir)/sync.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-sync.Tpo $(DEPDIR)/libbitcoin_util_a-sync.Po
#	$(AM_V_CXX)source='sync.cpp' object='libbitcoin_util_a-sync.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-sync.obj `if test -f 'sync.cpp'; then $(CYGPATH_W) 'sync.cpp'; else $(CYGPATH_W) '$(srcdir)/sync.cpp'; fi`

libbitcoin_util_a-uint256.o: uint256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-uint256.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-uint256.Tpo -c -o libbitcoin_util_a-uint256.o `test -f 'uint256.cpp' || echo '$(srcdir)/'`uint256.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-uint256.Tpo $(DEPDIR)/libbitcoin_util_a-uint256.Po
#	$(AM_V_CXX)source='uint256.cpp' object='libbitcoin_util_a-uint256.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-uint256.o `test -f 'uint256.cpp' || echo '$(srcdir)/'`uint256.cpp

libbitcoin_util_a-uint256.obj: uint256.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-uint256.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-uint256.Tpo -c -o libbitcoin_util_a-uint256.obj `if test -f 'uint256.cpp'; then $(CYGPATH_W) 'uint256.cpp'; else $(CYGPATH_W) '$(srcdir)/uint256.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-uint256.Tpo $(DEPDIR)/libbitcoin_util_a-uint256.Po
#	$(AM_V_CXX)source='uint256.cpp' object='libbitcoin_util_a-uint256.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-uint256.obj `if test -f 'uint256.cpp'; then $(CYGPATH_W) 'uint256.cpp'; else $(CYGPATH_W) '$(srcdir)/uint256.cpp'; fi`

libbitcoin_util_a-util.o: util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-util.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-util.Tpo -c -o libbitcoin_util_a-util.o `test -f 'util.cpp' || echo '$(srcdir)/'`util.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-util.Tpo $(DEPDIR)/libbitcoin_util_a-util.Po
#	$(AM_V_CXX)source='util.cpp' object='libbitcoin_util_a-util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-util.o `test -f 'util.cpp' || echo '$(srcdir)/'`util.cpp

libbitcoin_util_a-util.obj: util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-util.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-util.Tpo -c -o libbitcoin_util_a-util.obj `if test -f 'util.cpp'; then $(CYGPATH_W) 'util.cpp'; else $(CYGPATH_W) '$(srcdir)/util.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-util.Tpo $(DEPDIR)/libbitcoin_util_a-util.Po
#	$(AM_V_CXX)source='util.cpp' object='libbitcoin_util_a-util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-util.obj `if test -f 'util.cpp'; then $(CYGPATH_W) 'util.cpp'; else $(CYGPATH_W) '$(srcdir)/util.cpp'; fi`

libbitcoin_util_a-utilmoneystr.o: utilmoneystr.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utilmoneystr.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Tpo -c -o libbitcoin_util_a-utilmoneystr.o `test -f 'utilmoneystr.cpp' || echo '$(srcdir)/'`utilmoneystr.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Tpo $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Po
#	$(AM_V_CXX)source='utilmoneystr.cpp' object='libbitcoin_util_a-utilmoneystr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utilmoneystr.o `test -f 'utilmoneystr.cpp' || echo '$(srcdir)/'`utilmoneystr.cpp

libbitcoin_util_a-utilmoneystr.obj: utilmoneystr.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utilmoneystr.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Tpo -c -o libbitcoin_util_a-utilmoneystr.obj `if test -f 'utilmoneystr.cpp'; then $(CYGPATH_W) 'utilmoneystr.cpp'; else $(CYGPATH_W) '$(srcdir)/utilmoneystr.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Tpo $(DEPDIR)/libbitcoin_util_a-utilmoneystr.Po
#	$(AM_V_CXX)source='utilmoneystr.cpp' object='libbitcoin_util_a-utilmoneystr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utilmoneystr.obj `if test -f 'utilmoneystr.cpp'; then $(CYGPATH_W) 'utilmoneystr.cpp'; else $(CYGPATH_W) '$(srcdir)/utilmoneystr.cpp'; fi`

libbitcoin_util_a-utilstrencodings.o: utilstrencodings.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utilstrencodings.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Tpo -c -o libbitcoin_util_a-utilstrencodings.o `test -f 'utilstrencodings.cpp' || echo '$(srcdir)/'`utilstrencodings.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Tpo $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Po
#	$(AM_V_CXX)source='utilstrencodings.cpp' object='libbitcoin_util_a-utilstrencodings.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utilstrencodings.o `test -f 'utilstrencodings.cpp' || echo '$(srcdir)/'`utilstrencodings.cpp

libbitcoin_util_a-utilstrencodings.obj: utilstrencodings.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utilstrencodings.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Tpo -c -o libbitcoin_util_a-utilstrencodings.obj `if test -f 'utilstrencodings.cpp'; then $(CYGPATH_W) 'utilstrencodings.cpp'; else $(CYGPATH_W) '$(srcdir)/utilstrencodings.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Tpo $(DEPDIR)/libbitcoin_util_a-utilstrencodings.Po
#	$(AM_V_CXX)source='utilstrencodings.cpp' object='libbitcoin_util_a-utilstrencodings.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utilstrencodings.obj `if test -f 'utilstrencodings.cpp'; then $(CYGPATH_W) 'utilstrencodings.cpp'; else $(CYGPATH_W) '$(srcdir)/utilstrencodings.cpp'; fi`

libbitcoin_util_a-utiltime.o: utiltime.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utiltime.o -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utiltime.Tpo -c -o libbitcoin_util_a-utiltime.o `test -f 'utiltime.cpp' || echo '$(srcdir)/'`utiltime.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utiltime.Tpo $(DEPDIR)/libbitcoin_util_a-utiltime.Po
#	$(AM_V_CXX)source='utiltime.cpp' object='libbitcoin_util_a-utiltime.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utiltime.o `test -f 'utiltime.cpp' || echo '$(srcdir)/'`utiltime.cpp

libbitcoin_util_a-utiltime.obj: utiltime.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_util_a-utiltime.obj -MD -MP -MF $(DEPDIR)/libbitcoin_util_a-utiltime.Tpo -c -o libbitcoin_util_a-utiltime.obj `if test -f 'utiltime.cpp'; then $(CYGPATH_W) 'utiltime.cpp'; else $(CYGPATH_W) '$(srcdir)/utiltime.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_util_a-utiltime.Tpo $(DEPDIR)/libbitcoin_util_a-utiltime.Po
#	$(AM_V_CXX)source='utiltime.cpp' object='libbitcoin_util_a-utiltime.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_util_a-utiltime.obj `if test -f 'utiltime.cpp'; then $(CYGPATH_W) 'utiltime.cpp'; else $(CYGPATH_W) '$(srcdir)/utiltime.cpp'; fi`

compat/libbitcoin_util_a-glibc_compat.o: compat/glibc_compat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibc_compat.o -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Tpo -c -o compat/libbitcoin_util_a-glibc_compat.o `test -f 'compat/glibc_compat.cpp' || echo '$(srcdir)/'`compat/glibc_compat.cpp
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Po
#	$(AM_V_CXX)source='compat/glibc_compat.cpp' object='compat/libbitcoin_util_a-glibc_compat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibc_compat.o `test -f 'compat/glibc_compat.cpp' || echo '$(srcdir)/'`compat/glibc_compat.cpp

compat/libbitcoin_util_a-glibc_compat.obj: compat/glibc_compat.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -MT compat/libbitcoin_util_a-glibc_compat.obj -MD -MP -MF compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Tpo -c -o compat/libbitcoin_util_a-glibc_compat.obj `if test -f 'compat/glibc_compat.cpp'; then $(CYGPATH_W) 'compat/glibc_compat.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibc_compat.cpp'; fi`
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Tpo compat/$(DEPDIR)/libbitcoin_util_a-glibc_compat.Po
#	$(AM_V_CXX)source='compat/glibc_compat.cpp' object='compat/libbitcoin_util_a-glibc_compat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_util_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_util_a_CXXFLAGS) $(CXXFLAGS) -c -o compat/libbitcoin_util_a-glibc_compat.obj `if test -f 'compat/glibc_compat.cpp'; then $(CYGPATH_W) 'compat/glibc_compat.cpp'; else $(CYGPATH_W) '$(srcdir)/compat/glibc_compat.cpp'; fi`

libbitcoin_wallet_a-utiltest.o: utiltest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-utiltest.o -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-utiltest.Tpo -c -o libbitcoin_wallet_a-utiltest.o `test -f 'utiltest.cpp' || echo '$(srcdir)/'`utiltest.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-utiltest.Tpo $(DEPDIR)/libbitcoin_wallet_a-utiltest.Po
#	$(AM_V_CXX)source='utiltest.cpp' object='libbitcoin_wallet_a-utiltest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-utiltest.o `test -f 'utiltest.cpp' || echo '$(srcdir)/'`utiltest.cpp

libbitcoin_wallet_a-utiltest.obj: utiltest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-utiltest.obj -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-utiltest.Tpo -c -o libbitcoin_wallet_a-utiltest.obj `if test -f 'utiltest.cpp'; then $(CYGPATH_W) 'utiltest.cpp'; else $(CYGPATH_W) '$(srcdir)/utiltest.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-utiltest.Tpo $(DEPDIR)/libbitcoin_wallet_a-utiltest.Po
#	$(AM_V_CXX)source='utiltest.cpp' object='libbitcoin_wallet_a-utiltest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-utiltest.obj `if test -f 'utiltest.cpp'; then $(CYGPATH_W) 'utiltest.cpp'; else $(CYGPATH_W) '$(srcdir)/utiltest.cpp'; fi`

libbitcoin_wallet_a-zcbenchmarks.o: zcbenchmarks.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-zcbenchmarks.o -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Tpo -c -o libbitcoin_wallet_a-zcbenchmarks.o `test -f 'zcbenchmarks.cpp' || echo '$(srcdir)/'`zcbenchmarks.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Tpo $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Po
#	$(AM_V_CXX)source='zcbenchmarks.cpp' object='libbitcoin_wallet_a-zcbenchmarks.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-zcbenchmarks.o `test -f 'zcbenchmarks.cpp' || echo '$(srcdir)/'`zcbenchmarks.cpp

libbitcoin_wallet_a-zcbenchmarks.obj: zcbenchmarks.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-zcbenchmarks.obj -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Tpo -c -o libbitcoin_wallet_a-zcbenchmarks.obj `if test -f 'zcbenchmarks.cpp'; then $(CYGPATH_W) 'zcbenchmarks.cpp'; else $(CYGPATH_W) '$(srcdir)/zcbenchmarks.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Tpo $(DEPDIR)/libbitcoin_wallet_a-zcbenchmarks.Po
#	$(AM_V_CXX)source='zcbenchmarks.cpp' object='libbitcoin_wallet_a-zcbenchmarks.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-zcbenchmarks.obj `if test -f 'zcbenchmarks.cpp'; then $(CYGPATH_W) 'zcbenchmarks.cpp'; else $(CYGPATH_W) '$(srcdir)/zcbenchmarks.cpp'; fi`

wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.o: wallet/asyncrpcoperation_sendmany.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Tpo -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.o `test -f 'wallet/asyncrpcoperation_sendmany.cpp' || echo '$(srcdir)/'`wallet/asyncrpcoperation_sendmany.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Po
#	$(AM_V_CXX)source='wallet/asyncrpcoperation_sendmany.cpp' object='wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.o `test -f 'wallet/asyncrpcoperation_sendmany.cpp' || echo '$(srcdir)/'`wallet/asyncrpcoperation_sendmany.cpp

wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.obj: wallet/asyncrpcoperation_sendmany.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Tpo -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.obj `if test -f 'wallet/asyncrpcoperation_sendmany.cpp'; then $(CYGPATH_W) 'wallet/asyncrpcoperation_sendmany.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/asyncrpcoperation_sendmany.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_sendmany.Po
#	$(AM_V_CXX)source='wallet/asyncrpcoperation_sendmany.cpp' object='wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_sendmany.obj `if test -f 'wallet/asyncrpcoperation_sendmany.cpp'; then $(CYGPATH_W) 'wallet/asyncrpcoperation_sendmany.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/asyncrpcoperation_sendmany.cpp'; fi`

wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.o: wallet/asyncrpcoperation_shieldcoinbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Tpo -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.o `test -f 'wallet/asyncrpcoperation_shieldcoinbase.cpp' || echo '$(srcdir)/'`wallet/asyncrpcoperation_shieldcoinbase.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Po
#	$(AM_V_CXX)source='wallet/asyncrpcoperation_shieldcoinbase.cpp' object='wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.o `test -f 'wallet/asyncrpcoperation_shieldcoinbase.cpp' || echo '$(srcdir)/'`wallet/asyncrpcoperation_shieldcoinbase.cpp

wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.obj: wallet/asyncrpcoperation_shieldcoinbase.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Tpo -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.obj `if test -f 'wallet/asyncrpcoperation_shieldcoinbase.cpp'; then $(CYGPATH_W) 'wallet/asyncrpcoperation_shieldcoinbase.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/asyncrpcoperation_shieldcoinbase.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.Po
#	$(AM_V_CXX)source='wallet/asyncrpcoperation_shieldcoinbase.cpp' object='wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-asyncrpcoperation_shieldcoinbase.obj `if test -f 'wallet/asyncrpcoperation_shieldcoinbase.cpp'; then $(CYGPATH_W) 'wallet/asyncrpcoperation_shieldcoinbase.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/asyncrpcoperation_shieldcoinbase.cpp'; fi`

wallet/libbitcoin_wallet_a-crypter.o: wallet/crypter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-crypter.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Tpo -c -o wallet/libbitcoin_wallet_a-crypter.o `test -f 'wallet/crypter.cpp' || echo '$(srcdir)/'`wallet/crypter.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Po
#	$(AM_V_CXX)source='wallet/crypter.cpp' object='wallet/libbitcoin_wallet_a-crypter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-crypter.o `test -f 'wallet/crypter.cpp' || echo '$(srcdir)/'`wallet/crypter.cpp

wallet/libbitcoin_wallet_a-crypter.obj: wallet/crypter.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-crypter.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Tpo -c -o wallet/libbitcoin_wallet_a-crypter.obj `if test -f 'wallet/crypter.cpp'; then $(CYGPATH_W) 'wallet/crypter.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/crypter.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-crypter.Po
#	$(AM_V_CXX)source='wallet/crypter.cpp' object='wallet/libbitcoin_wallet_a-crypter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-crypter.obj `if test -f 'wallet/crypter.cpp'; then $(CYGPATH_W) 'wallet/crypter.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/crypter.cpp'; fi`

wallet/libbitcoin_wallet_a-db.o: wallet/db.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-db.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Tpo -c -o wallet/libbitcoin_wallet_a-db.o `test -f 'wallet/db.cpp' || echo '$(srcdir)/'`wallet/db.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Po
#	$(AM_V_CXX)source='wallet/db.cpp' object='wallet/libbitcoin_wallet_a-db.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-db.o `test -f 'wallet/db.cpp' || echo '$(srcdir)/'`wallet/db.cpp

wallet/libbitcoin_wallet_a-db.obj: wallet/db.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-db.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Tpo -c -o wallet/libbitcoin_wallet_a-db.obj `if test -f 'wallet/db.cpp'; then $(CYGPATH_W) 'wallet/db.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/db.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-db.Po
#	$(AM_V_CXX)source='wallet/db.cpp' object='wallet/libbitcoin_wallet_a-db.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-db.obj `if test -f 'wallet/db.cpp'; then $(CYGPATH_W) 'wallet/db.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/db.cpp'; fi`

libbitcoin_wallet_a-paymentdisclosure.o: paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-paymentdisclosure.o -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Tpo -c -o libbitcoin_wallet_a-paymentdisclosure.o `test -f 'paymentdisclosure.cpp' || echo '$(srcdir)/'`paymentdisclosure.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Tpo $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Po
#	$(AM_V_CXX)source='paymentdisclosure.cpp' object='libbitcoin_wallet_a-paymentdisclosure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-paymentdisclosure.o `test -f 'paymentdisclosure.cpp' || echo '$(srcdir)/'`paymentdisclosure.cpp

libbitcoin_wallet_a-paymentdisclosure.obj: paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-paymentdisclosure.obj -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Tpo -c -o libbitcoin_wallet_a-paymentdisclosure.obj `if test -f 'paymentdisclosure.cpp'; then $(CYGPATH_W) 'paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosure.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Tpo $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosure.Po
#	$(AM_V_CXX)source='paymentdisclosure.cpp' object='libbitcoin_wallet_a-paymentdisclosure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-paymentdisclosure.obj `if test -f 'paymentdisclosure.cpp'; then $(CYGPATH_W) 'paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosure.cpp'; fi`

libbitcoin_wallet_a-paymentdisclosuredb.o: paymentdisclosuredb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-paymentdisclosuredb.o -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Tpo -c -o libbitcoin_wallet_a-paymentdisclosuredb.o `test -f 'paymentdisclosuredb.cpp' || echo '$(srcdir)/'`paymentdisclosuredb.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Tpo $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Po
#	$(AM_V_CXX)source='paymentdisclosuredb.cpp' object='libbitcoin_wallet_a-paymentdisclosuredb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-paymentdisclosuredb.o `test -f 'paymentdisclosuredb.cpp' || echo '$(srcdir)/'`paymentdisclosuredb.cpp

libbitcoin_wallet_a-paymentdisclosuredb.obj: paymentdisclosuredb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT libbitcoin_wallet_a-paymentdisclosuredb.obj -MD -MP -MF $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Tpo -c -o libbitcoin_wallet_a-paymentdisclosuredb.obj `if test -f 'paymentdisclosuredb.cpp'; then $(CYGPATH_W) 'paymentdisclosuredb.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosuredb.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Tpo $(DEPDIR)/libbitcoin_wallet_a-paymentdisclosuredb.Po
#	$(AM_V_CXX)source='paymentdisclosuredb.cpp' object='libbitcoin_wallet_a-paymentdisclosuredb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o libbitcoin_wallet_a-paymentdisclosuredb.obj `if test -f 'paymentdisclosuredb.cpp'; then $(CYGPATH_W) 'paymentdisclosuredb.cpp'; else $(CYGPATH_W) '$(srcdir)/paymentdisclosuredb.cpp'; fi`

wallet/libbitcoin_wallet_a-rpcdisclosure.o: wallet/rpcdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcdisclosure.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Tpo -c -o wallet/libbitcoin_wallet_a-rpcdisclosure.o `test -f 'wallet/rpcdisclosure.cpp' || echo '$(srcdir)/'`wallet/rpcdisclosure.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Po
#	$(AM_V_CXX)source='wallet/rpcdisclosure.cpp' object='wallet/libbitcoin_wallet_a-rpcdisclosure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcdisclosure.o `test -f 'wallet/rpcdisclosure.cpp' || echo '$(srcdir)/'`wallet/rpcdisclosure.cpp

wallet/libbitcoin_wallet_a-rpcdisclosure.obj: wallet/rpcdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcdisclosure.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Tpo -c -o wallet/libbitcoin_wallet_a-rpcdisclosure.obj `if test -f 'wallet/rpcdisclosure.cpp'; then $(CYGPATH_W) 'wallet/rpcdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcdisclosure.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdisclosure.Po
#	$(AM_V_CXX)source='wallet/rpcdisclosure.cpp' object='wallet/libbitcoin_wallet_a-rpcdisclosure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcdisclosure.obj `if test -f 'wallet/rpcdisclosure.cpp'; then $(CYGPATH_W) 'wallet/rpcdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcdisclosure.cpp'; fi`

wallet/libbitcoin_wallet_a-rpcdump.o: wallet/rpcdump.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcdump.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Tpo -c -o wallet/libbitcoin_wallet_a-rpcdump.o `test -f 'wallet/rpcdump.cpp' || echo '$(srcdir)/'`wallet/rpcdump.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Po
#	$(AM_V_CXX)source='wallet/rpcdump.cpp' object='wallet/libbitcoin_wallet_a-rpcdump.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcdump.o `test -f 'wallet/rpcdump.cpp' || echo '$(srcdir)/'`wallet/rpcdump.cpp

wallet/libbitcoin_wallet_a-rpcdump.obj: wallet/rpcdump.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcdump.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Tpo -c -o wallet/libbitcoin_wallet_a-rpcdump.obj `if test -f 'wallet/rpcdump.cpp'; then $(CYGPATH_W) 'wallet/rpcdump.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcdump.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcdump.Po
#	$(AM_V_CXX)source='wallet/rpcdump.cpp' object='wallet/libbitcoin_wallet_a-rpcdump.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcdump.obj `if test -f 'wallet/rpcdump.cpp'; then $(CYGPATH_W) 'wallet/rpcdump.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcdump.cpp'; fi`

wallet/libbitcoin_wallet_a-rpcwallet.o: wallet/rpcwallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcwallet.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Tpo -c -o wallet/libbitcoin_wallet_a-rpcwallet.o `test -f 'wallet/rpcwallet.cpp' || echo '$(srcdir)/'`wallet/rpcwallet.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Po
#	$(AM_V_CXX)source='wallet/rpcwallet.cpp' object='wallet/libbitcoin_wallet_a-rpcwallet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcwallet.o `test -f 'wallet/rpcwallet.cpp' || echo '$(srcdir)/'`wallet/rpcwallet.cpp

wallet/libbitcoin_wallet_a-rpcwallet.obj: wallet/rpcwallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-rpcwallet.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Tpo -c -o wallet/libbitcoin_wallet_a-rpcwallet.obj `if test -f 'wallet/rpcwallet.cpp'; then $(CYGPATH_W) 'wallet/rpcwallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcwallet.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-rpcwallet.Po
#	$(AM_V_CXX)source='wallet/rpcwallet.cpp' object='wallet/libbitcoin_wallet_a-rpcwallet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-rpcwallet.obj `if test -f 'wallet/rpcwallet.cpp'; then $(CYGPATH_W) 'wallet/rpcwallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/rpcwallet.cpp'; fi`

wallet/libbitcoin_wallet_a-wallet.o: wallet/wallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-wallet.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Tpo -c -o wallet/libbitcoin_wallet_a-wallet.o `test -f 'wallet/wallet.cpp' || echo '$(srcdir)/'`wallet/wallet.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Po
#	$(AM_V_CXX)source='wallet/wallet.cpp' object='wallet/libbitcoin_wallet_a-wallet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-wallet.o `test -f 'wallet/wallet.cpp' || echo '$(srcdir)/'`wallet/wallet.cpp

wallet/libbitcoin_wallet_a-wallet.obj: wallet/wallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-wallet.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Tpo -c -o wallet/libbitcoin_wallet_a-wallet.obj `if test -f 'wallet/wallet.cpp'; then $(CYGPATH_W) 'wallet/wallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/wallet.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet.Po
#	$(AM_V_CXX)source='wallet/wallet.cpp' object='wallet/libbitcoin_wallet_a-wallet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-wallet.obj `if test -f 'wallet/wallet.cpp'; then $(CYGPATH_W) 'wallet/wallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/wallet.cpp'; fi`

wallet/libbitcoin_wallet_a-wallet_ismine.o: wallet/wallet_ismine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-wallet_ismine.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Tpo -c -o wallet/libbitcoin_wallet_a-wallet_ismine.o `test -f 'wallet/wallet_ismine.cpp' || echo '$(srcdir)/'`wallet/wallet_ismine.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Po
#	$(AM_V_CXX)source='wallet/wallet_ismine.cpp' object='wallet/libbitcoin_wallet_a-wallet_ismine.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-wallet_ismine.o `test -f 'wallet/wallet_ismine.cpp' || echo '$(srcdir)/'`wallet/wallet_ismine.cpp

wallet/libbitcoin_wallet_a-wallet_ismine.obj: wallet/wallet_ismine.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-wallet_ismine.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Tpo -c -o wallet/libbitcoin_wallet_a-wallet_ismine.obj `if test -f 'wallet/wallet_ismine.cpp'; then $(CYGPATH_W) 'wallet/wallet_ismine.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/wallet_ismine.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-wallet_ismine.Po
#	$(AM_V_CXX)source='wallet/wallet_ismine.cpp' object='wallet/libbitcoin_wallet_a-wallet_ismine.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-wallet_ismine.obj `if test -f 'wallet/wallet_ismine.cpp'; then $(CYGPATH_W) 'wallet/wallet_ismine.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/wallet_ismine.cpp'; fi`

wallet/libbitcoin_wallet_a-walletdb.o: wallet/walletdb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-walletdb.o -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Tpo -c -o wallet/libbitcoin_wallet_a-walletdb.o `test -f 'wallet/walletdb.cpp' || echo '$(srcdir)/'`wallet/walletdb.cpp
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Po
#	$(AM_V_CXX)source='wallet/walletdb.cpp' object='wallet/libbitcoin_wallet_a-walletdb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-walletdb.o `test -f 'wallet/walletdb.cpp' || echo '$(srcdir)/'`wallet/walletdb.cpp

wallet/libbitcoin_wallet_a-walletdb.obj: wallet/walletdb.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -MT wallet/libbitcoin_wallet_a-walletdb.obj -MD -MP -MF wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Tpo -c -o wallet/libbitcoin_wallet_a-walletdb.obj `if test -f 'wallet/walletdb.cpp'; then $(CYGPATH_W) 'wallet/walletdb.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/walletdb.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Tpo wallet/$(DEPDIR)/libbitcoin_wallet_a-walletdb.Po
#	$(AM_V_CXX)source='wallet/walletdb.cpp' object='wallet/libbitcoin_wallet_a-walletdb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_wallet_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_wallet_a_CXXFLAGS) $(CXXFLAGS) -c -o wallet/libbitcoin_wallet_a-walletdb.obj `if test -f 'wallet/walletdb.cpp'; then $(CYGPATH_W) 'wallet/walletdb.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/walletdb.cpp'; fi`

zmq/libbitcoin_zmq_a-zmqabstractnotifier.o: zmq/zmqabstractnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqabstractnotifier.o -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Tpo -c -o zmq/libbitcoin_zmq_a-zmqabstractnotifier.o `test -f 'zmq/zmqabstractnotifier.cpp' || echo '$(srcdir)/'`zmq/zmqabstractnotifier.cpp
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Po
#	$(AM_V_CXX)source='zmq/zmqabstractnotifier.cpp' object='zmq/libbitcoin_zmq_a-zmqabstractnotifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqabstractnotifier.o `test -f 'zmq/zmqabstractnotifier.cpp' || echo '$(srcdir)/'`zmq/zmqabstractnotifier.cpp

zmq/libbitcoin_zmq_a-zmqabstractnotifier.obj: zmq/zmqabstractnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqabstractnotifier.obj -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Tpo -c -o zmq/libbitcoin_zmq_a-zmqabstractnotifier.obj `if test -f 'zmq/zmqabstractnotifier.cpp'; then $(CYGPATH_W) 'zmq/zmqabstractnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqabstractnotifier.cpp'; fi`
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqabstractnotifier.Po
#	$(AM_V_CXX)source='zmq/zmqabstractnotifier.cpp' object='zmq/libbitcoin_zmq_a-zmqabstractnotifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqabstractnotifier.obj `if test -f 'zmq/zmqabstractnotifier.cpp'; then $(CYGPATH_W) 'zmq/zmqabstractnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqabstractnotifier.cpp'; fi`

zmq/libbitcoin_zmq_a-zmqnotificationinterface.o: zmq/zmqnotificationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqnotificationinterface.o -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Tpo -c -o zmq/libbitcoin_zmq_a-zmqnotificationinterface.o `test -f 'zmq/zmqnotificationinterface.cpp' || echo '$(srcdir)/'`zmq/zmqnotificationinterface.cpp
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Po
#	$(AM_V_CXX)source='zmq/zmqnotificationinterface.cpp' object='zmq/libbitcoin_zmq_a-zmqnotificationinterface.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqnotificationinterface.o `test -f 'zmq/zmqnotificationinterface.cpp' || echo '$(srcdir)/'`zmq/zmqnotificationinterface.cpp

zmq/libbitcoin_zmq_a-zmqnotificationinterface.obj: zmq/zmqnotificationinterface.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqnotificationinterface.obj -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Tpo -c -o zmq/libbitcoin_zmq_a-zmqnotificationinterface.obj `if test -f 'zmq/zmqnotificationinterface.cpp'; then $(CYGPATH_W) 'zmq/zmqnotificationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqnotificationinterface.cpp'; fi`
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqnotificationinterface.Po
#	$(AM_V_CXX)source='zmq/zmqnotificationinterface.cpp' object='zmq/libbitcoin_zmq_a-zmqnotificationinterface.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqnotificationinterface.obj `if test -f 'zmq/zmqnotificationinterface.cpp'; then $(CYGPATH_W) 'zmq/zmqnotificationinterface.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqnotificationinterface.cpp'; fi`

zmq/libbitcoin_zmq_a-zmqpublishnotifier.o: zmq/zmqpublishnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqpublishnotifier.o -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Tpo -c -o zmq/libbitcoin_zmq_a-zmqpublishnotifier.o `test -f 'zmq/zmqpublishnotifier.cpp' || echo '$(srcdir)/'`zmq/zmqpublishnotifier.cpp
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Po
#	$(AM_V_CXX)source='zmq/zmqpublishnotifier.cpp' object='zmq/libbitcoin_zmq_a-zmqpublishnotifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqpublishnotifier.o `test -f 'zmq/zmqpublishnotifier.cpp' || echo '$(srcdir)/'`zmq/zmqpublishnotifier.cpp

zmq/libbitcoin_zmq_a-zmqpublishnotifier.obj: zmq/zmqpublishnotifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -MT zmq/libbitcoin_zmq_a-zmqpublishnotifier.obj -MD -MP -MF zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Tpo -c -o zmq/libbitcoin_zmq_a-zmqpublishnotifier.obj `if test -f 'zmq/zmqpublishnotifier.cpp'; then $(CYGPATH_W) 'zmq/zmqpublishnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqpublishnotifier.cpp'; fi`
	$(AM_V_at)$(am__mv) zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Tpo zmq/$(DEPDIR)/libbitcoin_zmq_a-zmqpublishnotifier.Po
#	$(AM_V_CXX)source='zmq/zmqpublishnotifier.cpp' object='zmq/libbitcoin_zmq_a-zmqpublishnotifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libbitcoin_zmq_a_CPPFLAGS) $(CPPFLAGS) $(libbitcoin_zmq_a_CXXFLAGS) $(CXXFLAGS) -c -o zmq/libbitcoin_zmq_a-zmqpublishnotifier.obj `if test -f 'zmq/zmqpublishnotifier.cpp'; then $(CYGPATH_W) 'zmq/zmqpublishnotifier.cpp'; else $(CYGPATH_W) '$(srcdir)/zmq/zmqpublishnotifier.cpp'; fi`

moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.o: moonroomcash/IncrementalMerkleTree.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Tpo -c -o moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.o `test -f 'moonroomcash/IncrementalMerkleTree.cpp' || echo '$(srcdir)/'`moonroomcash/IncrementalMerkleTree.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Po
#	$(AM_V_CXX)source='moonroomcash/IncrementalMerkleTree.cpp' object='moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.o `test -f 'moonroomcash/IncrementalMerkleTree.cpp' || echo '$(srcdir)/'`moonroomcash/IncrementalMerkleTree.cpp

moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.obj: moonroomcash/IncrementalMerkleTree.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Tpo -c -o moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.obj `if test -f 'moonroomcash/IncrementalMerkleTree.cpp'; then $(CYGPATH_W) 'moonroomcash/IncrementalMerkleTree.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/IncrementalMerkleTree.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-IncrementalMerkleTree.Po
#	$(AM_V_CXX)source='moonroomcash/IncrementalMerkleTree.cpp' object='moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-IncrementalMerkleTree.obj `if test -f 'moonroomcash/IncrementalMerkleTree.cpp'; then $(CYGPATH_W) 'moonroomcash/IncrementalMerkleTree.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/IncrementalMerkleTree.cpp'; fi`

moonroomcash/libmoonroomcash_a-NoteEncryption.o: moonroomcash/NoteEncryption.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-NoteEncryption.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Tpo -c -o moonroomcash/libmoonroomcash_a-NoteEncryption.o `test -f 'moonroomcash/NoteEncryption.cpp' || echo '$(srcdir)/'`moonroomcash/NoteEncryption.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Po
#	$(AM_V_CXX)source='moonroomcash/NoteEncryption.cpp' object='moonroomcash/libmoonroomcash_a-NoteEncryption.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-NoteEncryption.o `test -f 'moonroomcash/NoteEncryption.cpp' || echo '$(srcdir)/'`moonroomcash/NoteEncryption.cpp

moonroomcash/libmoonroomcash_a-NoteEncryption.obj: moonroomcash/NoteEncryption.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-NoteEncryption.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Tpo -c -o moonroomcash/libmoonroomcash_a-NoteEncryption.obj `if test -f 'moonroomcash/NoteEncryption.cpp'; then $(CYGPATH_W) 'moonroomcash/NoteEncryption.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/NoteEncryption.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-NoteEncryption.Po
#	$(AM_V_CXX)source='moonroomcash/NoteEncryption.cpp' object='moonroomcash/libmoonroomcash_a-NoteEncryption.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-NoteEncryption.obj `if test -f 'moonroomcash/NoteEncryption.cpp'; then $(CYGPATH_W) 'moonroomcash/NoteEncryption.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/NoteEncryption.cpp'; fi`

moonroomcash/libmoonroomcash_a-Address.o: moonroomcash/Address.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Address.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Tpo -c -o moonroomcash/libmoonroomcash_a-Address.o `test -f 'moonroomcash/Address.cpp' || echo '$(srcdir)/'`moonroomcash/Address.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Po
#	$(AM_V_CXX)source='moonroomcash/Address.cpp' object='moonroomcash/libmoonroomcash_a-Address.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Address.o `test -f 'moonroomcash/Address.cpp' || echo '$(srcdir)/'`moonroomcash/Address.cpp

moonroomcash/libmoonroomcash_a-Address.obj: moonroomcash/Address.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Address.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Tpo -c -o moonroomcash/libmoonroomcash_a-Address.obj `if test -f 'moonroomcash/Address.cpp'; then $(CYGPATH_W) 'moonroomcash/Address.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Address.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Address.Po
#	$(AM_V_CXX)source='moonroomcash/Address.cpp' object='moonroomcash/libmoonroomcash_a-Address.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Address.obj `if test -f 'moonroomcash/Address.cpp'; then $(CYGPATH_W) 'moonroomcash/Address.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Address.cpp'; fi`

moonroomcash/libmoonroomcash_a-JoinSplit.o: moonroomcash/JoinSplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-JoinSplit.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Tpo -c -o moonroomcash/libmoonroomcash_a-JoinSplit.o `test -f 'moonroomcash/JoinSplit.cpp' || echo '$(srcdir)/'`moonroomcash/JoinSplit.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Po
#	$(AM_V_CXX)source='moonroomcash/JoinSplit.cpp' object='moonroomcash/libmoonroomcash_a-JoinSplit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-JoinSplit.o `test -f 'moonroomcash/JoinSplit.cpp' || echo '$(srcdir)/'`moonroomcash/JoinSplit.cpp

moonroomcash/libmoonroomcash_a-JoinSplit.obj: moonroomcash/JoinSplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-JoinSplit.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Tpo -c -o moonroomcash/libmoonroomcash_a-JoinSplit.obj `if test -f 'moonroomcash/JoinSplit.cpp'; then $(CYGPATH_W) 'moonroomcash/JoinSplit.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/JoinSplit.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-JoinSplit.Po
#	$(AM_V_CXX)source='moonroomcash/JoinSplit.cpp' object='moonroomcash/libmoonroomcash_a-JoinSplit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-JoinSplit.obj `if test -f 'moonroomcash/JoinSplit.cpp'; then $(CYGPATH_W) 'moonroomcash/JoinSplit.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/JoinSplit.cpp'; fi`

moonroomcash/libmoonroomcash_a-Proof.o: moonroomcash/Proof.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Proof.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Tpo -c -o moonroomcash/libmoonroomcash_a-Proof.o `test -f 'moonroomcash/Proof.cpp' || echo '$(srcdir)/'`moonroomcash/Proof.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Po
#	$(AM_V_CXX)source='moonroomcash/Proof.cpp' object='moonroomcash/libmoonroomcash_a-Proof.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Proof.o `test -f 'moonroomcash/Proof.cpp' || echo '$(srcdir)/'`moonroomcash/Proof.cpp

moonroomcash/libmoonroomcash_a-Proof.obj: moonroomcash/Proof.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Proof.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Tpo -c -o moonroomcash/libmoonroomcash_a-Proof.obj `if test -f 'moonroomcash/Proof.cpp'; then $(CYGPATH_W) 'moonroomcash/Proof.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Proof.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Proof.Po
#	$(AM_V_CXX)source='moonroomcash/Proof.cpp' object='moonroomcash/libmoonroomcash_a-Proof.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Proof.obj `if test -f 'moonroomcash/Proof.cpp'; then $(CYGPATH_W) 'moonroomcash/Proof.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Proof.cpp'; fi`

moonroomcash/libmoonroomcash_a-Note.o: moonroomcash/Note.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Note.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Tpo -c -o moonroomcash/libmoonroomcash_a-Note.o `test -f 'moonroomcash/Note.cpp' || echo '$(srcdir)/'`moonroomcash/Note.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Po
#	$(AM_V_CXX)source='moonroomcash/Note.cpp' object='moonroomcash/libmoonroomcash_a-Note.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Note.o `test -f 'moonroomcash/Note.cpp' || echo '$(srcdir)/'`moonroomcash/Note.cpp

moonroomcash/libmoonroomcash_a-Note.obj: moonroomcash/Note.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-Note.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Tpo -c -o moonroomcash/libmoonroomcash_a-Note.obj `if test -f 'moonroomcash/Note.cpp'; then $(CYGPATH_W) 'moonroomcash/Note.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Note.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-Note.Po
#	$(AM_V_CXX)source='moonroomcash/Note.cpp' object='moonroomcash/libmoonroomcash_a-Note.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-Note.obj `if test -f 'moonroomcash/Note.cpp'; then $(CYGPATH_W) 'moonroomcash/Note.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/Note.cpp'; fi`

moonroomcash/libmoonroomcash_a-prf.o: moonroomcash/prf.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-prf.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Tpo -c -o moonroomcash/libmoonroomcash_a-prf.o `test -f 'moonroomcash/prf.cpp' || echo '$(srcdir)/'`moonroomcash/prf.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Po
#	$(AM_V_CXX)source='moonroomcash/prf.cpp' object='moonroomcash/libmoonroomcash_a-prf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-prf.o `test -f 'moonroomcash/prf.cpp' || echo '$(srcdir)/'`moonroomcash/prf.cpp

moonroomcash/libmoonroomcash_a-prf.obj: moonroomcash/prf.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-prf.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Tpo -c -o moonroomcash/libmoonroomcash_a-prf.obj `if test -f 'moonroomcash/prf.cpp'; then $(CYGPATH_W) 'moonroomcash/prf.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/prf.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-prf.Po
#	$(AM_V_CXX)source='moonroomcash/prf.cpp' object='moonroomcash/libmoonroomcash_a-prf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-prf.obj `if test -f 'moonroomcash/prf.cpp'; then $(CYGPATH_W) 'moonroomcash/prf.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/prf.cpp'; fi`

moonroomcash/libmoonroomcash_a-util.o: moonroomcash/util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-util.o -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Tpo -c -o moonroomcash/libmoonroomcash_a-util.o `test -f 'moonroomcash/util.cpp' || echo '$(srcdir)/'`moonroomcash/util.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Po
#	$(AM_V_CXX)source='moonroomcash/util.cpp' object='moonroomcash/libmoonroomcash_a-util.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-util.o `test -f 'moonroomcash/util.cpp' || echo '$(srcdir)/'`moonroomcash/util.cpp

moonroomcash/libmoonroomcash_a-util.obj: moonroomcash/util.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/libmoonroomcash_a-util.obj -MD -MP -MF moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Tpo -c -o moonroomcash/libmoonroomcash_a-util.obj `if test -f 'moonroomcash/util.cpp'; then $(CYGPATH_W) 'moonroomcash/util.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/util.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Tpo moonroomcash/$(DEPDIR)/libmoonroomcash_a-util.Po
#	$(AM_V_CXX)source='moonroomcash/util.cpp' object='moonroomcash/libmoonroomcash_a-util.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcash_a_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcash_a_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/libmoonroomcash_a-util.obj `if test -f 'moonroomcash/util.cpp'; then $(CYGPATH_W) 'moonroomcash/util.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/util.cpp'; fi`

crypto/libmoonroomcashconsensus_la-equihash.lo: crypto/equihash.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-equihash.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-equihash.Tpo -c -o crypto/libmoonroomcashconsensus_la-equihash.lo `test -f 'crypto/equihash.cpp' || echo '$(srcdir)/'`crypto/equihash.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-equihash.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-equihash.Plo
#	$(AM_V_CXX)source='crypto/equihash.cpp' object='crypto/libmoonroomcashconsensus_la-equihash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-equihash.lo `test -f 'crypto/equihash.cpp' || echo '$(srcdir)/'`crypto/equihash.cpp

crypto/libmoonroomcashconsensus_la-hmac_sha512.lo: crypto/hmac_sha512.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-hmac_sha512.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-hmac_sha512.Tpo -c -o crypto/libmoonroomcashconsensus_la-hmac_sha512.lo `test -f 'crypto/hmac_sha512.cpp' || echo '$(srcdir)/'`crypto/hmac_sha512.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-hmac_sha512.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-hmac_sha512.Plo
#	$(AM_V_CXX)source='crypto/hmac_sha512.cpp' object='crypto/libmoonroomcashconsensus_la-hmac_sha512.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-hmac_sha512.lo `test -f 'crypto/hmac_sha512.cpp' || echo '$(srcdir)/'`crypto/hmac_sha512.cpp

crypto/libmoonroomcashconsensus_la-ripemd160.lo: crypto/ripemd160.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-ripemd160.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-ripemd160.Tpo -c -o crypto/libmoonroomcashconsensus_la-ripemd160.lo `test -f 'crypto/ripemd160.cpp' || echo '$(srcdir)/'`crypto/ripemd160.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-ripemd160.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-ripemd160.Plo
#	$(AM_V_CXX)source='crypto/ripemd160.cpp' object='crypto/libmoonroomcashconsensus_la-ripemd160.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-ripemd160.lo `test -f 'crypto/ripemd160.cpp' || echo '$(srcdir)/'`crypto/ripemd160.cpp

crypto/libmoonroomcashconsensus_la-sha1.lo: crypto/sha1.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-sha1.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha1.Tpo -c -o crypto/libmoonroomcashconsensus_la-sha1.lo `test -f 'crypto/sha1.cpp' || echo '$(srcdir)/'`crypto/sha1.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha1.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha1.Plo
#	$(AM_V_CXX)source='crypto/sha1.cpp' object='crypto/libmoonroomcashconsensus_la-sha1.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-sha1.lo `test -f 'crypto/sha1.cpp' || echo '$(srcdir)/'`crypto/sha1.cpp

crypto/libmoonroomcashconsensus_la-sha256.lo: crypto/sha256.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-sha256.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha256.Tpo -c -o crypto/libmoonroomcashconsensus_la-sha256.lo `test -f 'crypto/sha256.cpp' || echo '$(srcdir)/'`crypto/sha256.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha256.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha256.Plo
#	$(AM_V_CXX)source='crypto/sha256.cpp' object='crypto/libmoonroomcashconsensus_la-sha256.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-sha256.lo `test -f 'crypto/sha256.cpp' || echo '$(srcdir)/'`crypto/sha256.cpp

crypto/libmoonroomcashconsensus_la-sha512.lo: crypto/sha512.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT crypto/libmoonroomcashconsensus_la-sha512.lo -MD -MP -MF crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha512.Tpo -c -o crypto/libmoonroomcashconsensus_la-sha512.lo `test -f 'crypto/sha512.cpp' || echo '$(srcdir)/'`crypto/sha512.cpp
	$(AM_V_at)$(am__mv) crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha512.Tpo crypto/$(DEPDIR)/libmoonroomcashconsensus_la-sha512.Plo
#	$(AM_V_CXX)source='crypto/sha512.cpp' object='crypto/libmoonroomcashconsensus_la-sha512.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o crypto/libmoonroomcashconsensus_la-sha512.lo `test -f 'crypto/sha512.cpp' || echo '$(srcdir)/'`crypto/sha512.cpp

libmoonroomcashconsensus_la-hash.lo: hash.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT libmoonroomcashconsensus_la-hash.lo -MD -MP -MF $(DEPDIR)/libmoonroomcashconsensus_la-hash.Tpo -c -o libmoonroomcashconsensus_la-hash.lo `test -f 'hash.cpp' || echo '$(srcdir)/'`hash.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libmoonroomcashconsensus_la-hash.Tpo $(DEPDIR)/libmoonroomcashconsensus_la-hash.Plo
#	$(AM_V_CXX)source='hash.cpp' object='libmoonroomcashconsensus_la-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o libmoonroomcashconsensus_la-hash.lo `test -f 'hash.cpp' || echo '$(srcdir)/'`hash.cpp

primitives/libmoonroomcashconsensus_la-transaction.lo: primitives/transaction.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT primitives/libmoonroomcashconsensus_la-transaction.lo -MD -MP -MF primitives/$(DEPDIR)/libmoonroomcashconsensus_la-transaction.Tpo -c -o primitives/libmoonroomcashconsensus_la-transaction.lo `test -f 'primitives/transaction.cpp' || echo '$(srcdir)/'`primitives/transaction.cpp
	$(AM_V_at)$(am__mv) primitives/$(DEPDIR)/libmoonroomcashconsensus_la-transaction.Tpo primitives/$(DEPDIR)/libmoonroomcashconsensus_la-transaction.Plo
#	$(AM_V_CXX)source='primitives/transaction.cpp' object='primitives/libmoonroomcashconsensus_la-transaction.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o primitives/libmoonroomcashconsensus_la-transaction.lo `test -f 'primitives/transaction.cpp' || echo '$(srcdir)/'`primitives/transaction.cpp

libmoonroomcashconsensus_la-pubkey.lo: pubkey.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT libmoonroomcashconsensus_la-pubkey.lo -MD -MP -MF $(DEPDIR)/libmoonroomcashconsensus_la-pubkey.Tpo -c -o libmoonroomcashconsensus_la-pubkey.lo `test -f 'pubkey.cpp' || echo '$(srcdir)/'`pubkey.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libmoonroomcashconsensus_la-pubkey.Tpo $(DEPDIR)/libmoonroomcashconsensus_la-pubkey.Plo
#	$(AM_V_CXX)source='pubkey.cpp' object='libmoonroomcashconsensus_la-pubkey.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o libmoonroomcashconsensus_la-pubkey.lo `test -f 'pubkey.cpp' || echo '$(srcdir)/'`pubkey.cpp

script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo: script/moonroomcashconsensus.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo -MD -MP -MF script/$(DEPDIR)/libmoonroomcashconsensus_la-moonroomcashconsensus.Tpo -c -o script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo `test -f 'script/moonroomcashconsensus.cpp' || echo '$(srcdir)/'`script/moonroomcashconsensus.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libmoonroomcashconsensus_la-moonroomcashconsensus.Tpo script/$(DEPDIR)/libmoonroomcashconsensus_la-moonroomcashconsensus.Plo
#	$(AM_V_CXX)source='script/moonroomcashconsensus.cpp' object='script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o script/libmoonroomcashconsensus_la-moonroomcashconsensus.lo `test -f 'script/moonroomcashconsensus.cpp' || echo '$(srcdir)/'`script/moonroomcashconsensus.cpp

script/libmoonroomcashconsensus_la-interpreter.lo: script/interpreter.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT script/libmoonroomcashconsensus_la-interpreter.lo -MD -MP -MF script/$(DEPDIR)/libmoonroomcashconsensus_la-interpreter.Tpo -c -o script/libmoonroomcashconsensus_la-interpreter.lo `test -f 'script/interpreter.cpp' || echo '$(srcdir)/'`script/interpreter.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libmoonroomcashconsensus_la-interpreter.Tpo script/$(DEPDIR)/libmoonroomcashconsensus_la-interpreter.Plo
#	$(AM_V_CXX)source='script/interpreter.cpp' object='script/libmoonroomcashconsensus_la-interpreter.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o script/libmoonroomcashconsensus_la-interpreter.lo `test -f 'script/interpreter.cpp' || echo '$(srcdir)/'`script/interpreter.cpp

script/libmoonroomcashconsensus_la-script.lo: script/script.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT script/libmoonroomcashconsensus_la-script.lo -MD -MP -MF script/$(DEPDIR)/libmoonroomcashconsensus_la-script.Tpo -c -o script/libmoonroomcashconsensus_la-script.lo `test -f 'script/script.cpp' || echo '$(srcdir)/'`script/script.cpp
	$(AM_V_at)$(am__mv) script/$(DEPDIR)/libmoonroomcashconsensus_la-script.Tpo script/$(DEPDIR)/libmoonroomcashconsensus_la-script.Plo
#	$(AM_V_CXX)source='script/script.cpp' object='script/libmoonroomcashconsensus_la-script.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o script/libmoonroomcashconsensus_la-script.lo `test -f 'script/script.cpp' || echo '$(srcdir)/'`script/script.cpp

libmoonroomcashconsensus_la-uint256.lo: uint256.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT libmoonroomcashconsensus_la-uint256.lo -MD -MP -MF $(DEPDIR)/libmoonroomcashconsensus_la-uint256.Tpo -c -o libmoonroomcashconsensus_la-uint256.lo `test -f 'uint256.cpp' || echo '$(srcdir)/'`uint256.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libmoonroomcashconsensus_la-uint256.Tpo $(DEPDIR)/libmoonroomcashconsensus_la-uint256.Plo
#	$(AM_V_CXX)source='uint256.cpp' object='libmoonroomcashconsensus_la-uint256.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o libmoonroomcashconsensus_la-uint256.lo `test -f 'uint256.cpp' || echo '$(srcdir)/'`uint256.cpp

libmoonroomcashconsensus_la-utilstrencodings.lo: utilstrencodings.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT libmoonroomcashconsensus_la-utilstrencodings.lo -MD -MP -MF $(DEPDIR)/libmoonroomcashconsensus_la-utilstrencodings.Tpo -c -o libmoonroomcashconsensus_la-utilstrencodings.lo `test -f 'utilstrencodings.cpp' || echo '$(srcdir)/'`utilstrencodings.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/libmoonroomcashconsensus_la-utilstrencodings.Tpo $(DEPDIR)/libmoonroomcashconsensus_la-utilstrencodings.Plo
#	$(AM_V_CXX)source='utilstrencodings.cpp' object='libmoonroomcashconsensus_la-utilstrencodings.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o libmoonroomcashconsensus_la-utilstrencodings.lo `test -f 'utilstrencodings.cpp' || echo '$(srcdir)/'`utilstrencodings.cpp

compat/libmoonroomcashconsensus_la-glibc_compat.lo: compat/glibc_compat.cpp
	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -MT compat/libmoonroomcashconsensus_la-glibc_compat.lo -MD -MP -MF compat/$(DEPDIR)/libmoonroomcashconsensus_la-glibc_compat.Tpo -c -o compat/libmoonroomcashconsensus_la-glibc_compat.lo `test -f 'compat/glibc_compat.cpp' || echo '$(srcdir)/'`compat/glibc_compat.cpp
	$(AM_V_at)$(am__mv) compat/$(DEPDIR)/libmoonroomcashconsensus_la-glibc_compat.Tpo compat/$(DEPDIR)/libmoonroomcashconsensus_la-glibc_compat.Plo
#	$(AM_V_CXX)source='compat/glibc_compat.cpp' object='compat/libmoonroomcashconsensus_la-glibc_compat.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmoonroomcashconsensus_la_CPPFLAGS) $(CPPFLAGS) $(libmoonroomcashconsensus_la_CXXFLAGS) $(CXXFLAGS) -c -o compat/libmoonroomcashconsensus_la-glibc_compat.lo `test -f 'compat/glibc_compat.cpp' || echo '$(srcdir)/'`compat/glibc_compat.cpp

moonroomcash_cli-bitcoin-cli.o: bitcoin-cli.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_cli_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_cli_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash_cli-bitcoin-cli.o -MD -MP -MF $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Tpo -c -o moonroomcash_cli-bitcoin-cli.o `test -f 'bitcoin-cli.cpp' || echo '$(srcdir)/'`bitcoin-cli.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Tpo $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Po
#	$(AM_V_CXX)source='bitcoin-cli.cpp' object='moonroomcash_cli-bitcoin-cli.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_cli_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_cli_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash_cli-bitcoin-cli.o `test -f 'bitcoin-cli.cpp' || echo '$(srcdir)/'`bitcoin-cli.cpp

moonroomcash_cli-bitcoin-cli.obj: bitcoin-cli.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_cli_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_cli_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash_cli-bitcoin-cli.obj -MD -MP -MF $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Tpo -c -o moonroomcash_cli-bitcoin-cli.obj `if test -f 'bitcoin-cli.cpp'; then $(CYGPATH_W) 'bitcoin-cli.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoin-cli.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Tpo $(DEPDIR)/moonroomcash_cli-bitcoin-cli.Po
#	$(AM_V_CXX)source='bitcoin-cli.cpp' object='moonroomcash_cli-bitcoin-cli.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_cli_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_cli_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash_cli-bitcoin-cli.obj `if test -f 'bitcoin-cli.cpp'; then $(CYGPATH_W) 'bitcoin-cli.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoin-cli.cpp'; fi`

gtest/moonroomcash_gtest-main.o: gtest/main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-main.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-main.Tpo -c -o gtest/moonroomcash_gtest-main.o `test -f 'gtest/main.cpp' || echo '$(srcdir)/'`gtest/main.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-main.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-main.Po
#	$(AM_V_CXX)source='gtest/main.cpp' object='gtest/moonroomcash_gtest-main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-main.o `test -f 'gtest/main.cpp' || echo '$(srcdir)/'`gtest/main.cpp

gtest/moonroomcash_gtest-main.obj: gtest/main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-main.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-main.Tpo -c -o gtest/moonroomcash_gtest-main.obj `if test -f 'gtest/main.cpp'; then $(CYGPATH_W) 'gtest/main.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/main.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-main.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-main.Po
#	$(AM_V_CXX)source='gtest/main.cpp' object='gtest/moonroomcash_gtest-main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-main.obj `if test -f 'gtest/main.cpp'; then $(CYGPATH_W) 'gtest/main.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/main.cpp'; fi`

gtest/moonroomcash_gtest-utils.o: gtest/utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-utils.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-utils.Tpo -c -o gtest/moonroomcash_gtest-utils.o `test -f 'gtest/utils.cpp' || echo '$(srcdir)/'`gtest/utils.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-utils.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-utils.Po
#	$(AM_V_CXX)source='gtest/utils.cpp' object='gtest/moonroomcash_gtest-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-utils.o `test -f 'gtest/utils.cpp' || echo '$(srcdir)/'`gtest/utils.cpp

gtest/moonroomcash_gtest-utils.obj: gtest/utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-utils.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-utils.Tpo -c -o gtest/moonroomcash_gtest-utils.obj `if test -f 'gtest/utils.cpp'; then $(CYGPATH_W) 'gtest/utils.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/utils.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-utils.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-utils.Po
#	$(AM_V_CXX)source='gtest/utils.cpp' object='gtest/moonroomcash_gtest-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-utils.obj `if test -f 'gtest/utils.cpp'; then $(CYGPATH_W) 'gtest/utils.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/utils.cpp'; fi`

gtest/moonroomcash_gtest-test_checktransaction.o: gtest/test_checktransaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_checktransaction.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Tpo -c -o gtest/moonroomcash_gtest-test_checktransaction.o `test -f 'gtest/test_checktransaction.cpp' || echo '$(srcdir)/'`gtest/test_checktransaction.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Po
#	$(AM_V_CXX)source='gtest/test_checktransaction.cpp' object='gtest/moonroomcash_gtest-test_checktransaction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_checktransaction.o `test -f 'gtest/test_checktransaction.cpp' || echo '$(srcdir)/'`gtest/test_checktransaction.cpp

gtest/moonroomcash_gtest-test_checktransaction.obj: gtest/test_checktransaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_checktransaction.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Tpo -c -o gtest/moonroomcash_gtest-test_checktransaction.obj `if test -f 'gtest/test_checktransaction.cpp'; then $(CYGPATH_W) 'gtest/test_checktransaction.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_checktransaction.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_checktransaction.Po
#	$(AM_V_CXX)source='gtest/test_checktransaction.cpp' object='gtest/moonroomcash_gtest-test_checktransaction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_checktransaction.obj `if test -f 'gtest/test_checktransaction.cpp'; then $(CYGPATH_W) 'gtest/test_checktransaction.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_checktransaction.cpp'; fi`

gtest/moonroomcash_gtest-json_test_vectors.o: gtest/json_test_vectors.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-json_test_vectors.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Tpo -c -o gtest/moonroomcash_gtest-json_test_vectors.o `test -f 'gtest/json_test_vectors.cpp' || echo '$(srcdir)/'`gtest/json_test_vectors.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Po
#	$(AM_V_CXX)source='gtest/json_test_vectors.cpp' object='gtest/moonroomcash_gtest-json_test_vectors.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-json_test_vectors.o `test -f 'gtest/json_test_vectors.cpp' || echo '$(srcdir)/'`gtest/json_test_vectors.cpp

gtest/moonroomcash_gtest-json_test_vectors.obj: gtest/json_test_vectors.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-json_test_vectors.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Tpo -c -o gtest/moonroomcash_gtest-json_test_vectors.obj `if test -f 'gtest/json_test_vectors.cpp'; then $(CYGPATH_W) 'gtest/json_test_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/json_test_vectors.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-json_test_vectors.Po
#	$(AM_V_CXX)source='gtest/json_test_vectors.cpp' object='gtest/moonroomcash_gtest-json_test_vectors.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-json_test_vectors.obj `if test -f 'gtest/json_test_vectors.cpp'; then $(CYGPATH_W) 'gtest/json_test_vectors.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/json_test_vectors.cpp'; fi`

gtest/moonroomcash_gtest-test_foundersreward.o: gtest/test_foundersreward.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_foundersreward.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Tpo -c -o gtest/moonroomcash_gtest-test_foundersreward.o `test -f 'gtest/test_foundersreward.cpp' || echo '$(srcdir)/'`gtest/test_foundersreward.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Po
#	$(AM_V_CXX)source='gtest/test_foundersreward.cpp' object='gtest/moonroomcash_gtest-test_foundersreward.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_foundersreward.o `test -f 'gtest/test_foundersreward.cpp' || echo '$(srcdir)/'`gtest/test_foundersreward.cpp

gtest/moonroomcash_gtest-test_foundersreward.obj: gtest/test_foundersreward.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_foundersreward.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Tpo -c -o gtest/moonroomcash_gtest-test_foundersreward.obj `if test -f 'gtest/test_foundersreward.cpp'; then $(CYGPATH_W) 'gtest/test_foundersreward.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_foundersreward.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_foundersreward.Po
#	$(AM_V_CXX)source='gtest/test_foundersreward.cpp' object='gtest/moonroomcash_gtest-test_foundersreward.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_foundersreward.obj `if test -f 'gtest/test_foundersreward.cpp'; then $(CYGPATH_W) 'gtest/test_foundersreward.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_foundersreward.cpp'; fi`

wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.o: wallet/gtest/test_wallet_zkeys.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.o -MD -MP -MF wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Tpo -c -o wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.o `test -f 'wallet/gtest/test_wallet_zkeys.cpp' || echo '$(srcdir)/'`wallet/gtest/test_wallet_zkeys.cpp
	$(AM_V_at)$(am__mv) wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Tpo wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Po
#	$(AM_V_CXX)source='wallet/gtest/test_wallet_zkeys.cpp' object='wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.o `test -f 'wallet/gtest/test_wallet_zkeys.cpp' || echo '$(srcdir)/'`wallet/gtest/test_wallet_zkeys.cpp

wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.obj: wallet/gtest/test_wallet_zkeys.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.obj -MD -MP -MF wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Tpo -c -o wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.obj `if test -f 'wallet/gtest/test_wallet_zkeys.cpp'; then $(CYGPATH_W) 'wallet/gtest/test_wallet_zkeys.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/gtest/test_wallet_zkeys.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Tpo wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet_zkeys.Po
#	$(AM_V_CXX)source='wallet/gtest/test_wallet_zkeys.cpp' object='wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o wallet/gtest/moonroomcash_gtest-test_wallet_zkeys.obj `if test -f 'wallet/gtest/test_wallet_zkeys.cpp'; then $(CYGPATH_W) 'wallet/gtest/test_wallet_zkeys.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/gtest/test_wallet_zkeys.cpp'; fi`

gtest/moonroomcash_gtest-test_tautology.o: gtest/test_tautology.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_tautology.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Tpo -c -o gtest/moonroomcash_gtest-test_tautology.o `test -f 'gtest/test_tautology.cpp' || echo '$(srcdir)/'`gtest/test_tautology.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Po
#	$(AM_V_CXX)source='gtest/test_tautology.cpp' object='gtest/moonroomcash_gtest-test_tautology.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_tautology.o `test -f 'gtest/test_tautology.cpp' || echo '$(srcdir)/'`gtest/test_tautology.cpp

gtest/moonroomcash_gtest-test_tautology.obj: gtest/test_tautology.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_tautology.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Tpo -c -o gtest/moonroomcash_gtest-test_tautology.obj `if test -f 'gtest/test_tautology.cpp'; then $(CYGPATH_W) 'gtest/test_tautology.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_tautology.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_tautology.Po
#	$(AM_V_CXX)source='gtest/test_tautology.cpp' object='gtest/moonroomcash_gtest-test_tautology.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_tautology.obj `if test -f 'gtest/test_tautology.cpp'; then $(CYGPATH_W) 'gtest/test_tautology.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_tautology.cpp'; fi`

gtest/moonroomcash_gtest-test_deprecation.o: gtest/test_deprecation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_deprecation.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Tpo -c -o gtest/moonroomcash_gtest-test_deprecation.o `test -f 'gtest/test_deprecation.cpp' || echo '$(srcdir)/'`gtest/test_deprecation.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Po
#	$(AM_V_CXX)source='gtest/test_deprecation.cpp' object='gtest/moonroomcash_gtest-test_deprecation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_deprecation.o `test -f 'gtest/test_deprecation.cpp' || echo '$(srcdir)/'`gtest/test_deprecation.cpp

gtest/moonroomcash_gtest-test_deprecation.obj: gtest/test_deprecation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_deprecation.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Tpo -c -o gtest/moonroomcash_gtest-test_deprecation.obj `if test -f 'gtest/test_deprecation.cpp'; then $(CYGPATH_W) 'gtest/test_deprecation.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_deprecation.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_deprecation.Po
#	$(AM_V_CXX)source='gtest/test_deprecation.cpp' object='gtest/moonroomcash_gtest-test_deprecation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_deprecation.obj `if test -f 'gtest/test_deprecation.cpp'; then $(CYGPATH_W) 'gtest/test_deprecation.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_deprecation.cpp'; fi`

gtest/moonroomcash_gtest-test_equihash.o: gtest/test_equihash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_equihash.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Tpo -c -o gtest/moonroomcash_gtest-test_equihash.o `test -f 'gtest/test_equihash.cpp' || echo '$(srcdir)/'`gtest/test_equihash.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Po
#	$(AM_V_CXX)source='gtest/test_equihash.cpp' object='gtest/moonroomcash_gtest-test_equihash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_equihash.o `test -f 'gtest/test_equihash.cpp' || echo '$(srcdir)/'`gtest/test_equihash.cpp

gtest/moonroomcash_gtest-test_equihash.obj: gtest/test_equihash.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_equihash.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Tpo -c -o gtest/moonroomcash_gtest-test_equihash.obj `if test -f 'gtest/test_equihash.cpp'; then $(CYGPATH_W) 'gtest/test_equihash.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_equihash.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_equihash.Po
#	$(AM_V_CXX)source='gtest/test_equihash.cpp' object='gtest/moonroomcash_gtest-test_equihash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_equihash.obj `if test -f 'gtest/test_equihash.cpp'; then $(CYGPATH_W) 'gtest/test_equihash.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_equihash.cpp'; fi`

gtest/moonroomcash_gtest-test_httprpc.o: gtest/test_httprpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_httprpc.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Tpo -c -o gtest/moonroomcash_gtest-test_httprpc.o `test -f 'gtest/test_httprpc.cpp' || echo '$(srcdir)/'`gtest/test_httprpc.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Po
#	$(AM_V_CXX)source='gtest/test_httprpc.cpp' object='gtest/moonroomcash_gtest-test_httprpc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_httprpc.o `test -f 'gtest/test_httprpc.cpp' || echo '$(srcdir)/'`gtest/test_httprpc.cpp

gtest/moonroomcash_gtest-test_httprpc.obj: gtest/test_httprpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_httprpc.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Tpo -c -o gtest/moonroomcash_gtest-test_httprpc.obj `if test -f 'gtest/test_httprpc.cpp'; then $(CYGPATH_W) 'gtest/test_httprpc.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_httprpc.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_httprpc.Po
#	$(AM_V_CXX)source='gtest/test_httprpc.cpp' object='gtest/moonroomcash_gtest-test_httprpc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_httprpc.obj `if test -f 'gtest/test_httprpc.cpp'; then $(CYGPATH_W) 'gtest/test_httprpc.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_httprpc.cpp'; fi`

gtest/moonroomcash_gtest-test_joinsplit.o: gtest/test_joinsplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_joinsplit.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Tpo -c -o gtest/moonroomcash_gtest-test_joinsplit.o `test -f 'gtest/test_joinsplit.cpp' || echo '$(srcdir)/'`gtest/test_joinsplit.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Po
#	$(AM_V_CXX)source='gtest/test_joinsplit.cpp' object='gtest/moonroomcash_gtest-test_joinsplit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_joinsplit.o `test -f 'gtest/test_joinsplit.cpp' || echo '$(srcdir)/'`gtest/test_joinsplit.cpp

gtest/moonroomcash_gtest-test_joinsplit.obj: gtest/test_joinsplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_joinsplit.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Tpo -c -o gtest/moonroomcash_gtest-test_joinsplit.obj `if test -f 'gtest/test_joinsplit.cpp'; then $(CYGPATH_W) 'gtest/test_joinsplit.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_joinsplit.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_joinsplit.Po
#	$(AM_V_CXX)source='gtest/test_joinsplit.cpp' object='gtest/moonroomcash_gtest-test_joinsplit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_joinsplit.obj `if test -f 'gtest/test_joinsplit.cpp'; then $(CYGPATH_W) 'gtest/test_joinsplit.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_joinsplit.cpp'; fi`

gtest/moonroomcash_gtest-test_keystore.o: gtest/test_keystore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_keystore.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Tpo -c -o gtest/moonroomcash_gtest-test_keystore.o `test -f 'gtest/test_keystore.cpp' || echo '$(srcdir)/'`gtest/test_keystore.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Po
#	$(AM_V_CXX)source='gtest/test_keystore.cpp' object='gtest/moonroomcash_gtest-test_keystore.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_keystore.o `test -f 'gtest/test_keystore.cpp' || echo '$(srcdir)/'`gtest/test_keystore.cpp

gtest/moonroomcash_gtest-test_keystore.obj: gtest/test_keystore.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_keystore.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Tpo -c -o gtest/moonroomcash_gtest-test_keystore.obj `if test -f 'gtest/test_keystore.cpp'; then $(CYGPATH_W) 'gtest/test_keystore.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_keystore.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_keystore.Po
#	$(AM_V_CXX)source='gtest/test_keystore.cpp' object='gtest/moonroomcash_gtest-test_keystore.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_keystore.obj `if test -f 'gtest/test_keystore.cpp'; then $(CYGPATH_W) 'gtest/test_keystore.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_keystore.cpp'; fi`

gtest/moonroomcash_gtest-test_noteencryption.o: gtest/test_noteencryption.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_noteencryption.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Tpo -c -o gtest/moonroomcash_gtest-test_noteencryption.o `test -f 'gtest/test_noteencryption.cpp' || echo '$(srcdir)/'`gtest/test_noteencryption.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Po
#	$(AM_V_CXX)source='gtest/test_noteencryption.cpp' object='gtest/moonroomcash_gtest-test_noteencryption.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_noteencryption.o `test -f 'gtest/test_noteencryption.cpp' || echo '$(srcdir)/'`gtest/test_noteencryption.cpp

gtest/moonroomcash_gtest-test_noteencryption.obj: gtest/test_noteencryption.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_noteencryption.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Tpo -c -o gtest/moonroomcash_gtest-test_noteencryption.obj `if test -f 'gtest/test_noteencryption.cpp'; then $(CYGPATH_W) 'gtest/test_noteencryption.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_noteencryption.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_noteencryption.Po
#	$(AM_V_CXX)source='gtest/test_noteencryption.cpp' object='gtest/moonroomcash_gtest-test_noteencryption.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_noteencryption.obj `if test -f 'gtest/test_noteencryption.cpp'; then $(CYGPATH_W) 'gtest/test_noteencryption.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_noteencryption.cpp'; fi`

gtest/moonroomcash_gtest-test_mempool.o: gtest/test_mempool.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_mempool.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Tpo -c -o gtest/moonroomcash_gtest-test_mempool.o `test -f 'gtest/test_mempool.cpp' || echo '$(srcdir)/'`gtest/test_mempool.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Po
#	$(AM_V_CXX)source='gtest/test_mempool.cpp' object='gtest/moonroomcash_gtest-test_mempool.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_mempool.o `test -f 'gtest/test_mempool.cpp' || echo '$(srcdir)/'`gtest/test_mempool.cpp

gtest/moonroomcash_gtest-test_mempool.obj: gtest/test_mempool.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_mempool.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Tpo -c -o gtest/moonroomcash_gtest-test_mempool.obj `if test -f 'gtest/test_mempool.cpp'; then $(CYGPATH_W) 'gtest/test_mempool.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_mempool.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_mempool.Po
#	$(AM_V_CXX)source='gtest/test_mempool.cpp' object='gtest/moonroomcash_gtest-test_mempool.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_mempool.obj `if test -f 'gtest/test_mempool.cpp'; then $(CYGPATH_W) 'gtest/test_mempool.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_mempool.cpp'; fi`

gtest/moonroomcash_gtest-test_merkletree.o: gtest/test_merkletree.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_merkletree.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Tpo -c -o gtest/moonroomcash_gtest-test_merkletree.o `test -f 'gtest/test_merkletree.cpp' || echo '$(srcdir)/'`gtest/test_merkletree.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Po
#	$(AM_V_CXX)source='gtest/test_merkletree.cpp' object='gtest/moonroomcash_gtest-test_merkletree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_merkletree.o `test -f 'gtest/test_merkletree.cpp' || echo '$(srcdir)/'`gtest/test_merkletree.cpp

gtest/moonroomcash_gtest-test_merkletree.obj: gtest/test_merkletree.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_merkletree.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Tpo -c -o gtest/moonroomcash_gtest-test_merkletree.obj `if test -f 'gtest/test_merkletree.cpp'; then $(CYGPATH_W) 'gtest/test_merkletree.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_merkletree.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_merkletree.Po
#	$(AM_V_CXX)source='gtest/test_merkletree.cpp' object='gtest/moonroomcash_gtest-test_merkletree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_merkletree.obj `if test -f 'gtest/test_merkletree.cpp'; then $(CYGPATH_W) 'gtest/test_merkletree.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_merkletree.cpp'; fi`

gtest/moonroomcash_gtest-test_metrics.o: gtest/test_metrics.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_metrics.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Tpo -c -o gtest/moonroomcash_gtest-test_metrics.o `test -f 'gtest/test_metrics.cpp' || echo '$(srcdir)/'`gtest/test_metrics.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Po
#	$(AM_V_CXX)source='gtest/test_metrics.cpp' object='gtest/moonroomcash_gtest-test_metrics.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_metrics.o `test -f 'gtest/test_metrics.cpp' || echo '$(srcdir)/'`gtest/test_metrics.cpp

gtest/moonroomcash_gtest-test_metrics.obj: gtest/test_metrics.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_metrics.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Tpo -c -o gtest/moonroomcash_gtest-test_metrics.obj `if test -f 'gtest/test_metrics.cpp'; then $(CYGPATH_W) 'gtest/test_metrics.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_metrics.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_metrics.Po
#	$(AM_V_CXX)source='gtest/test_metrics.cpp' object='gtest/moonroomcash_gtest-test_metrics.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_metrics.obj `if test -f 'gtest/test_metrics.cpp'; then $(CYGPATH_W) 'gtest/test_metrics.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_metrics.cpp'; fi`

gtest/moonroomcash_gtest-test_miner.o: gtest/test_miner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_miner.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Tpo -c -o gtest/moonroomcash_gtest-test_miner.o `test -f 'gtest/test_miner.cpp' || echo '$(srcdir)/'`gtest/test_miner.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Po
#	$(AM_V_CXX)source='gtest/test_miner.cpp' object='gtest/moonroomcash_gtest-test_miner.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_miner.o `test -f 'gtest/test_miner.cpp' || echo '$(srcdir)/'`gtest/test_miner.cpp

gtest/moonroomcash_gtest-test_miner.obj: gtest/test_miner.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_miner.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Tpo -c -o gtest/moonroomcash_gtest-test_miner.obj `if test -f 'gtest/test_miner.cpp'; then $(CYGPATH_W) 'gtest/test_miner.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_miner.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_miner.Po
#	$(AM_V_CXX)source='gtest/test_miner.cpp' object='gtest/moonroomcash_gtest-test_miner.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_miner.obj `if test -f 'gtest/test_miner.cpp'; then $(CYGPATH_W) 'gtest/test_miner.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_miner.cpp'; fi`

gtest/moonroomcash_gtest-test_pow.o: gtest/test_pow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_pow.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Tpo -c -o gtest/moonroomcash_gtest-test_pow.o `test -f 'gtest/test_pow.cpp' || echo '$(srcdir)/'`gtest/test_pow.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Po
#	$(AM_V_CXX)source='gtest/test_pow.cpp' object='gtest/moonroomcash_gtest-test_pow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_pow.o `test -f 'gtest/test_pow.cpp' || echo '$(srcdir)/'`gtest/test_pow.cpp

gtest/moonroomcash_gtest-test_pow.obj: gtest/test_pow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_pow.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Tpo -c -o gtest/moonroomcash_gtest-test_pow.obj `if test -f 'gtest/test_pow.cpp'; then $(CYGPATH_W) 'gtest/test_pow.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_pow.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_pow.Po
#	$(AM_V_CXX)source='gtest/test_pow.cpp' object='gtest/moonroomcash_gtest-test_pow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_pow.obj `if test -f 'gtest/test_pow.cpp'; then $(CYGPATH_W) 'gtest/test_pow.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_pow.cpp'; fi`

gtest/moonroomcash_gtest-test_random.o: gtest/test_random.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_random.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Tpo -c -o gtest/moonroomcash_gtest-test_random.o `test -f 'gtest/test_random.cpp' || echo '$(srcdir)/'`gtest/test_random.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Po
#	$(AM_V_CXX)source='gtest/test_random.cpp' object='gtest/moonroomcash_gtest-test_random.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_random.o `test -f 'gtest/test_random.cpp' || echo '$(srcdir)/'`gtest/test_random.cpp

gtest/moonroomcash_gtest-test_random.obj: gtest/test_random.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_random.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Tpo -c -o gtest/moonroomcash_gtest-test_random.obj `if test -f 'gtest/test_random.cpp'; then $(CYGPATH_W) 'gtest/test_random.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_random.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_random.Po
#	$(AM_V_CXX)source='gtest/test_random.cpp' object='gtest/moonroomcash_gtest-test_random.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_random.obj `if test -f 'gtest/test_random.cpp'; then $(CYGPATH_W) 'gtest/test_random.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_random.cpp'; fi`

gtest/moonroomcash_gtest-test_rpc.o: gtest/test_rpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_rpc.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Tpo -c -o gtest/moonroomcash_gtest-test_rpc.o `test -f 'gtest/test_rpc.cpp' || echo '$(srcdir)/'`gtest/test_rpc.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Po
#	$(AM_V_CXX)source='gtest/test_rpc.cpp' object='gtest/moonroomcash_gtest-test_rpc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_rpc.o `test -f 'gtest/test_rpc.cpp' || echo '$(srcdir)/'`gtest/test_rpc.cpp

gtest/moonroomcash_gtest-test_rpc.obj: gtest/test_rpc.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_rpc.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Tpo -c -o gtest/moonroomcash_gtest-test_rpc.obj `if test -f 'gtest/test_rpc.cpp'; then $(CYGPATH_W) 'gtest/test_rpc.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_rpc.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_rpc.Po
#	$(AM_V_CXX)source='gtest/test_rpc.cpp' object='gtest/moonroomcash_gtest-test_rpc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_rpc.obj `if test -f 'gtest/test_rpc.cpp'; then $(CYGPATH_W) 'gtest/test_rpc.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_rpc.cpp'; fi`

gtest/moonroomcash_gtest-test_transaction.o: gtest/test_transaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_transaction.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Tpo -c -o gtest/moonroomcash_gtest-test_transaction.o `test -f 'gtest/test_transaction.cpp' || echo '$(srcdir)/'`gtest/test_transaction.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Po
#	$(AM_V_CXX)source='gtest/test_transaction.cpp' object='gtest/moonroomcash_gtest-test_transaction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_transaction.o `test -f 'gtest/test_transaction.cpp' || echo '$(srcdir)/'`gtest/test_transaction.cpp

gtest/moonroomcash_gtest-test_transaction.obj: gtest/test_transaction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_transaction.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Tpo -c -o gtest/moonroomcash_gtest-test_transaction.obj `if test -f 'gtest/test_transaction.cpp'; then $(CYGPATH_W) 'gtest/test_transaction.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_transaction.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_transaction.Po
#	$(AM_V_CXX)source='gtest/test_transaction.cpp' object='gtest/moonroomcash_gtest-test_transaction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_transaction.obj `if test -f 'gtest/test_transaction.cpp'; then $(CYGPATH_W) 'gtest/test_transaction.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_transaction.cpp'; fi`

gtest/moonroomcash_gtest-test_validation.o: gtest/test_validation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_validation.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Tpo -c -o gtest/moonroomcash_gtest-test_validation.o `test -f 'gtest/test_validation.cpp' || echo '$(srcdir)/'`gtest/test_validation.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Po
#	$(AM_V_CXX)source='gtest/test_validation.cpp' object='gtest/moonroomcash_gtest-test_validation.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_validation.o `test -f 'gtest/test_validation.cpp' || echo '$(srcdir)/'`gtest/test_validation.cpp

gtest/moonroomcash_gtest-test_validation.obj: gtest/test_validation.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_validation.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Tpo -c -o gtest/moonroomcash_gtest-test_validation.obj `if test -f 'gtest/test_validation.cpp'; then $(CYGPATH_W) 'gtest/test_validation.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_validation.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_validation.Po
#	$(AM_V_CXX)source='gtest/test_validation.cpp' object='gtest/moonroomcash_gtest-test_validation.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_validation.obj `if test -f 'gtest/test_validation.cpp'; then $(CYGPATH_W) 'gtest/test_validation.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_validation.cpp'; fi`

gtest/moonroomcash_gtest-test_circuit.o: gtest/test_circuit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_circuit.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Tpo -c -o gtest/moonroomcash_gtest-test_circuit.o `test -f 'gtest/test_circuit.cpp' || echo '$(srcdir)/'`gtest/test_circuit.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Po
#	$(AM_V_CXX)source='gtest/test_circuit.cpp' object='gtest/moonroomcash_gtest-test_circuit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_circuit.o `test -f 'gtest/test_circuit.cpp' || echo '$(srcdir)/'`gtest/test_circuit.cpp

gtest/moonroomcash_gtest-test_circuit.obj: gtest/test_circuit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_circuit.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Tpo -c -o gtest/moonroomcash_gtest-test_circuit.obj `if test -f 'gtest/test_circuit.cpp'; then $(CYGPATH_W) 'gtest/test_circuit.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_circuit.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_circuit.Po
#	$(AM_V_CXX)source='gtest/test_circuit.cpp' object='gtest/moonroomcash_gtest-test_circuit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_circuit.obj `if test -f 'gtest/test_circuit.cpp'; then $(CYGPATH_W) 'gtest/test_circuit.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_circuit.cpp'; fi`

gtest/moonroomcash_gtest-test_txid.o: gtest/test_txid.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_txid.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Tpo -c -o gtest/moonroomcash_gtest-test_txid.o `test -f 'gtest/test_txid.cpp' || echo '$(srcdir)/'`gtest/test_txid.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Po
#	$(AM_V_CXX)source='gtest/test_txid.cpp' object='gtest/moonroomcash_gtest-test_txid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_txid.o `test -f 'gtest/test_txid.cpp' || echo '$(srcdir)/'`gtest/test_txid.cpp

gtest/moonroomcash_gtest-test_txid.obj: gtest/test_txid.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_txid.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Tpo -c -o gtest/moonroomcash_gtest-test_txid.obj `if test -f 'gtest/test_txid.cpp'; then $(CYGPATH_W) 'gtest/test_txid.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_txid.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_txid.Po
#	$(AM_V_CXX)source='gtest/test_txid.cpp' object='gtest/moonroomcash_gtest-test_txid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_txid.obj `if test -f 'gtest/test_txid.cpp'; then $(CYGPATH_W) 'gtest/test_txid.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_txid.cpp'; fi`

gtest/moonroomcash_gtest-test_libmoonroomcash_utils.o: gtest/test_libmoonroomcash_utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_libmoonroomcash_utils.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Tpo -c -o gtest/moonroomcash_gtest-test_libmoonroomcash_utils.o `test -f 'gtest/test_libmoonroomcash_utils.cpp' || echo '$(srcdir)/'`gtest/test_libmoonroomcash_utils.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Po
#	$(AM_V_CXX)source='gtest/test_libmoonroomcash_utils.cpp' object='gtest/moonroomcash_gtest-test_libmoonroomcash_utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_libmoonroomcash_utils.o `test -f 'gtest/test_libmoonroomcash_utils.cpp' || echo '$(srcdir)/'`gtest/test_libmoonroomcash_utils.cpp

gtest/moonroomcash_gtest-test_libmoonroomcash_utils.obj: gtest/test_libmoonroomcash_utils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_libmoonroomcash_utils.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Tpo -c -o gtest/moonroomcash_gtest-test_libmoonroomcash_utils.obj `if test -f 'gtest/test_libmoonroomcash_utils.cpp'; then $(CYGPATH_W) 'gtest/test_libmoonroomcash_utils.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_libmoonroomcash_utils.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_libmoonroomcash_utils.Po
#	$(AM_V_CXX)source='gtest/test_libmoonroomcash_utils.cpp' object='gtest/moonroomcash_gtest-test_libmoonroomcash_utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_libmoonroomcash_utils.obj `if test -f 'gtest/test_libmoonroomcash_utils.cpp'; then $(CYGPATH_W) 'gtest/test_libmoonroomcash_utils.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_libmoonroomcash_utils.cpp'; fi`

gtest/moonroomcash_gtest-test_proofs.o: gtest/test_proofs.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_proofs.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Tpo -c -o gtest/moonroomcash_gtest-test_proofs.o `test -f 'gtest/test_proofs.cpp' || echo '$(srcdir)/'`gtest/test_proofs.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Po
#	$(AM_V_CXX)source='gtest/test_proofs.cpp' object='gtest/moonroomcash_gtest-test_proofs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_proofs.o `test -f 'gtest/test_proofs.cpp' || echo '$(srcdir)/'`gtest/test_proofs.cpp

gtest/moonroomcash_gtest-test_proofs.obj: gtest/test_proofs.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_proofs.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Tpo -c -o gtest/moonroomcash_gtest-test_proofs.obj `if test -f 'gtest/test_proofs.cpp'; then $(CYGPATH_W) 'gtest/test_proofs.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_proofs.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_proofs.Po
#	$(AM_V_CXX)source='gtest/test_proofs.cpp' object='gtest/moonroomcash_gtest-test_proofs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_proofs.obj `if test -f 'gtest/test_proofs.cpp'; then $(CYGPATH_W) 'gtest/test_proofs.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_proofs.cpp'; fi`

gtest/moonroomcash_gtest-test_paymentdisclosure.o: gtest/test_paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_paymentdisclosure.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Tpo -c -o gtest/moonroomcash_gtest-test_paymentdisclosure.o `test -f 'gtest/test_paymentdisclosure.cpp' || echo '$(srcdir)/'`gtest/test_paymentdisclosure.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Po
#	$(AM_V_CXX)source='gtest/test_paymentdisclosure.cpp' object='gtest/moonroomcash_gtest-test_paymentdisclosure.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_paymentdisclosure.o `test -f 'gtest/test_paymentdisclosure.cpp' || echo '$(srcdir)/'`gtest/test_paymentdisclosure.cpp

gtest/moonroomcash_gtest-test_paymentdisclosure.obj: gtest/test_paymentdisclosure.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_paymentdisclosure.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Tpo -c -o gtest/moonroomcash_gtest-test_paymentdisclosure.obj `if test -f 'gtest/test_paymentdisclosure.cpp'; then $(CYGPATH_W) 'gtest/test_paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_paymentdisclosure.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_paymentdisclosure.Po
#	$(AM_V_CXX)source='gtest/test_paymentdisclosure.cpp' object='gtest/moonroomcash_gtest-test_paymentdisclosure.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_paymentdisclosure.obj `if test -f 'gtest/test_paymentdisclosure.cpp'; then $(CYGPATH_W) 'gtest/test_paymentdisclosure.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_paymentdisclosure.cpp'; fi`

gtest/moonroomcash_gtest-test_checkblock.o: gtest/test_checkblock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_checkblock.o -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Tpo -c -o gtest/moonroomcash_gtest-test_checkblock.o `test -f 'gtest/test_checkblock.cpp' || echo '$(srcdir)/'`gtest/test_checkblock.cpp
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Po
#	$(AM_V_CXX)source='gtest/test_checkblock.cpp' object='gtest/moonroomcash_gtest-test_checkblock.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_checkblock.o `test -f 'gtest/test_checkblock.cpp' || echo '$(srcdir)/'`gtest/test_checkblock.cpp

gtest/moonroomcash_gtest-test_checkblock.obj: gtest/test_checkblock.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT gtest/moonroomcash_gtest-test_checkblock.obj -MD -MP -MF gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Tpo -c -o gtest/moonroomcash_gtest-test_checkblock.obj `if test -f 'gtest/test_checkblock.cpp'; then $(CYGPATH_W) 'gtest/test_checkblock.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_checkblock.cpp'; fi`
	$(AM_V_at)$(am__mv) gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Tpo gtest/$(DEPDIR)/moonroomcash_gtest-test_checkblock.Po
#	$(AM_V_CXX)source='gtest/test_checkblock.cpp' object='gtest/moonroomcash_gtest-test_checkblock.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o gtest/moonroomcash_gtest-test_checkblock.obj `if test -f 'gtest/test_checkblock.cpp'; then $(CYGPATH_W) 'gtest/test_checkblock.cpp'; else $(CYGPATH_W) '$(srcdir)/gtest/test_checkblock.cpp'; fi`

wallet/gtest/moonroomcash_gtest-test_wallet.o: wallet/gtest/test_wallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT wallet/gtest/moonroomcash_gtest-test_wallet.o -MD -MP -MF wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Tpo -c -o wallet/gtest/moonroomcash_gtest-test_wallet.o `test -f 'wallet/gtest/test_wallet.cpp' || echo '$(srcdir)/'`wallet/gtest/test_wallet.cpp
	$(AM_V_at)$(am__mv) wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Tpo wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Po
#	$(AM_V_CXX)source='wallet/gtest/test_wallet.cpp' object='wallet/gtest/moonroomcash_gtest-test_wallet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o wallet/gtest/moonroomcash_gtest-test_wallet.o `test -f 'wallet/gtest/test_wallet.cpp' || echo '$(srcdir)/'`wallet/gtest/test_wallet.cpp

wallet/gtest/moonroomcash_gtest-test_wallet.obj: wallet/gtest/test_wallet.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -MT wallet/gtest/moonroomcash_gtest-test_wallet.obj -MD -MP -MF wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Tpo -c -o wallet/gtest/moonroomcash_gtest-test_wallet.obj `if test -f 'wallet/gtest/test_wallet.cpp'; then $(CYGPATH_W) 'wallet/gtest/test_wallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/gtest/test_wallet.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Tpo wallet/gtest/$(DEPDIR)/moonroomcash_gtest-test_wallet.Po
#	$(AM_V_CXX)source='wallet/gtest/test_wallet.cpp' object='wallet/gtest/moonroomcash_gtest-test_wallet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_gtest_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_gtest_CXXFLAGS) $(CXXFLAGS) -c -o wallet/gtest/moonroomcash_gtest-test_wallet.obj `if test -f 'wallet/gtest/test_wallet.cpp'; then $(CYGPATH_W) 'wallet/gtest/test_wallet.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/gtest/test_wallet.cpp'; fi`

moonroomcash_tx-bitcoin-tx.o: bitcoin-tx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_tx_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_tx_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash_tx-bitcoin-tx.o -MD -MP -MF $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Tpo -c -o moonroomcash_tx-bitcoin-tx.o `test -f 'bitcoin-tx.cpp' || echo '$(srcdir)/'`bitcoin-tx.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Tpo $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Po
#	$(AM_V_CXX)source='bitcoin-tx.cpp' object='moonroomcash_tx-bitcoin-tx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_tx_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_tx_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash_tx-bitcoin-tx.o `test -f 'bitcoin-tx.cpp' || echo '$(srcdir)/'`bitcoin-tx.cpp

moonroomcash_tx-bitcoin-tx.obj: bitcoin-tx.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_tx_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_tx_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash_tx-bitcoin-tx.obj -MD -MP -MF $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Tpo -c -o moonroomcash_tx-bitcoin-tx.obj `if test -f 'bitcoin-tx.cpp'; then $(CYGPATH_W) 'bitcoin-tx.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoin-tx.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Tpo $(DEPDIR)/moonroomcash_tx-bitcoin-tx.Po
#	$(AM_V_CXX)source='bitcoin-tx.cpp' object='moonroomcash_tx-bitcoin-tx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_tx_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_tx_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash_tx-bitcoin-tx.obj `if test -f 'bitcoin-tx.cpp'; then $(CYGPATH_W) 'bitcoin-tx.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoin-tx.cpp'; fi`

moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.o: moonroomcash/CreateJoinSplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_CreateJoinSplit_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_CreateJoinSplit_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.o -MD -MP -MF moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Tpo -c -o moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.o `test -f 'moonroomcash/CreateJoinSplit.cpp' || echo '$(srcdir)/'`moonroomcash/CreateJoinSplit.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Tpo moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Po
#	$(AM_V_CXX)source='moonroomcash/CreateJoinSplit.cpp' object='moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_CreateJoinSplit_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_CreateJoinSplit_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.o `test -f 'moonroomcash/CreateJoinSplit.cpp' || echo '$(srcdir)/'`moonroomcash/CreateJoinSplit.cpp

moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.obj: moonroomcash/CreateJoinSplit.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_CreateJoinSplit_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_CreateJoinSplit_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.obj -MD -MP -MF moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Tpo -c -o moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.obj `if test -f 'moonroomcash/CreateJoinSplit.cpp'; then $(CYGPATH_W) 'moonroomcash/CreateJoinSplit.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/CreateJoinSplit.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Tpo moonroomcash/$(DEPDIR)/moonroomcash_CreateJoinSplit-CreateJoinSplit.Po
#	$(AM_V_CXX)source='moonroomcash/CreateJoinSplit.cpp' object='moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_CreateJoinSplit_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_CreateJoinSplit_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/moonroomcash_CreateJoinSplit-CreateJoinSplit.obj `if test -f 'moonroomcash/CreateJoinSplit.cpp'; then $(CYGPATH_W) 'moonroomcash/CreateJoinSplit.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/CreateJoinSplit.cpp'; fi`

moonroomcash/moonroomcash_GenerateParams-GenerateParams.o: moonroomcash/GenerateParams.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_GenerateParams_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_GenerateParams_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/moonroomcash_GenerateParams-GenerateParams.o -MD -MP -MF moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Tpo -c -o moonroomcash/moonroomcash_GenerateParams-GenerateParams.o `test -f 'moonroomcash/GenerateParams.cpp' || echo '$(srcdir)/'`moonroomcash/GenerateParams.cpp
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Tpo moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Po
#	$(AM_V_CXX)source='moonroomcash/GenerateParams.cpp' object='moonroomcash/moonroomcash_GenerateParams-GenerateParams.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_GenerateParams_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_GenerateParams_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/moonroomcash_GenerateParams-GenerateParams.o `test -f 'moonroomcash/GenerateParams.cpp' || echo '$(srcdir)/'`moonroomcash/GenerateParams.cpp

moonroomcash/moonroomcash_GenerateParams-GenerateParams.obj: moonroomcash/GenerateParams.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_GenerateParams_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_GenerateParams_CXXFLAGS) $(CXXFLAGS) -MT moonroomcash/moonroomcash_GenerateParams-GenerateParams.obj -MD -MP -MF moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Tpo -c -o moonroomcash/moonroomcash_GenerateParams-GenerateParams.obj `if test -f 'moonroomcash/GenerateParams.cpp'; then $(CYGPATH_W) 'moonroomcash/GenerateParams.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/GenerateParams.cpp'; fi`
	$(AM_V_at)$(am__mv) moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Tpo moonroomcash/$(DEPDIR)/moonroomcash_GenerateParams-GenerateParams.Po
#	$(AM_V_CXX)source='moonroomcash/GenerateParams.cpp' object='moonroomcash/moonroomcash_GenerateParams-GenerateParams.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcash_GenerateParams_CPPFLAGS) $(CPPFLAGS) $(moonroomcash_GenerateParams_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcash/moonroomcash_GenerateParams-GenerateParams.obj `if test -f 'moonroomcash/GenerateParams.cpp'; then $(CYGPATH_W) 'moonroomcash/GenerateParams.cpp'; else $(CYGPATH_W) '$(srcdir)/moonroomcash/GenerateParams.cpp'; fi`

moonroomcashd-bitcoind.o: bitcoind.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcashd_CPPFLAGS) $(CPPFLAGS) $(moonroomcashd_CXXFLAGS) $(CXXFLAGS) -MT moonroomcashd-bitcoind.o -MD -MP -MF $(DEPDIR)/moonroomcashd-bitcoind.Tpo -c -o moonroomcashd-bitcoind.o `test -f 'bitcoind.cpp' || echo '$(srcdir)/'`bitcoind.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcashd-bitcoind.Tpo $(DEPDIR)/moonroomcashd-bitcoind.Po
#	$(AM_V_CXX)source='bitcoind.cpp' object='moonroomcashd-bitcoind.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcashd_CPPFLAGS) $(CPPFLAGS) $(moonroomcashd_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcashd-bitcoind.o `test -f 'bitcoind.cpp' || echo '$(srcdir)/'`bitcoind.cpp

moonroomcashd-bitcoind.obj: bitcoind.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcashd_CPPFLAGS) $(CPPFLAGS) $(moonroomcashd_CXXFLAGS) $(CXXFLAGS) -MT moonroomcashd-bitcoind.obj -MD -MP -MF $(DEPDIR)/moonroomcashd-bitcoind.Tpo -c -o moonroomcashd-bitcoind.obj `if test -f 'bitcoind.cpp'; then $(CYGPATH_W) 'bitcoind.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoind.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/moonroomcashd-bitcoind.Tpo $(DEPDIR)/moonroomcashd-bitcoind.Po
#	$(AM_V_CXX)source='bitcoind.cpp' object='moonroomcashd-bitcoind.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(moonroomcashd_CPPFLAGS) $(CPPFLAGS) $(moonroomcashd_CXXFLAGS) $(CXXFLAGS) -c -o moonroomcashd-bitcoind.obj `if test -f 'bitcoind.cpp'; then $(CYGPATH_W) 'bitcoind.cpp'; else $(CYGPATH_W) '$(srcdir)/bitcoind.cpp'; fi`

test/test_test_bitcoin-arith_uint256_tests.o: test/arith_uint256_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-arith_uint256_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Tpo -c -o test/test_test_bitcoin-arith_uint256_tests.o `test -f 'test/arith_uint256_tests.cpp' || echo '$(srcdir)/'`test/arith_uint256_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Po
#	$(AM_V_CXX)source='test/arith_uint256_tests.cpp' object='test/test_test_bitcoin-arith_uint256_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-arith_uint256_tests.o `test -f 'test/arith_uint256_tests.cpp' || echo '$(srcdir)/'`test/arith_uint256_tests.cpp

test/test_test_bitcoin-arith_uint256_tests.obj: test/arith_uint256_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-arith_uint256_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Tpo -c -o test/test_test_bitcoin-arith_uint256_tests.obj `if test -f 'test/arith_uint256_tests.cpp'; then $(CYGPATH_W) 'test/arith_uint256_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/arith_uint256_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-arith_uint256_tests.Po
#	$(AM_V_CXX)source='test/arith_uint256_tests.cpp' object='test/test_test_bitcoin-arith_uint256_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-arith_uint256_tests.obj `if test -f 'test/arith_uint256_tests.cpp'; then $(CYGPATH_W) 'test/arith_uint256_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/arith_uint256_tests.cpp'; fi`

test/test_test_bitcoin-addrman_tests.o: test/addrman_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-addrman_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Tpo -c -o test/test_test_bitcoin-addrman_tests.o `test -f 'test/addrman_tests.cpp' || echo '$(srcdir)/'`test/addrman_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Po
#	$(AM_V_CXX)source='test/addrman_tests.cpp' object='test/test_test_bitcoin-addrman_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-addrman_tests.o `test -f 'test/addrman_tests.cpp' || echo '$(srcdir)/'`test/addrman_tests.cpp

test/test_test_bitcoin-addrman_tests.obj: test/addrman_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-addrman_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Tpo -c -o test/test_test_bitcoin-addrman_tests.obj `if test -f 'test/addrman_tests.cpp'; then $(CYGPATH_W) 'test/addrman_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/addrman_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-addrman_tests.Po
#	$(AM_V_CXX)source='test/addrman_tests.cpp' object='test/test_test_bitcoin-addrman_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-addrman_tests.obj `if test -f 'test/addrman_tests.cpp'; then $(CYGPATH_W) 'test/addrman_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/addrman_tests.cpp'; fi`

test/test_test_bitcoin-alert_tests.o: test/alert_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-alert_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-alert_tests.Tpo -c -o test/test_test_bitcoin-alert_tests.o `test -f 'test/alert_tests.cpp' || echo '$(srcdir)/'`test/alert_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-alert_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-alert_tests.Po
#	$(AM_V_CXX)source='test/alert_tests.cpp' object='test/test_test_bitcoin-alert_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-alert_tests.o `test -f 'test/alert_tests.cpp' || echo '$(srcdir)/'`test/alert_tests.cpp

test/test_test_bitcoin-alert_tests.obj: test/alert_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-alert_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-alert_tests.Tpo -c -o test/test_test_bitcoin-alert_tests.obj `if test -f 'test/alert_tests.cpp'; then $(CYGPATH_W) 'test/alert_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/alert_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-alert_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-alert_tests.Po
#	$(AM_V_CXX)source='test/alert_tests.cpp' object='test/test_test_bitcoin-alert_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-alert_tests.obj `if test -f 'test/alert_tests.cpp'; then $(CYGPATH_W) 'test/alert_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/alert_tests.cpp'; fi`

test/test_test_bitcoin-allocator_tests.o: test/allocator_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-allocator_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Tpo -c -o test/test_test_bitcoin-allocator_tests.o `test -f 'test/allocator_tests.cpp' || echo '$(srcdir)/'`test/allocator_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Po
#	$(AM_V_CXX)source='test/allocator_tests.cpp' object='test/test_test_bitcoin-allocator_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-allocator_tests.o `test -f 'test/allocator_tests.cpp' || echo '$(srcdir)/'`test/allocator_tests.cpp

test/test_test_bitcoin-allocator_tests.obj: test/allocator_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-allocator_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Tpo -c -o test/test_test_bitcoin-allocator_tests.obj `if test -f 'test/allocator_tests.cpp'; then $(CYGPATH_W) 'test/allocator_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/allocator_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-allocator_tests.Po
#	$(AM_V_CXX)source='test/allocator_tests.cpp' object='test/test_test_bitcoin-allocator_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-allocator_tests.obj `if test -f 'test/allocator_tests.cpp'; then $(CYGPATH_W) 'test/allocator_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/allocator_tests.cpp'; fi`

test/test_test_bitcoin-base32_tests.o: test/base32_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base32_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base32_tests.Tpo -c -o test/test_test_bitcoin-base32_tests.o `test -f 'test/base32_tests.cpp' || echo '$(srcdir)/'`test/base32_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base32_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base32_tests.Po
#	$(AM_V_CXX)source='test/base32_tests.cpp' object='test/test_test_bitcoin-base32_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base32_tests.o `test -f 'test/base32_tests.cpp' || echo '$(srcdir)/'`test/base32_tests.cpp

test/test_test_bitcoin-base32_tests.obj: test/base32_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base32_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base32_tests.Tpo -c -o test/test_test_bitcoin-base32_tests.obj `if test -f 'test/base32_tests.cpp'; then $(CYGPATH_W) 'test/base32_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base32_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base32_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base32_tests.Po
#	$(AM_V_CXX)source='test/base32_tests.cpp' object='test/test_test_bitcoin-base32_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base32_tests.obj `if test -f 'test/base32_tests.cpp'; then $(CYGPATH_W) 'test/base32_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base32_tests.cpp'; fi`

test/test_test_bitcoin-base58_tests.o: test/base58_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base58_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base58_tests.Tpo -c -o test/test_test_bitcoin-base58_tests.o `test -f 'test/base58_tests.cpp' || echo '$(srcdir)/'`test/base58_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base58_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base58_tests.Po
#	$(AM_V_CXX)source='test/base58_tests.cpp' object='test/test_test_bitcoin-base58_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base58_tests.o `test -f 'test/base58_tests.cpp' || echo '$(srcdir)/'`test/base58_tests.cpp

test/test_test_bitcoin-base58_tests.obj: test/base58_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base58_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base58_tests.Tpo -c -o test/test_test_bitcoin-base58_tests.obj `if test -f 'test/base58_tests.cpp'; then $(CYGPATH_W) 'test/base58_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base58_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base58_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base58_tests.Po
#	$(AM_V_CXX)source='test/base58_tests.cpp' object='test/test_test_bitcoin-base58_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base58_tests.obj `if test -f 'test/base58_tests.cpp'; then $(CYGPATH_W) 'test/base58_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base58_tests.cpp'; fi`

test/test_test_bitcoin-base64_tests.o: test/base64_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base64_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base64_tests.Tpo -c -o test/test_test_bitcoin-base64_tests.o `test -f 'test/base64_tests.cpp' || echo '$(srcdir)/'`test/base64_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base64_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base64_tests.Po
#	$(AM_V_CXX)source='test/base64_tests.cpp' object='test/test_test_bitcoin-base64_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base64_tests.o `test -f 'test/base64_tests.cpp' || echo '$(srcdir)/'`test/base64_tests.cpp

test/test_test_bitcoin-base64_tests.obj: test/base64_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-base64_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-base64_tests.Tpo -c -o test/test_test_bitcoin-base64_tests.obj `if test -f 'test/base64_tests.cpp'; then $(CYGPATH_W) 'test/base64_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base64_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-base64_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-base64_tests.Po
#	$(AM_V_CXX)source='test/base64_tests.cpp' object='test/test_test_bitcoin-base64_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-base64_tests.obj `if test -f 'test/base64_tests.cpp'; then $(CYGPATH_W) 'test/base64_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/base64_tests.cpp'; fi`

test/test_test_bitcoin-bip32_tests.o: test/bip32_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-bip32_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Tpo -c -o test/test_test_bitcoin-bip32_tests.o `test -f 'test/bip32_tests.cpp' || echo '$(srcdir)/'`test/bip32_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Po
#	$(AM_V_CXX)source='test/bip32_tests.cpp' object='test/test_test_bitcoin-bip32_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-bip32_tests.o `test -f 'test/bip32_tests.cpp' || echo '$(srcdir)/'`test/bip32_tests.cpp

test/test_test_bitcoin-bip32_tests.obj: test/bip32_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-bip32_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Tpo -c -o test/test_test_bitcoin-bip32_tests.obj `if test -f 'test/bip32_tests.cpp'; then $(CYGPATH_W) 'test/bip32_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/bip32_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-bip32_tests.Po
#	$(AM_V_CXX)source='test/bip32_tests.cpp' object='test/test_test_bitcoin-bip32_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-bip32_tests.obj `if test -f 'test/bip32_tests.cpp'; then $(CYGPATH_W) 'test/bip32_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/bip32_tests.cpp'; fi`

test/test_test_bitcoin-bloom_tests.o: test/bloom_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-bloom_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Tpo -c -o test/test_test_bitcoin-bloom_tests.o `test -f 'test/bloom_tests.cpp' || echo '$(srcdir)/'`test/bloom_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Po
#	$(AM_V_CXX)source='test/bloom_tests.cpp' object='test/test_test_bitcoin-bloom_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-bloom_tests.o `test -f 'test/bloom_tests.cpp' || echo '$(srcdir)/'`test/bloom_tests.cpp

test/test_test_bitcoin-bloom_tests.obj: test/bloom_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-bloom_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Tpo -c -o test/test_test_bitcoin-bloom_tests.obj `if test -f 'test/bloom_tests.cpp'; then $(CYGPATH_W) 'test/bloom_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/bloom_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-bloom_tests.Po
#	$(AM_V_CXX)source='test/bloom_tests.cpp' object='test/test_test_bitcoin-bloom_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-bloom_tests.obj `if test -f 'test/bloom_tests.cpp'; then $(CYGPATH_W) 'test/bloom_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/bloom_tests.cpp'; fi`

test/test_test_bitcoin-checkblock_tests.o: test/checkblock_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-checkblock_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Tpo -c -o test/test_test_bitcoin-checkblock_tests.o `test -f 'test/checkblock_tests.cpp' || echo '$(srcdir)/'`test/checkblock_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Po
#	$(AM_V_CXX)source='test/checkblock_tests.cpp' object='test/test_test_bitcoin-checkblock_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-checkblock_tests.o `test -f 'test/checkblock_tests.cpp' || echo '$(srcdir)/'`test/checkblock_tests.cpp

test/test_test_bitcoin-checkblock_tests.obj: test/checkblock_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-checkblock_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Tpo -c -o test/test_test_bitcoin-checkblock_tests.obj `if test -f 'test/checkblock_tests.cpp'; then $(CYGPATH_W) 'test/checkblock_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/checkblock_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-checkblock_tests.Po
#	$(AM_V_CXX)source='test/checkblock_tests.cpp' object='test/test_test_bitcoin-checkblock_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-checkblock_tests.obj `if test -f 'test/checkblock_tests.cpp'; then $(CYGPATH_W) 'test/checkblock_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/checkblock_tests.cpp'; fi`

test/test_test_bitcoin-Checkpoints_tests.o: test/Checkpoints_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-Checkpoints_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Tpo -c -o test/test_test_bitcoin-Checkpoints_tests.o `test -f 'test/Checkpoints_tests.cpp' || echo '$(srcdir)/'`test/Checkpoints_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Po
#	$(AM_V_CXX)source='test/Checkpoints_tests.cpp' object='test/test_test_bitcoin-Checkpoints_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-Checkpoints_tests.o `test -f 'test/Checkpoints_tests.cpp' || echo '$(srcdir)/'`test/Checkpoints_tests.cpp

test/test_test_bitcoin-Checkpoints_tests.obj: test/Checkpoints_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-Checkpoints_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Tpo -c -o test/test_test_bitcoin-Checkpoints_tests.obj `if test -f 'test/Checkpoints_tests.cpp'; then $(CYGPATH_W) 'test/Checkpoints_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/Checkpoints_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-Checkpoints_tests.Po
#	$(AM_V_CXX)source='test/Checkpoints_tests.cpp' object='test/test_test_bitcoin-Checkpoints_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-Checkpoints_tests.obj `if test -f 'test/Checkpoints_tests.cpp'; then $(CYGPATH_W) 'test/Checkpoints_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/Checkpoints_tests.cpp'; fi`

test/test_test_bitcoin-coins_tests.o: test/coins_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-coins_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-coins_tests.Tpo -c -o test/test_test_bitcoin-coins_tests.o `test -f 'test/coins_tests.cpp' || echo '$(srcdir)/'`test/coins_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-coins_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-coins_tests.Po
#	$(AM_V_CXX)source='test/coins_tests.cpp' object='test/test_test_bitcoin-coins_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-coins_tests.o `test -f 'test/coins_tests.cpp' || echo '$(srcdir)/'`test/coins_tests.cpp

test/test_test_bitcoin-coins_tests.obj: test/coins_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-coins_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-coins_tests.Tpo -c -o test/test_test_bitcoin-coins_tests.obj `if test -f 'test/coins_tests.cpp'; then $(CYGPATH_W) 'test/coins_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/coins_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-coins_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-coins_tests.Po
#	$(AM_V_CXX)source='test/coins_tests.cpp' object='test/test_test_bitcoin-coins_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-coins_tests.obj `if test -f 'test/coins_tests.cpp'; then $(CYGPATH_W) 'test/coins_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/coins_tests.cpp'; fi`

test/test_test_bitcoin-compress_tests.o: test/compress_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-compress_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-compress_tests.Tpo -c -o test/test_test_bitcoin-compress_tests.o `test -f 'test/compress_tests.cpp' || echo '$(srcdir)/'`test/compress_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-compress_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-compress_tests.Po
#	$(AM_V_CXX)source='test/compress_tests.cpp' object='test/test_test_bitcoin-compress_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-compress_tests.o `test -f 'test/compress_tests.cpp' || echo '$(srcdir)/'`test/compress_tests.cpp

test/test_test_bitcoin-compress_tests.obj: test/compress_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-compress_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-compress_tests.Tpo -c -o test/test_test_bitcoin-compress_tests.obj `if test -f 'test/compress_tests.cpp'; then $(CYGPATH_W) 'test/compress_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/compress_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-compress_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-compress_tests.Po
#	$(AM_V_CXX)source='test/compress_tests.cpp' object='test/test_test_bitcoin-compress_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-compress_tests.obj `if test -f 'test/compress_tests.cpp'; then $(CYGPATH_W) 'test/compress_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/compress_tests.cpp'; fi`

test/test_test_bitcoin-crypto_tests.o: test/crypto_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-crypto_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Tpo -c -o test/test_test_bitcoin-crypto_tests.o `test -f 'test/crypto_tests.cpp' || echo '$(srcdir)/'`test/crypto_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Po
#	$(AM_V_CXX)source='test/crypto_tests.cpp' object='test/test_test_bitcoin-crypto_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-crypto_tests.o `test -f 'test/crypto_tests.cpp' || echo '$(srcdir)/'`test/crypto_tests.cpp

test/test_test_bitcoin-crypto_tests.obj: test/crypto_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-crypto_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Tpo -c -o test/test_test_bitcoin-crypto_tests.obj `if test -f 'test/crypto_tests.cpp'; then $(CYGPATH_W) 'test/crypto_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/crypto_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-crypto_tests.Po
#	$(AM_V_CXX)source='test/crypto_tests.cpp' object='test/test_test_bitcoin-crypto_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-crypto_tests.obj `if test -f 'test/crypto_tests.cpp'; then $(CYGPATH_W) 'test/crypto_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/crypto_tests.cpp'; fi`

test/test_test_bitcoin-DoS_tests.o: test/DoS_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-DoS_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Tpo -c -o test/test_test_bitcoin-DoS_tests.o `test -f 'test/DoS_tests.cpp' || echo '$(srcdir)/'`test/DoS_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Po
#	$(AM_V_CXX)source='test/DoS_tests.cpp' object='test/test_test_bitcoin-DoS_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-DoS_tests.o `test -f 'test/DoS_tests.cpp' || echo '$(srcdir)/'`test/DoS_tests.cpp

test/test_test_bitcoin-DoS_tests.obj: test/DoS_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-DoS_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Tpo -c -o test/test_test_bitcoin-DoS_tests.obj `if test -f 'test/DoS_tests.cpp'; then $(CYGPATH_W) 'test/DoS_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/DoS_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-DoS_tests.Po
#	$(AM_V_CXX)source='test/DoS_tests.cpp' object='test/test_test_bitcoin-DoS_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-DoS_tests.obj `if test -f 'test/DoS_tests.cpp'; then $(CYGPATH_W) 'test/DoS_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/DoS_tests.cpp'; fi`

test/test_test_bitcoin-equihash_tests.o: test/equihash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-equihash_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Tpo -c -o test/test_test_bitcoin-equihash_tests.o `test -f 'test/equihash_tests.cpp' || echo '$(srcdir)/'`test/equihash_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Po
#	$(AM_V_CXX)source='test/equihash_tests.cpp' object='test/test_test_bitcoin-equihash_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-equihash_tests.o `test -f 'test/equihash_tests.cpp' || echo '$(srcdir)/'`test/equihash_tests.cpp

test/test_test_bitcoin-equihash_tests.obj: test/equihash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-equihash_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Tpo -c -o test/test_test_bitcoin-equihash_tests.obj `if test -f 'test/equihash_tests.cpp'; then $(CYGPATH_W) 'test/equihash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/equihash_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-equihash_tests.Po
#	$(AM_V_CXX)source='test/equihash_tests.cpp' object='test/test_test_bitcoin-equihash_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-equihash_tests.obj `if test -f 'test/equihash_tests.cpp'; then $(CYGPATH_W) 'test/equihash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/equihash_tests.cpp'; fi`

test/test_test_bitcoin-getarg_tests.o: test/getarg_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-getarg_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Tpo -c -o test/test_test_bitcoin-getarg_tests.o `test -f 'test/getarg_tests.cpp' || echo '$(srcdir)/'`test/getarg_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Po
#	$(AM_V_CXX)source='test/getarg_tests.cpp' object='test/test_test_bitcoin-getarg_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-getarg_tests.o `test -f 'test/getarg_tests.cpp' || echo '$(srcdir)/'`test/getarg_tests.cpp

test/test_test_bitcoin-getarg_tests.obj: test/getarg_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-getarg_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Tpo -c -o test/test_test_bitcoin-getarg_tests.obj `if test -f 'test/getarg_tests.cpp'; then $(CYGPATH_W) 'test/getarg_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/getarg_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-getarg_tests.Po
#	$(AM_V_CXX)source='test/getarg_tests.cpp' object='test/test_test_bitcoin-getarg_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-getarg_tests.obj `if test -f 'test/getarg_tests.cpp'; then $(CYGPATH_W) 'test/getarg_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/getarg_tests.cpp'; fi`

test/test_test_bitcoin-hash_tests.o: test/hash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-hash_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-hash_tests.Tpo -c -o test/test_test_bitcoin-hash_tests.o `test -f 'test/hash_tests.cpp' || echo '$(srcdir)/'`test/hash_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-hash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-hash_tests.Po
#	$(AM_V_CXX)source='test/hash_tests.cpp' object='test/test_test_bitcoin-hash_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-hash_tests.o `test -f 'test/hash_tests.cpp' || echo '$(srcdir)/'`test/hash_tests.cpp

test/test_test_bitcoin-hash_tests.obj: test/hash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-hash_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-hash_tests.Tpo -c -o test/test_test_bitcoin-hash_tests.obj `if test -f 'test/hash_tests.cpp'; then $(CYGPATH_W) 'test/hash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/hash_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-hash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-hash_tests.Po
#	$(AM_V_CXX)source='test/hash_tests.cpp' object='test/test_test_bitcoin-hash_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-hash_tests.obj `if test -f 'test/hash_tests.cpp'; then $(CYGPATH_W) 'test/hash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/hash_tests.cpp'; fi`

test/test_test_bitcoin-key_tests.o: test/key_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-key_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-key_tests.Tpo -c -o test/test_test_bitcoin-key_tests.o `test -f 'test/key_tests.cpp' || echo '$(srcdir)/'`test/key_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-key_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-key_tests.Po
#	$(AM_V_CXX)source='test/key_tests.cpp' object='test/test_test_bitcoin-key_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-key_tests.o `test -f 'test/key_tests.cpp' || echo '$(srcdir)/'`test/key_tests.cpp

test/test_test_bitcoin-key_tests.obj: test/key_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-key_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-key_tests.Tpo -c -o test/test_test_bitcoin-key_tests.obj `if test -f 'test/key_tests.cpp'; then $(CYGPATH_W) 'test/key_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/key_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-key_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-key_tests.Po
#	$(AM_V_CXX)source='test/key_tests.cpp' object='test/test_test_bitcoin-key_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-key_tests.obj `if test -f 'test/key_tests.cpp'; then $(CYGPATH_W) 'test/key_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/key_tests.cpp'; fi`

test/test_test_bitcoin-main_tests.o: test/main_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-main_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-main_tests.Tpo -c -o test/test_test_bitcoin-main_tests.o `test -f 'test/main_tests.cpp' || echo '$(srcdir)/'`test/main_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-main_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-main_tests.Po
#	$(AM_V_CXX)source='test/main_tests.cpp' object='test/test_test_bitcoin-main_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-main_tests.o `test -f 'test/main_tests.cpp' || echo '$(srcdir)/'`test/main_tests.cpp

test/test_test_bitcoin-main_tests.obj: test/main_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-main_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-main_tests.Tpo -c -o test/test_test_bitcoin-main_tests.obj `if test -f 'test/main_tests.cpp'; then $(CYGPATH_W) 'test/main_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/main_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-main_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-main_tests.Po
#	$(AM_V_CXX)source='test/main_tests.cpp' object='test/test_test_bitcoin-main_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-main_tests.obj `if test -f 'test/main_tests.cpp'; then $(CYGPATH_W) 'test/main_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/main_tests.cpp'; fi`

test/test_test_bitcoin-mempool_tests.o: test/mempool_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-mempool_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Tpo -c -o test/test_test_bitcoin-mempool_tests.o `test -f 'test/mempool_tests.cpp' || echo '$(srcdir)/'`test/mempool_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Po
#	$(AM_V_CXX)source='test/mempool_tests.cpp' object='test/test_test_bitcoin-mempool_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-mempool_tests.o `test -f 'test/mempool_tests.cpp' || echo '$(srcdir)/'`test/mempool_tests.cpp

test/test_test_bitcoin-mempool_tests.obj: test/mempool_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-mempool_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Tpo -c -o test/test_test_bitcoin-mempool_tests.obj `if test -f 'test/mempool_tests.cpp'; then $(CYGPATH_W) 'test/mempool_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/mempool_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-mempool_tests.Po
#	$(AM_V_CXX)source='test/mempool_tests.cpp' object='test/test_test_bitcoin-mempool_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-mempool_tests.obj `if test -f 'test/mempool_tests.cpp'; then $(CYGPATH_W) 'test/mempool_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/mempool_tests.cpp'; fi`

test/test_test_bitcoin-miner_tests.o: test/miner_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-miner_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-miner_tests.Tpo -c -o test/test_test_bitcoin-miner_tests.o `test -f 'test/miner_tests.cpp' || echo '$(srcdir)/'`test/miner_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-miner_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-miner_tests.Po
#	$(AM_V_CXX)source='test/miner_tests.cpp' object='test/test_test_bitcoin-miner_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-miner_tests.o `test -f 'test/miner_tests.cpp' || echo '$(srcdir)/'`test/miner_tests.cpp

test/test_test_bitcoin-miner_tests.obj: test/miner_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-miner_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-miner_tests.Tpo -c -o test/test_test_bitcoin-miner_tests.obj `if test -f 'test/miner_tests.cpp'; then $(CYGPATH_W) 'test/miner_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/miner_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-miner_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-miner_tests.Po
#	$(AM_V_CXX)source='test/miner_tests.cpp' object='test/test_test_bitcoin-miner_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-miner_tests.obj `if test -f 'test/miner_tests.cpp'; then $(CYGPATH_W) 'test/miner_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/miner_tests.cpp'; fi`

test/test_test_bitcoin-mruset_tests.o: test/mruset_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-mruset_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Tpo -c -o test/test_test_bitcoin-mruset_tests.o `test -f 'test/mruset_tests.cpp' || echo '$(srcdir)/'`test/mruset_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Po
#	$(AM_V_CXX)source='test/mruset_tests.cpp' object='test/test_test_bitcoin-mruset_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-mruset_tests.o `test -f 'test/mruset_tests.cpp' || echo '$(srcdir)/'`test/mruset_tests.cpp

test/test_test_bitcoin-mruset_tests.obj: test/mruset_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-mruset_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Tpo -c -o test/test_test_bitcoin-mruset_tests.obj `if test -f 'test/mruset_tests.cpp'; then $(CYGPATH_W) 'test/mruset_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/mruset_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-mruset_tests.Po
#	$(AM_V_CXX)source='test/mruset_tests.cpp' object='test/test_test_bitcoin-mruset_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-mruset_tests.obj `if test -f 'test/mruset_tests.cpp'; then $(CYGPATH_W) 'test/mruset_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/mruset_tests.cpp'; fi`

test/test_test_bitcoin-multisig_tests.o: test/multisig_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-multisig_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Tpo -c -o test/test_test_bitcoin-multisig_tests.o `test -f 'test/multisig_tests.cpp' || echo '$(srcdir)/'`test/multisig_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Po
#	$(AM_V_CXX)source='test/multisig_tests.cpp' object='test/test_test_bitcoin-multisig_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-multisig_tests.o `test -f 'test/multisig_tests.cpp' || echo '$(srcdir)/'`test/multisig_tests.cpp

test/test_test_bitcoin-multisig_tests.obj: test/multisig_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-multisig_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Tpo -c -o test/test_test_bitcoin-multisig_tests.obj `if test -f 'test/multisig_tests.cpp'; then $(CYGPATH_W) 'test/multisig_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/multisig_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-multisig_tests.Po
#	$(AM_V_CXX)source='test/multisig_tests.cpp' object='test/test_test_bitcoin-multisig_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-multisig_tests.obj `if test -f 'test/multisig_tests.cpp'; then $(CYGPATH_W) 'test/multisig_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/multisig_tests.cpp'; fi`

test/test_test_bitcoin-netbase_tests.o: test/netbase_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-netbase_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Tpo -c -o test/test_test_bitcoin-netbase_tests.o `test -f 'test/netbase_tests.cpp' || echo '$(srcdir)/'`test/netbase_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Po
#	$(AM_V_CXX)source='test/netbase_tests.cpp' object='test/test_test_bitcoin-netbase_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-netbase_tests.o `test -f 'test/netbase_tests.cpp' || echo '$(srcdir)/'`test/netbase_tests.cpp

test/test_test_bitcoin-netbase_tests.obj: test/netbase_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-netbase_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Tpo -c -o test/test_test_bitcoin-netbase_tests.obj `if test -f 'test/netbase_tests.cpp'; then $(CYGPATH_W) 'test/netbase_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/netbase_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-netbase_tests.Po
#	$(AM_V_CXX)source='test/netbase_tests.cpp' object='test/test_test_bitcoin-netbase_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-netbase_tests.obj `if test -f 'test/netbase_tests.cpp'; then $(CYGPATH_W) 'test/netbase_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/netbase_tests.cpp'; fi`

test/test_test_bitcoin-pmt_tests.o: test/pmt_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-pmt_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Tpo -c -o test/test_test_bitcoin-pmt_tests.o `test -f 'test/pmt_tests.cpp' || echo '$(srcdir)/'`test/pmt_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Po
#	$(AM_V_CXX)source='test/pmt_tests.cpp' object='test/test_test_bitcoin-pmt_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-pmt_tests.o `test -f 'test/pmt_tests.cpp' || echo '$(srcdir)/'`test/pmt_tests.cpp

test/test_test_bitcoin-pmt_tests.obj: test/pmt_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-pmt_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Tpo -c -o test/test_test_bitcoin-pmt_tests.obj `if test -f 'test/pmt_tests.cpp'; then $(CYGPATH_W) 'test/pmt_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/pmt_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-pmt_tests.Po
#	$(AM_V_CXX)source='test/pmt_tests.cpp' object='test/test_test_bitcoin-pmt_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-pmt_tests.obj `if test -f 'test/pmt_tests.cpp'; then $(CYGPATH_W) 'test/pmt_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/pmt_tests.cpp'; fi`

test/test_test_bitcoin-policyestimator_tests.o: test/policyestimator_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-policyestimator_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Tpo -c -o test/test_test_bitcoin-policyestimator_tests.o `test -f 'test/policyestimator_tests.cpp' || echo '$(srcdir)/'`test/policyestimator_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Po
#	$(AM_V_CXX)source='test/policyestimator_tests.cpp' object='test/test_test_bitcoin-policyestimator_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-policyestimator_tests.o `test -f 'test/policyestimator_tests.cpp' || echo '$(srcdir)/'`test/policyestimator_tests.cpp

test/test_test_bitcoin-policyestimator_tests.obj: test/policyestimator_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-policyestimator_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Tpo -c -o test/test_test_bitcoin-policyestimator_tests.obj `if test -f 'test/policyestimator_tests.cpp'; then $(CYGPATH_W) 'test/policyestimator_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/policyestimator_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-policyestimator_tests.Po
#	$(AM_V_CXX)source='test/policyestimator_tests.cpp' object='test/test_test_bitcoin-policyestimator_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-policyestimator_tests.obj `if test -f 'test/policyestimator_tests.cpp'; then $(CYGPATH_W) 'test/policyestimator_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/policyestimator_tests.cpp'; fi`

test/test_test_bitcoin-pow_tests.o: test/pow_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-pow_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-pow_tests.Tpo -c -o test/test_test_bitcoin-pow_tests.o `test -f 'test/pow_tests.cpp' || echo '$(srcdir)/'`test/pow_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-pow_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-pow_tests.Po
#	$(AM_V_CXX)source='test/pow_tests.cpp' object='test/test_test_bitcoin-pow_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-pow_tests.o `test -f 'test/pow_tests.cpp' || echo '$(srcdir)/'`test/pow_tests.cpp

test/test_test_bitcoin-pow_tests.obj: test/pow_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-pow_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-pow_tests.Tpo -c -o test/test_test_bitcoin-pow_tests.obj `if test -f 'test/pow_tests.cpp'; then $(CYGPATH_W) 'test/pow_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/pow_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-pow_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-pow_tests.Po
#	$(AM_V_CXX)source='test/pow_tests.cpp' object='test/test_test_bitcoin-pow_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-pow_tests.obj `if test -f 'test/pow_tests.cpp'; then $(CYGPATH_W) 'test/pow_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/pow_tests.cpp'; fi`

test/test_test_bitcoin-raii_event_tests.o: test/raii_event_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-raii_event_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Tpo -c -o test/test_test_bitcoin-raii_event_tests.o `test -f 'test/raii_event_tests.cpp' || echo '$(srcdir)/'`test/raii_event_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Po
#	$(AM_V_CXX)source='test/raii_event_tests.cpp' object='test/test_test_bitcoin-raii_event_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-raii_event_tests.o `test -f 'test/raii_event_tests.cpp' || echo '$(srcdir)/'`test/raii_event_tests.cpp

test/test_test_bitcoin-raii_event_tests.obj: test/raii_event_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-raii_event_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Tpo -c -o test/test_test_bitcoin-raii_event_tests.obj `if test -f 'test/raii_event_tests.cpp'; then $(CYGPATH_W) 'test/raii_event_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/raii_event_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-raii_event_tests.Po
#	$(AM_V_CXX)source='test/raii_event_tests.cpp' object='test/test_test_bitcoin-raii_event_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-raii_event_tests.obj `if test -f 'test/raii_event_tests.cpp'; then $(CYGPATH_W) 'test/raii_event_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/raii_event_tests.cpp'; fi`

test/test_test_bitcoin-reverselock_tests.o: test/reverselock_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-reverselock_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Tpo -c -o test/test_test_bitcoin-reverselock_tests.o `test -f 'test/reverselock_tests.cpp' || echo '$(srcdir)/'`test/reverselock_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Po
#	$(AM_V_CXX)source='test/reverselock_tests.cpp' object='test/test_test_bitcoin-reverselock_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-reverselock_tests.o `test -f 'test/reverselock_tests.cpp' || echo '$(srcdir)/'`test/reverselock_tests.cpp

test/test_test_bitcoin-reverselock_tests.obj: test/reverselock_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-reverselock_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Tpo -c -o test/test_test_bitcoin-reverselock_tests.obj `if test -f 'test/reverselock_tests.cpp'; then $(CYGPATH_W) 'test/reverselock_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/reverselock_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-reverselock_tests.Po
#	$(AM_V_CXX)source='test/reverselock_tests.cpp' object='test/test_test_bitcoin-reverselock_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-reverselock_tests.obj `if test -f 'test/reverselock_tests.cpp'; then $(CYGPATH_W) 'test/reverselock_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/reverselock_tests.cpp'; fi`

test/test_test_bitcoin-rpc_tests.o: test/rpc_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-rpc_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Tpo -c -o test/test_test_bitcoin-rpc_tests.o `test -f 'test/rpc_tests.cpp' || echo '$(srcdir)/'`test/rpc_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Po
#	$(AM_V_CXX)source='test/rpc_tests.cpp' object='test/test_test_bitcoin-rpc_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-rpc_tests.o `test -f 'test/rpc_tests.cpp' || echo '$(srcdir)/'`test/rpc_tests.cpp

test/test_test_bitcoin-rpc_tests.obj: test/rpc_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-rpc_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Tpo -c -o test/test_test_bitcoin-rpc_tests.obj `if test -f 'test/rpc_tests.cpp'; then $(CYGPATH_W) 'test/rpc_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/rpc_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-rpc_tests.Po
#	$(AM_V_CXX)source='test/rpc_tests.cpp' object='test/test_test_bitcoin-rpc_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-rpc_tests.obj `if test -f 'test/rpc_tests.cpp'; then $(CYGPATH_W) 'test/rpc_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/rpc_tests.cpp'; fi`

test/test_test_bitcoin-sanity_tests.o: test/sanity_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sanity_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Tpo -c -o test/test_test_bitcoin-sanity_tests.o `test -f 'test/sanity_tests.cpp' || echo '$(srcdir)/'`test/sanity_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Po
#	$(AM_V_CXX)source='test/sanity_tests.cpp' object='test/test_test_bitcoin-sanity_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sanity_tests.o `test -f 'test/sanity_tests.cpp' || echo '$(srcdir)/'`test/sanity_tests.cpp

test/test_test_bitcoin-sanity_tests.obj: test/sanity_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sanity_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Tpo -c -o test/test_test_bitcoin-sanity_tests.obj `if test -f 'test/sanity_tests.cpp'; then $(CYGPATH_W) 'test/sanity_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sanity_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sanity_tests.Po
#	$(AM_V_CXX)source='test/sanity_tests.cpp' object='test/test_test_bitcoin-sanity_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sanity_tests.obj `if test -f 'test/sanity_tests.cpp'; then $(CYGPATH_W) 'test/sanity_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sanity_tests.cpp'; fi`

test/test_test_bitcoin-scheduler_tests.o: test/scheduler_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-scheduler_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Tpo -c -o test/test_test_bitcoin-scheduler_tests.o `test -f 'test/scheduler_tests.cpp' || echo '$(srcdir)/'`test/scheduler_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Po
#	$(AM_V_CXX)source='test/scheduler_tests.cpp' object='test/test_test_bitcoin-scheduler_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-scheduler_tests.o `test -f 'test/scheduler_tests.cpp' || echo '$(srcdir)/'`test/scheduler_tests.cpp

test/test_test_bitcoin-scheduler_tests.obj: test/scheduler_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-scheduler_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Tpo -c -o test/test_test_bitcoin-scheduler_tests.obj `if test -f 'test/scheduler_tests.cpp'; then $(CYGPATH_W) 'test/scheduler_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/scheduler_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-scheduler_tests.Po
#	$(AM_V_CXX)source='test/scheduler_tests.cpp' object='test/test_test_bitcoin-scheduler_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-scheduler_tests.obj `if test -f 'test/scheduler_tests.cpp'; then $(CYGPATH_W) 'test/scheduler_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/scheduler_tests.cpp'; fi`

test/test_test_bitcoin-script_P2SH_tests.o: test/script_P2SH_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-script_P2SH_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Tpo -c -o test/test_test_bitcoin-script_P2SH_tests.o `test -f 'test/script_P2SH_tests.cpp' || echo '$(srcdir)/'`test/script_P2SH_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Po
#	$(AM_V_CXX)source='test/script_P2SH_tests.cpp' object='test/test_test_bitcoin-script_P2SH_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-script_P2SH_tests.o `test -f 'test/script_P2SH_tests.cpp' || echo '$(srcdir)/'`test/script_P2SH_tests.cpp

test/test_test_bitcoin-script_P2SH_tests.obj: test/script_P2SH_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-script_P2SH_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Tpo -c -o test/test_test_bitcoin-script_P2SH_tests.obj `if test -f 'test/script_P2SH_tests.cpp'; then $(CYGPATH_W) 'test/script_P2SH_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/script_P2SH_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-script_P2SH_tests.Po
#	$(AM_V_CXX)source='test/script_P2SH_tests.cpp' object='test/test_test_bitcoin-script_P2SH_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-script_P2SH_tests.obj `if test -f 'test/script_P2SH_tests.cpp'; then $(CYGPATH_W) 'test/script_P2SH_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/script_P2SH_tests.cpp'; fi`

test/test_test_bitcoin-script_tests.o: test/script_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-script_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-script_tests.Tpo -c -o test/test_test_bitcoin-script_tests.o `test -f 'test/script_tests.cpp' || echo '$(srcdir)/'`test/script_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-script_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-script_tests.Po
#	$(AM_V_CXX)source='test/script_tests.cpp' object='test/test_test_bitcoin-script_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-script_tests.o `test -f 'test/script_tests.cpp' || echo '$(srcdir)/'`test/script_tests.cpp

test/test_test_bitcoin-script_tests.obj: test/script_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-script_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-script_tests.Tpo -c -o test/test_test_bitcoin-script_tests.obj `if test -f 'test/script_tests.cpp'; then $(CYGPATH_W) 'test/script_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/script_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-script_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-script_tests.Po
#	$(AM_V_CXX)source='test/script_tests.cpp' object='test/test_test_bitcoin-script_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-script_tests.obj `if test -f 'test/script_tests.cpp'; then $(CYGPATH_W) 'test/script_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/script_tests.cpp'; fi`

test/test_test_bitcoin-scriptnum_tests.o: test/scriptnum_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-scriptnum_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Tpo -c -o test/test_test_bitcoin-scriptnum_tests.o `test -f 'test/scriptnum_tests.cpp' || echo '$(srcdir)/'`test/scriptnum_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Po
#	$(AM_V_CXX)source='test/scriptnum_tests.cpp' object='test/test_test_bitcoin-scriptnum_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-scriptnum_tests.o `test -f 'test/scriptnum_tests.cpp' || echo '$(srcdir)/'`test/scriptnum_tests.cpp

test/test_test_bitcoin-scriptnum_tests.obj: test/scriptnum_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-scriptnum_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Tpo -c -o test/test_test_bitcoin-scriptnum_tests.obj `if test -f 'test/scriptnum_tests.cpp'; then $(CYGPATH_W) 'test/scriptnum_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/scriptnum_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-scriptnum_tests.Po
#	$(AM_V_CXX)source='test/scriptnum_tests.cpp' object='test/test_test_bitcoin-scriptnum_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-scriptnum_tests.obj `if test -f 'test/scriptnum_tests.cpp'; then $(CYGPATH_W) 'test/scriptnum_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/scriptnum_tests.cpp'; fi`

test/test_test_bitcoin-serialize_tests.o: test/serialize_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-serialize_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Tpo -c -o test/test_test_bitcoin-serialize_tests.o `test -f 'test/serialize_tests.cpp' || echo '$(srcdir)/'`test/serialize_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Po
#	$(AM_V_CXX)source='test/serialize_tests.cpp' object='test/test_test_bitcoin-serialize_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-serialize_tests.o `test -f 'test/serialize_tests.cpp' || echo '$(srcdir)/'`test/serialize_tests.cpp

test/test_test_bitcoin-serialize_tests.obj: test/serialize_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-serialize_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Tpo -c -o test/test_test_bitcoin-serialize_tests.obj `if test -f 'test/serialize_tests.cpp'; then $(CYGPATH_W) 'test/serialize_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/serialize_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-serialize_tests.Po
#	$(AM_V_CXX)source='test/serialize_tests.cpp' object='test/test_test_bitcoin-serialize_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-serialize_tests.obj `if test -f 'test/serialize_tests.cpp'; then $(CYGPATH_W) 'test/serialize_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/serialize_tests.cpp'; fi`

test/test_test_bitcoin-sighash_tests.o: test/sighash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sighash_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Tpo -c -o test/test_test_bitcoin-sighash_tests.o `test -f 'test/sighash_tests.cpp' || echo '$(srcdir)/'`test/sighash_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Po
#	$(AM_V_CXX)source='test/sighash_tests.cpp' object='test/test_test_bitcoin-sighash_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sighash_tests.o `test -f 'test/sighash_tests.cpp' || echo '$(srcdir)/'`test/sighash_tests.cpp

test/test_test_bitcoin-sighash_tests.obj: test/sighash_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sighash_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Tpo -c -o test/test_test_bitcoin-sighash_tests.obj `if test -f 'test/sighash_tests.cpp'; then $(CYGPATH_W) 'test/sighash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sighash_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sighash_tests.Po
#	$(AM_V_CXX)source='test/sighash_tests.cpp' object='test/test_test_bitcoin-sighash_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sighash_tests.obj `if test -f 'test/sighash_tests.cpp'; then $(CYGPATH_W) 'test/sighash_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sighash_tests.cpp'; fi`

test/test_test_bitcoin-sigopcount_tests.o: test/sigopcount_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sigopcount_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Tpo -c -o test/test_test_bitcoin-sigopcount_tests.o `test -f 'test/sigopcount_tests.cpp' || echo '$(srcdir)/'`test/sigopcount_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Po
#	$(AM_V_CXX)source='test/sigopcount_tests.cpp' object='test/test_test_bitcoin-sigopcount_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sigopcount_tests.o `test -f 'test/sigopcount_tests.cpp' || echo '$(srcdir)/'`test/sigopcount_tests.cpp

test/test_test_bitcoin-sigopcount_tests.obj: test/sigopcount_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sigopcount_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Tpo -c -o test/test_test_bitcoin-sigopcount_tests.obj `if test -f 'test/sigopcount_tests.cpp'; then $(CYGPATH_W) 'test/sigopcount_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sigopcount_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sigopcount_tests.Po
#	$(AM_V_CXX)source='test/sigopcount_tests.cpp' object='test/test_test_bitcoin-sigopcount_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sigopcount_tests.obj `if test -f 'test/sigopcount_tests.cpp'; then $(CYGPATH_W) 'test/sigopcount_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sigopcount_tests.cpp'; fi`

test/test_test_bitcoin-skiplist_tests.o: test/skiplist_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-skiplist_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Tpo -c -o test/test_test_bitcoin-skiplist_tests.o `test -f 'test/skiplist_tests.cpp' || echo '$(srcdir)/'`test/skiplist_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Po
#	$(AM_V_CXX)source='test/skiplist_tests.cpp' object='test/test_test_bitcoin-skiplist_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-skiplist_tests.o `test -f 'test/skiplist_tests.cpp' || echo '$(srcdir)/'`test/skiplist_tests.cpp

test/test_test_bitcoin-skiplist_tests.obj: test/skiplist_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-skiplist_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Tpo -c -o test/test_test_bitcoin-skiplist_tests.obj `if test -f 'test/skiplist_tests.cpp'; then $(CYGPATH_W) 'test/skiplist_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/skiplist_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-skiplist_tests.Po
#	$(AM_V_CXX)source='test/skiplist_tests.cpp' object='test/test_test_bitcoin-skiplist_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-skiplist_tests.obj `if test -f 'test/skiplist_tests.cpp'; then $(CYGPATH_W) 'test/skiplist_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/skiplist_tests.cpp'; fi`

test/test_test_bitcoin-test_bitcoin.o: test/test_bitcoin.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-test_bitcoin.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Tpo -c -o test/test_test_bitcoin-test_bitcoin.o `test -f 'test/test_bitcoin.cpp' || echo '$(srcdir)/'`test/test_bitcoin.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Tpo test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Po
#	$(AM_V_CXX)source='test/test_bitcoin.cpp' object='test/test_test_bitcoin-test_bitcoin.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-test_bitcoin.o `test -f 'test/test_bitcoin.cpp' || echo '$(srcdir)/'`test/test_bitcoin.cpp

test/test_test_bitcoin-test_bitcoin.obj: test/test_bitcoin.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-test_bitcoin.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Tpo -c -o test/test_test_bitcoin-test_bitcoin.obj `if test -f 'test/test_bitcoin.cpp'; then $(CYGPATH_W) 'test/test_bitcoin.cpp'; else $(CYGPATH_W) '$(srcdir)/test/test_bitcoin.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Tpo test/$(DEPDIR)/test_test_bitcoin-test_bitcoin.Po
#	$(AM_V_CXX)source='test/test_bitcoin.cpp' object='test/test_test_bitcoin-test_bitcoin.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-test_bitcoin.obj `if test -f 'test/test_bitcoin.cpp'; then $(CYGPATH_W) 'test/test_bitcoin.cpp'; else $(CYGPATH_W) '$(srcdir)/test/test_bitcoin.cpp'; fi`

test/test_test_bitcoin-timedata_tests.o: test/timedata_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-timedata_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Tpo -c -o test/test_test_bitcoin-timedata_tests.o `test -f 'test/timedata_tests.cpp' || echo '$(srcdir)/'`test/timedata_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Po
#	$(AM_V_CXX)source='test/timedata_tests.cpp' object='test/test_test_bitcoin-timedata_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-timedata_tests.o `test -f 'test/timedata_tests.cpp' || echo '$(srcdir)/'`test/timedata_tests.cpp

test/test_test_bitcoin-timedata_tests.obj: test/timedata_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-timedata_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Tpo -c -o test/test_test_bitcoin-timedata_tests.obj `if test -f 'test/timedata_tests.cpp'; then $(CYGPATH_W) 'test/timedata_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/timedata_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-timedata_tests.Po
#	$(AM_V_CXX)source='test/timedata_tests.cpp' object='test/test_test_bitcoin-timedata_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-timedata_tests.obj `if test -f 'test/timedata_tests.cpp'; then $(CYGPATH_W) 'test/timedata_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/timedata_tests.cpp'; fi`

test/test_test_bitcoin-torcontrol_tests.o: test/torcontrol_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-torcontrol_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Tpo -c -o test/test_test_bitcoin-torcontrol_tests.o `test -f 'test/torcontrol_tests.cpp' || echo '$(srcdir)/'`test/torcontrol_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Po
#	$(AM_V_CXX)source='test/torcontrol_tests.cpp' object='test/test_test_bitcoin-torcontrol_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-torcontrol_tests.o `test -f 'test/torcontrol_tests.cpp' || echo '$(srcdir)/'`test/torcontrol_tests.cpp

test/test_test_bitcoin-torcontrol_tests.obj: test/torcontrol_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-torcontrol_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Tpo -c -o test/test_test_bitcoin-torcontrol_tests.obj `if test -f 'test/torcontrol_tests.cpp'; then $(CYGPATH_W) 'test/torcontrol_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/torcontrol_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-torcontrol_tests.Po
#	$(AM_V_CXX)source='test/torcontrol_tests.cpp' object='test/test_test_bitcoin-torcontrol_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-torcontrol_tests.obj `if test -f 'test/torcontrol_tests.cpp'; then $(CYGPATH_W) 'test/torcontrol_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/torcontrol_tests.cpp'; fi`

test/test_test_bitcoin-transaction_tests.o: test/transaction_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-transaction_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Tpo -c -o test/test_test_bitcoin-transaction_tests.o `test -f 'test/transaction_tests.cpp' || echo '$(srcdir)/'`test/transaction_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Po
#	$(AM_V_CXX)source='test/transaction_tests.cpp' object='test/test_test_bitcoin-transaction_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-transaction_tests.o `test -f 'test/transaction_tests.cpp' || echo '$(srcdir)/'`test/transaction_tests.cpp

test/test_test_bitcoin-transaction_tests.obj: test/transaction_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-transaction_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Tpo -c -o test/test_test_bitcoin-transaction_tests.obj `if test -f 'test/transaction_tests.cpp'; then $(CYGPATH_W) 'test/transaction_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/transaction_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-transaction_tests.Po
#	$(AM_V_CXX)source='test/transaction_tests.cpp' object='test/test_test_bitcoin-transaction_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-transaction_tests.obj `if test -f 'test/transaction_tests.cpp'; then $(CYGPATH_W) 'test/transaction_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/transaction_tests.cpp'; fi`

test/test_test_bitcoin-uint256_tests.o: test/uint256_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-uint256_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Tpo -c -o test/test_test_bitcoin-uint256_tests.o `test -f 'test/uint256_tests.cpp' || echo '$(srcdir)/'`test/uint256_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Po
#	$(AM_V_CXX)source='test/uint256_tests.cpp' object='test/test_test_bitcoin-uint256_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-uint256_tests.o `test -f 'test/uint256_tests.cpp' || echo '$(srcdir)/'`test/uint256_tests.cpp

test/test_test_bitcoin-uint256_tests.obj: test/uint256_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-uint256_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Tpo -c -o test/test_test_bitcoin-uint256_tests.obj `if test -f 'test/uint256_tests.cpp'; then $(CYGPATH_W) 'test/uint256_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/uint256_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-uint256_tests.Po
#	$(AM_V_CXX)source='test/uint256_tests.cpp' object='test/test_test_bitcoin-uint256_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-uint256_tests.obj `if test -f 'test/uint256_tests.cpp'; then $(CYGPATH_W) 'test/uint256_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/uint256_tests.cpp'; fi`

test/test_test_bitcoin-univalue_tests.o: test/univalue_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-univalue_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Tpo -c -o test/test_test_bitcoin-univalue_tests.o `test -f 'test/univalue_tests.cpp' || echo '$(srcdir)/'`test/univalue_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Po
#	$(AM_V_CXX)source='test/univalue_tests.cpp' object='test/test_test_bitcoin-univalue_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-univalue_tests.o `test -f 'test/univalue_tests.cpp' || echo '$(srcdir)/'`test/univalue_tests.cpp

test/test_test_bitcoin-univalue_tests.obj: test/univalue_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-univalue_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Tpo -c -o test/test_test_bitcoin-univalue_tests.obj `if test -f 'test/univalue_tests.cpp'; then $(CYGPATH_W) 'test/univalue_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/univalue_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-univalue_tests.Po
#	$(AM_V_CXX)source='test/univalue_tests.cpp' object='test/test_test_bitcoin-univalue_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-univalue_tests.obj `if test -f 'test/univalue_tests.cpp'; then $(CYGPATH_W) 'test/univalue_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/univalue_tests.cpp'; fi`

test/test_test_bitcoin-util_tests.o: test/util_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-util_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-util_tests.Tpo -c -o test/test_test_bitcoin-util_tests.o `test -f 'test/util_tests.cpp' || echo '$(srcdir)/'`test/util_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-util_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-util_tests.Po
#	$(AM_V_CXX)source='test/util_tests.cpp' object='test/test_test_bitcoin-util_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-util_tests.o `test -f 'test/util_tests.cpp' || echo '$(srcdir)/'`test/util_tests.cpp

test/test_test_bitcoin-util_tests.obj: test/util_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-util_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-util_tests.Tpo -c -o test/test_test_bitcoin-util_tests.obj `if test -f 'test/util_tests.cpp'; then $(CYGPATH_W) 'test/util_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/util_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-util_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-util_tests.Po
#	$(AM_V_CXX)source='test/util_tests.cpp' object='test/test_test_bitcoin-util_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-util_tests.obj `if test -f 'test/util_tests.cpp'; then $(CYGPATH_W) 'test/util_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/util_tests.cpp'; fi`

test/test_test_bitcoin-sha256compress_tests.o: test/sha256compress_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sha256compress_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Tpo -c -o test/test_test_bitcoin-sha256compress_tests.o `test -f 'test/sha256compress_tests.cpp' || echo '$(srcdir)/'`test/sha256compress_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Po
#	$(AM_V_CXX)source='test/sha256compress_tests.cpp' object='test/test_test_bitcoin-sha256compress_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sha256compress_tests.o `test -f 'test/sha256compress_tests.cpp' || echo '$(srcdir)/'`test/sha256compress_tests.cpp

test/test_test_bitcoin-sha256compress_tests.obj: test/sha256compress_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-sha256compress_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Tpo -c -o test/test_test_bitcoin-sha256compress_tests.obj `if test -f 'test/sha256compress_tests.cpp'; then $(CYGPATH_W) 'test/sha256compress_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sha256compress_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-sha256compress_tests.Po
#	$(AM_V_CXX)source='test/sha256compress_tests.cpp' object='test/test_test_bitcoin-sha256compress_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-sha256compress_tests.obj `if test -f 'test/sha256compress_tests.cpp'; then $(CYGPATH_W) 'test/sha256compress_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/sha256compress_tests.cpp'; fi`

test/test_test_bitcoin-accounting_tests.o: test/accounting_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-accounting_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Tpo -c -o test/test_test_bitcoin-accounting_tests.o `test -f 'test/accounting_tests.cpp' || echo '$(srcdir)/'`test/accounting_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Po
#	$(AM_V_CXX)source='test/accounting_tests.cpp' object='test/test_test_bitcoin-accounting_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-accounting_tests.o `test -f 'test/accounting_tests.cpp' || echo '$(srcdir)/'`test/accounting_tests.cpp

test/test_test_bitcoin-accounting_tests.obj: test/accounting_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-accounting_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Tpo -c -o test/test_test_bitcoin-accounting_tests.obj `if test -f 'test/accounting_tests.cpp'; then $(CYGPATH_W) 'test/accounting_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/accounting_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-accounting_tests.Po
#	$(AM_V_CXX)source='test/accounting_tests.cpp' object='test/test_test_bitcoin-accounting_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-accounting_tests.obj `if test -f 'test/accounting_tests.cpp'; then $(CYGPATH_W) 'test/accounting_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/accounting_tests.cpp'; fi`

wallet/test/test_test_bitcoin-wallet_tests.o: wallet/test/wallet_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT wallet/test/test_test_bitcoin-wallet_tests.o -MD -MP -MF wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Tpo -c -o wallet/test/test_test_bitcoin-wallet_tests.o `test -f 'wallet/test/wallet_tests.cpp' || echo '$(srcdir)/'`wallet/test/wallet_tests.cpp
	$(AM_V_at)$(am__mv) wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Tpo wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Po
#	$(AM_V_CXX)source='wallet/test/wallet_tests.cpp' object='wallet/test/test_test_bitcoin-wallet_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o wallet/test/test_test_bitcoin-wallet_tests.o `test -f 'wallet/test/wallet_tests.cpp' || echo '$(srcdir)/'`wallet/test/wallet_tests.cpp

wallet/test/test_test_bitcoin-wallet_tests.obj: wallet/test/wallet_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT wallet/test/test_test_bitcoin-wallet_tests.obj -MD -MP -MF wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Tpo -c -o wallet/test/test_test_bitcoin-wallet_tests.obj `if test -f 'wallet/test/wallet_tests.cpp'; then $(CYGPATH_W) 'wallet/test/wallet_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/test/wallet_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Tpo wallet/test/$(DEPDIR)/test_test_bitcoin-wallet_tests.Po
#	$(AM_V_CXX)source='wallet/test/wallet_tests.cpp' object='wallet/test/test_test_bitcoin-wallet_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o wallet/test/test_test_bitcoin-wallet_tests.obj `if test -f 'wallet/test/wallet_tests.cpp'; then $(CYGPATH_W) 'wallet/test/wallet_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/wallet/test/wallet_tests.cpp'; fi`

test/test_test_bitcoin-rpc_wallet_tests.o: test/rpc_wallet_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-rpc_wallet_tests.o -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Tpo -c -o test/test_test_bitcoin-rpc_wallet_tests.o `test -f 'test/rpc_wallet_tests.cpp' || echo '$(srcdir)/'`test/rpc_wallet_tests.cpp
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Po
#	$(AM_V_CXX)source='test/rpc_wallet_tests.cpp' object='test/test_test_bitcoin-rpc_wallet_tests.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-rpc_wallet_tests.o `test -f 'test/rpc_wallet_tests.cpp' || echo '$(srcdir)/'`test/rpc_wallet_tests.cpp

test/test_test_bitcoin-rpc_wallet_tests.obj: test/rpc_wallet_tests.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -MT test/test_test_bitcoin-rpc_wallet_tests.obj -MD -MP -MF test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Tpo -c -o test/test_test_bitcoin-rpc_wallet_tests.obj `if test -f 'test/rpc_wallet_tests.cpp'; then $(CYGPATH_W) 'test/rpc_wallet_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/rpc_wallet_tests.cpp'; fi`
	$(AM_V_at)$(am__mv) test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Tpo test/$(DEPDIR)/test_test_bitcoin-rpc_wallet_tests.Po
#	$(AM_V_CXX)source='test/rpc_wallet_tests.cpp' object='test/test_test_bitcoin-rpc_wallet_tests.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(test_test_bitcoin_CPPFLAGS) $(CPPFLAGS) $(test_test_bitcoin_CXXFLAGS) $(CXXFLAGS) -c -o test/test_test_bitcoin-rpc_wallet_tests.obj `if test -f 'test/rpc_wallet_tests.cpp'; then $(CYGPATH_W) 'test/rpc_wallet_tests.cpp'; else $(CYGPATH_W) '$(srcdir)/test/rpc_wallet_tests.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
	-rm -rf compat/.libs compat/_libs
	-rm -rf crypto/.libs crypto/_libs
	-rm -rf moonroomcash/.libs moonroomcash/_libs
	-rm -rf primitives/.libs primitives/_libs
	-rm -rf script/.libs script/_libs
	-rm -rf test/.libs test/_libs
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(includedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(includedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(includedir)" || exit $$?; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; test -n "$(includedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(includedir)'; $(am__uninstall_files_from_dir)

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all 
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
test/test_bitcoin.log: test/test_bitcoin$(EXEEXT)
	@p='test/test_bitcoin$(EXEEXT)'; \
	b='test/test_bitcoin'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
moonroomcash-gtest.log: moonroomcash-gtest$(EXEEXT)
	@p='moonroomcash-gtest$(EXEEXT)'; \
	b='moonroomcash-gtest'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.test$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
#check-local:
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS check-local
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)
install-binPROGRAMS: install-libLTLIBRARIES

installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f amqp/$(DEPDIR)/$(am__dirstamp)
	-rm -f amqp/$(am__dirstamp)
	-rm -f compat/$(DEPDIR)/$(am__dirstamp)
	-rm -f compat/$(am__dirstamp)
	-rm -f crypto/$(DEPDIR)/$(am__dirstamp)
	-rm -f crypto/$(am__dirstamp)
	-rm -f gtest/$(DEPDIR)/$(am__dirstamp)
	-rm -f gtest/$(am__dirstamp)
	-rm -f moonroomcash/$(DEPDIR)/$(am__dirstamp)
	-rm -f moonroomcash/$(am__dirstamp)
	-rm -f policy/$(DEPDIR)/$(am__dirstamp)
	-rm -f policy/$(am__dirstamp)
	-rm -f primitives/$(DEPDIR)/$(am__dirstamp)
	-rm -f primitives/$(am__dirstamp)
	-rm -f script/$(DEPDIR)/$(am__dirstamp)
	-rm -f script/$(am__dirstamp)
	-rm -f support/$(DEPDIR)/$(am__dirstamp)
	-rm -f support/$(am__dirstamp)
	-rm -f test/$(DEPDIR)/$(am__dirstamp)
	-rm -f test/$(am__dirstamp)
	-rm -f wallet/$(DEPDIR)/$(am__dirstamp)
	-rm -f wallet/$(am__dirstamp)
	-rm -f wallet/gtest/$(DEPDIR)/$(am__dirstamp)
	-rm -f wallet/gtest/$(am__dirstamp)
	-rm -f wallet/test/$(DEPDIR)/$(am__dirstamp)
	-rm -f wallet/test/$(am__dirstamp)
	-rm -f zmq/$(DEPDIR)/$(am__dirstamp)
	-rm -f zmq/$(am__dirstamp)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libLTLIBRARIES \
	clean-libtool clean-local clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR) amqp/$(DEPDIR) compat/$(DEPDIR) crypto/$(DEPDIR) gtest/$(DEPDIR) moonroomcash/$(DEPDIR) policy/$(DEPDIR) primitives/$(DEPDIR) script/$(DEPDIR) support/$(DEPDIR) test/$(DEPDIR) wallet/$(DEPDIR) wallet/gtest/$(DEPDIR) wallet/test/$(DEPDIR) zmq/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am: install-includeHEADERS

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS install-libLTLIBRARIES

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR) amqp/$(DEPDIR) compat/$(DEPDIR) crypto/$(DEPDIR) gtest/$(DEPDIR) moonroomcash/$(DEPDIR) policy/$(DEPDIR) primitives/$(DEPDIR) script/$(DEPDIR) support/$(DEPDIR) test/$(DEPDIR) wallet/$(DEPDIR) wallet/gtest/$(DEPDIR) wallet/test/$(DEPDIR) zmq/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-includeHEADERS \
	uninstall-libLTLIBRARIES

.MAKE: $(am__recursive_targets) check-am install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-TESTS check-am check-local clean clean-binPROGRAMS \
	clean-generic clean-libLTLIBRARIES clean-libtool clean-local \
	clean-noinstPROGRAMS cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am \
	install-includeHEADERS install-info install-info-am \
	install-libLTLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-includeHEADERS \
	uninstall-libLTLIBRARIES

.PRECIOUS: Makefile


# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race
$(LIBLEVELDB): $(LIBMEMENV)

$(LIBLEVELDB) $(LIBMEMENV):
	@echo "Building LevelDB ..." && $(MAKE) -C $(@D) $(@F) CXX="$(CXX)" \
	  CC="$(CC)" PLATFORM=$(TARGET_OS) AR="$(AR)" $(LEVELDB_TARGET_FLAGS) \
          OPT="$(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) $(AM_CPPFLAGS) $(CPPFLAGS) -D__STDC_LIMIT_MACROS"

$(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)

$(LIBSNARK): $(wildcard snark/src/*)
	$(AM_V_at) CXXFLAGS="$(LIBSNARK_CXXFLAGS)" $(MAKE) $(AM_MAKEFLAGS) -C snark/ DEPINST="$(LIBSNARK_DEPINST)" $(LIBSNARK_CONFIG_FLAGS) OPTFLAGS="-O2 -march=x86-64"

libsnark-tests: $(wildcard snark/src/*)
	$(AM_V_at) CXXFLAGS="$(LIBSNARK_CXXFLAGS)" $(MAKE) $(AM_MAKEFLAGS) -C snark/ check DEPINST="$(LIBSNARK_DEPINST)" $(LIBSNARK_CONFIG_FLAGS) OPTFLAGS="-O2 -march=x86-64"

$(LIBUNIVALUE): $(wildcard univalue/lib/*)
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/

.PHONY: FORCE collate-libsnark check-symbols check-security

obj/build.h: FORCE
	@$(MKDIR_P) $(builddir)/obj
	@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \
	  $(abs_top_srcdir)
libbitcoin_util_a-clientversion.$(OBJEXT): obj/build.h

clean-local:
	-$(MAKE) -C leveldb clean
	-$(MAKE) -C secp256k1 clean
	-$(MAKE) -C snark clean
	rm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno
	-rm -f config.h

.rc.o:
	@test -f $(WINDRES)
	$(AM_V_GEN) $(WINDRES) -DWINDRES_PREPROC -i $< -o $@

.mm.o:
	$(AM_V_CXX) $(OBJCXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	  $(CPPFLAGS) $(AM_CXXFLAGS) $(AM_CXXFLAGS) $(PIE_FLAGS) $(CXXFLAGS) -c -o $@ $<

check-symbols: $(bin_PROGRAMS)
#	@echo "Checking glibc back compat of [$(bin_PROGRAMS)]..."
#	$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)

check-security: $(bin_PROGRAMS)
	@echo "Checking binary security of [$(bin_PROGRAMS)]..."
	$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)

%.pb.cc %.pb.h: %.proto
	@test -f $(PROTOC)
	$(AM_V_GEN) $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)

$(BITCOIN_TESTS): $(GENERATED_TEST_FILES)

bitcoin_test: $(TEST_BINARY)

bitcoin_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

bitcoin_test_clean : FORCE
	rm -f $(CLEAN_BITCOIN_TEST) $(test_test_bitcoin_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/bitcoin-util-test.py..."
	$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/bitcoin-util-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

moonroomcash-gtest_check: moonroomcash-gtest FORCE
	./moonroomcash-gtest

moonroomcash-gtest-expected-failures: moonroomcash-gtest FORCE
	./moonroomcash-gtest --gtest_filter=*DISABLED_* --gtest_also_run_disabled_tests

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
